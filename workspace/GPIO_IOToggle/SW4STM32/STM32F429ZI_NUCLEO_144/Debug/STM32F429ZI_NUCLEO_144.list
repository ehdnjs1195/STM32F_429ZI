
STM32F429ZI_NUCLEO_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e88  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001034  08001034  00011034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001064  08001064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000000  08001068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  8 .bss          00000034  2000002c  2000002c  0002002c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000060  20000060  0002002c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000524e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001445  00000000  00000000  000252aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000014fd  00000000  00000000  000266ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00027bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000590  00000000  00000000  00027ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ad0  00000000  00000000  00028580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000677e  00000000  00000000  0004c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6c2  00000000  00000000  000527ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ce90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000914  00000000  00000000  0012cee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800101c 	.word	0x0800101c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000030 	.word	0x20000030
 80001e8:	0800101c 	.word	0x0800101c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <BSP_LED_Off+0x14>)
 80004f2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <BSP_LED_Off+0x18>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80004fe:	f000 b9bb 	b.w	8000878 <HAL_GPIO_WritePin>
 8000502:	bf00      	nop
 8000504:	08001034 	.word	0x08001034
 8000508:	20000000 	.word	0x20000000

0800050c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800050c:	490f      	ldr	r1, [pc, #60]	; (800054c <SystemInit+0x40>)
 800050e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000512:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <SystemInit+0x44>)
 800051c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800051e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000520:	f042 0201 	orr.w	r2, r2, #1
 8000524:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000526:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800052e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000532:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SystemInit+0x48>)
 8000536:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800053e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000546:	608b      	str	r3, [r1, #8]
#endif
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	40023800 	.word	0x40023800
 8000554:	24003010 	.word	0x24003010

08000558 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000558:	4770      	bx	lr
	...

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_InitTick+0x3c>)
 8000560:	4e0e      	ldr	r6, [pc, #56]	; (800059c <HAL_InitTick+0x40>)
{
 8000562:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	7830      	ldrb	r0, [r6, #0]
 800056a:	fbb3 f3f0 	udiv	r3, r3, r0
 800056e:	6810      	ldr	r0, [r2, #0]
 8000570:	fbb0 f0f3 	udiv	r0, r0, r3
 8000574:	f000 f880 	bl	8000678 <HAL_SYSTICK_Config>
 8000578:	4604      	mov	r4, r0
 800057a:	b950      	cbnz	r0, 8000592 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057c:	2d0f      	cmp	r5, #15
 800057e:	d808      	bhi.n	8000592 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	4602      	mov	r2, r0
 8000582:	4629      	mov	r1, r5
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f844 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	6075      	str	r5, [r6, #4]
 800058e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000590:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000592:	2001      	movs	r0, #1
 8000594:	e7fc      	b.n	8000590 <HAL_InitTick+0x34>
 8000596:	bf00      	nop
 8000598:	20000010 	.word	0x20000010
 800059c:	20000014 	.word	0x20000014

080005a0 <HAL_Init>:
{
 80005a0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_Init+0x28>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f81b 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f7ff ffce 	bl	800055c <HAL_InitTick>
  HAL_MspInit();
 80005c0:	f7ff ffca 	bl	8000558 <HAL_MspInit>
}
 80005c4:	2000      	movs	r0, #0
 80005c6:	bd08      	pop	{r3, pc}
 80005c8:	40023c00 	.word	0x40023c00

080005cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x10>)
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <HAL_IncTick+0x14>)
 80005d0:	6811      	ldr	r1, [r2, #0]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	440b      	add	r3, r1
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000048 	.word	0x20000048
 80005e0:	20000014 	.word	0x20000014

080005e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <HAL_GetTick+0x8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000048 	.word	0x20000048

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000600:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800060c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2d04      	cmp	r5, #4
 8000626:	bf28      	it	cs
 8000628:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa03 f505 	lsl.w	r5, r3, r5
 800063a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063e:	40a3      	lsls	r3, r4
 8000640:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000646:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000648:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	bfac      	ite	ge
 800064e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a08      	ldrlt	r2, [pc, #32]	; (8000674 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	bfb8      	it	lt
 800065a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	b2db      	uxtb	r3, r3
 8000660:	bfaa      	itet	ge
 8000662:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	e000ed14 	.word	0xe000ed14

08000678 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000678:	3801      	subs	r0, #1
 800067a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800067e:	d20b      	bcs.n	8000698 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000680:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	4a05      	ldr	r2, [pc, #20]	; (800069c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000686:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	21f0      	movs	r1, #240	; 0xf0
 800068a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000690:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000692:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000694:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000696:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000698:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000868 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006a8:	4a6d      	ldr	r2, [pc, #436]	; (8000860 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006aa:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ac:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80006ae:	2401      	movs	r4, #1
 80006b0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80006b6:	43ac      	bics	r4, r5
 80006b8:	f040 80b9 	bne.w	800082e <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006bc:	684d      	ldr	r5, [r1, #4]
 80006be:	f005 0403 	and.w	r4, r5, #3
 80006c2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006c6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006c8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006ca:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006ce:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006d4:	d834      	bhi.n	8000740 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80006d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006dc:	68cf      	ldr	r7, [r1, #12]
 80006de:	fa07 f708 	lsl.w	r7, r7, r8
 80006e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80006e6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ea:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ee:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80006f2:	409f      	lsls	r7, r3
 80006f4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006f8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80006fa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000700:	688f      	ldr	r7, [r1, #8]
 8000702:	fa07 f708 	lsl.w	r7, r7, r8
 8000706:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800070a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800070c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800070e:	d119      	bne.n	8000744 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000710:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000714:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000718:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800071c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000720:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000724:	f04f 0e0f 	mov.w	lr, #15
 8000728:	fa0e fe0b 	lsl.w	lr, lr, fp
 800072c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000730:	690f      	ldr	r7, [r1, #16]
 8000732:	fa07 f70b 	lsl.w	r7, r7, fp
 8000736:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800073a:	f8ca 7020 	str.w	r7, [sl, #32]
 800073e:	e001      	b.n	8000744 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000740:	2c03      	cmp	r4, #3
 8000742:	d1da      	bne.n	80006fa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000744:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800074e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000752:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000754:	d06b      	beq.n	800082e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	f04f 0a00 	mov.w	sl, #0
 800075a:	f8cd a004 	str.w	sl, [sp, #4]
 800075e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000762:	4c40      	ldr	r4, [pc, #256]	; (8000864 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000768:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800076c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000770:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000774:	9601      	str	r6, [sp, #4]
 8000776:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000778:	f023 0603 	bic.w	r6, r3, #3
 800077c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000780:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000784:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000788:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000790:	270f      	movs	r7, #15
 8000792:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000796:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000798:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079c:	d04e      	beq.n	800083c <HAL_GPIO_Init+0x19c>
 800079e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007a2:	42a0      	cmp	r0, r4
 80007a4:	d04c      	beq.n	8000840 <HAL_GPIO_Init+0x1a0>
 80007a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007aa:	42a0      	cmp	r0, r4
 80007ac:	d04a      	beq.n	8000844 <HAL_GPIO_Init+0x1a4>
 80007ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007b2:	42a0      	cmp	r0, r4
 80007b4:	d048      	beq.n	8000848 <HAL_GPIO_Init+0x1a8>
 80007b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007ba:	42a0      	cmp	r0, r4
 80007bc:	d046      	beq.n	800084c <HAL_GPIO_Init+0x1ac>
 80007be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007c2:	42a0      	cmp	r0, r4
 80007c4:	d044      	beq.n	8000850 <HAL_GPIO_Init+0x1b0>
 80007c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007ca:	42a0      	cmp	r0, r4
 80007cc:	d042      	beq.n	8000854 <HAL_GPIO_Init+0x1b4>
 80007ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007d2:	42a0      	cmp	r0, r4
 80007d4:	d040      	beq.n	8000858 <HAL_GPIO_Init+0x1b8>
 80007d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007da:	42a0      	cmp	r0, r4
 80007dc:	d03e      	beq.n	800085c <HAL_GPIO_Init+0x1bc>
 80007de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007e2:	42a0      	cmp	r0, r4
 80007e4:	bf0c      	ite	eq
 80007e6:	2409      	moveq	r4, #9
 80007e8:	240a      	movne	r4, #10
 80007ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80007ee:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80007f2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80007f4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80007f8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf54      	ite	pl
 80007fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007fe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000802:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000804:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000806:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf54      	ite	pl
 800080a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800080c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000810:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000812:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000814:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000816:	bf54      	ite	pl
 8000818:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800081a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800081e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000820:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000822:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000824:	bf54      	ite	pl
 8000826:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000828:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800082c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	3301      	adds	r3, #1
 8000830:	2b10      	cmp	r3, #16
 8000832:	f47f af3b 	bne.w	80006ac <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000836:	b003      	add	sp, #12
 8000838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083c:	4654      	mov	r4, sl
 800083e:	e7d4      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000840:	2401      	movs	r4, #1
 8000842:	e7d2      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000844:	2402      	movs	r4, #2
 8000846:	e7d0      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000848:	2403      	movs	r4, #3
 800084a:	e7ce      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 800084c:	2404      	movs	r4, #4
 800084e:	e7cc      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000850:	2405      	movs	r4, #5
 8000852:	e7ca      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000854:	2406      	movs	r4, #6
 8000856:	e7c8      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000858:	2407      	movs	r4, #7
 800085a:	e7c6      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 800085c:	2408      	movs	r4, #8
 800085e:	e7c4      	b.n	80007ea <HAL_GPIO_Init+0x14a>
 8000860:	40013c00 	.word	0x40013c00
 8000864:	40020000 	.word	0x40020000
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800086c:	6903      	ldr	r3, [r0, #16]
 800086e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000870:	bf14      	ite	ne
 8000872:	2001      	movne	r0, #1
 8000874:	2000      	moveq	r0, #0
 8000876:	4770      	bx	lr

08000878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000878:	b10a      	cbz	r2, 800087e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087a:	6181      	str	r1, [r0, #24]
  }
}
 800087c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087e:	0409      	lsls	r1, r1, #16
 8000880:	e7fb      	b.n	800087a <HAL_GPIO_WritePin+0x2>
	...

08000884 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000884:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800088c:	4d18      	ldr	r5, [pc, #96]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000890:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_PWREx_EnableOverDrive+0x70>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 80008a6:	f7ff fe9d 	bl	80005e4 <HAL_GetTick>
 80008aa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008ac:	686b      	ldr	r3, [r5, #4]
 80008ae:	03da      	lsls	r2, r3, #15
 80008b0:	d50b      	bpl.n	80008ca <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008b4:	4d0e      	ldr	r5, [pc, #56]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008b6:	2201      	movs	r2, #1
 80008b8:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 80008ba:	f7ff fe93 	bl	80005e4 <HAL_GetTick>
 80008be:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008c0:	686b      	ldr	r3, [r5, #4]
 80008c2:	039b      	lsls	r3, r3, #14
 80008c4:	d50a      	bpl.n	80008dc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008c6:	2000      	movs	r0, #0
 80008c8:	e006      	b.n	80008d8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ca:	f7ff fe8b 	bl	80005e4 <HAL_GetTick>
 80008ce:	1b00      	subs	r0, r0, r4
 80008d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d4:	d9ea      	bls.n	80008ac <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008d6:	2003      	movs	r0, #3
}
 80008d8:	b003      	add	sp, #12
 80008da:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008dc:	f7ff fe82 	bl	80005e4 <HAL_GetTick>
 80008e0:	1b00      	subs	r0, r0, r4
 80008e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008e6:	d9eb      	bls.n	80008c0 <HAL_PWREx_EnableOverDrive+0x3c>
 80008e8:	e7f5      	b.n	80008d6 <HAL_PWREx_EnableOverDrive+0x52>
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000
 80008f4:	420e0000 	.word	0x420e0000

080008f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008fc:	4604      	mov	r4, r0
 80008fe:	b340      	cbz	r0, 8000952 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000900:	6803      	ldr	r3, [r0, #0]
 8000902:	07dd      	lsls	r5, r3, #31
 8000904:	d410      	bmi.n	8000928 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	0798      	lsls	r0, r3, #30
 800090a:	d45e      	bmi.n	80009ca <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	071a      	lsls	r2, r3, #28
 8000910:	f100 80a0 	bmi.w	8000a54 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	f100 80c0 	bmi.w	8000a9c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800091c:	69a0      	ldr	r0, [r4, #24]
 800091e:	2800      	cmp	r0, #0
 8000920:	f040 8128 	bne.w	8000b74 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e02b      	b.n	8000980 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000928:	4b8f      	ldr	r3, [pc, #572]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	f002 020c 	and.w	r2, r2, #12
 8000930:	2a04      	cmp	r2, #4
 8000932:	d007      	beq.n	8000944 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800093a:	2a08      	cmp	r2, #8
 800093c:	d10b      	bne.n	8000956 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	0251      	lsls	r1, r2, #9
 8000942:	d508      	bpl.n	8000956 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000944:	4b88      	ldr	r3, [pc, #544]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	039a      	lsls	r2, r3, #14
 800094a:	d5dc      	bpl.n	8000906 <HAL_RCC_OscConfig+0xe>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1d9      	bne.n	8000906 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
 8000954:	e014      	b.n	8000980 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000956:	6862      	ldr	r2, [r4, #4]
 8000958:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800095c:	d113      	bne.n	8000986 <HAL_RCC_OscConfig+0x8e>
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000964:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fe3d 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	4e7f      	ldr	r6, [pc, #508]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800096c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096e:	6833      	ldr	r3, [r6, #0]
 8000970:	039b      	lsls	r3, r3, #14
 8000972:	d4c8      	bmi.n	8000906 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000974:	f7ff fe36 	bl	80005e4 <HAL_GetTick>
 8000978:	1b40      	subs	r0, r0, r5
 800097a:	2864      	cmp	r0, #100	; 0x64
 800097c:	d9f7      	bls.n	800096e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800097e:	2003      	movs	r0, #3
}
 8000980:	b002      	add	sp, #8
 8000982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000986:	4d78      	ldr	r5, [pc, #480]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 8000988:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	d107      	bne.n	80009a0 <HAL_RCC_OscConfig+0xa8>
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	602b      	str	r3, [r5, #0]
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800099e:	e7e2      	b.n	8000966 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009a4:	602b      	str	r3, [r5, #0]
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ac:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d1d9      	bne.n	8000966 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80009b2:	f7ff fe17 	bl	80005e4 <HAL_GetTick>
 80009b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b8:	682b      	ldr	r3, [r5, #0]
 80009ba:	039f      	lsls	r7, r3, #14
 80009bc:	d5a3      	bpl.n	8000906 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009be:	f7ff fe11 	bl	80005e4 <HAL_GetTick>
 80009c2:	1b80      	subs	r0, r0, r6
 80009c4:	2864      	cmp	r0, #100	; 0x64
 80009c6:	d9f7      	bls.n	80009b8 <HAL_RCC_OscConfig+0xc0>
 80009c8:	e7d9      	b.n	800097e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ca:	4b67      	ldr	r3, [pc, #412]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	f012 0f0c 	tst.w	r2, #12
 80009d2:	d007      	beq.n	80009e4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009da:	2a08      	cmp	r2, #8
 80009dc:	d111      	bne.n	8000a02 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	025e      	lsls	r6, r3, #9
 80009e2:	d40e      	bmi.n	8000a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e4:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	079d      	lsls	r5, r3, #30
 80009ea:	d502      	bpl.n	80009f2 <HAL_RCC_OscConfig+0xfa>
 80009ec:	68e3      	ldr	r3, [r4, #12]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d1af      	bne.n	8000952 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	6921      	ldr	r1, [r4, #16]
 80009f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009fe:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a00:	e784      	b.n	800090c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a02:	68e2      	ldr	r2, [r4, #12]
 8000a04:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_RCC_OscConfig+0x274>)
 8000a06:	b1b2      	cbz	r2, 8000a36 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fdea 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a10:	4d55      	ldr	r5, [pc, #340]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000a12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	0798      	lsls	r0, r3, #30
 8000a18:	d507      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	6922      	ldr	r2, [r4, #16]
 8000a1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a22:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a26:	602b      	str	r3, [r5, #0]
 8000a28:	e770      	b.n	800090c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2a:	f7ff fddb 	bl	80005e4 <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	2802      	cmp	r0, #2
 8000a32:	d9ef      	bls.n	8000a14 <HAL_RCC_OscConfig+0x11c>
 8000a34:	e7a3      	b.n	800097e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000a36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a38:	f7ff fdd4 	bl	80005e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a3c:	4e4a      	ldr	r6, [pc, #296]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000a3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a40:	6833      	ldr	r3, [r6, #0]
 8000a42:	0799      	lsls	r1, r3, #30
 8000a44:	f57f af62 	bpl.w	800090c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a48:	f7ff fdcc 	bl	80005e4 <HAL_GetTick>
 8000a4c:	1b40      	subs	r0, r0, r5
 8000a4e:	2802      	cmp	r0, #2
 8000a50:	d9f6      	bls.n	8000a40 <HAL_RCC_OscConfig+0x148>
 8000a52:	e794      	b.n	800097e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a54:	6962      	ldr	r2, [r4, #20]
 8000a56:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <HAL_RCC_OscConfig+0x274>)
 8000a58:	b182      	cbz	r2, 8000a7c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000a60:	f7ff fdc0 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a64:	4e40      	ldr	r6, [pc, #256]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000a66:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a68:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000a6a:	079f      	lsls	r7, r3, #30
 8000a6c:	f53f af52 	bmi.w	8000914 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a70:	f7ff fdb8 	bl	80005e4 <HAL_GetTick>
 8000a74:	1b40      	subs	r0, r0, r5
 8000a76:	2802      	cmp	r0, #2
 8000a78:	d9f6      	bls.n	8000a68 <HAL_RCC_OscConfig+0x170>
 8000a7a:	e780      	b.n	800097e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000a7c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000a80:	f7ff fdb0 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a84:	4e38      	ldr	r6, [pc, #224]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000a86:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a88:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000a8a:	0798      	lsls	r0, r3, #30
 8000a8c:	f57f af42 	bpl.w	8000914 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a90:	f7ff fda8 	bl	80005e4 <HAL_GetTick>
 8000a94:	1b40      	subs	r0, r0, r5
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9f6      	bls.n	8000a88 <HAL_RCC_OscConfig+0x190>
 8000a9a:	e770      	b.n	800097e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a9c:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 8000a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000aa4:	d128      	bne.n	8000af8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	9201      	str	r2, [sp, #4]
 8000aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aae:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aba:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abc:	4d2c      	ldr	r5, [pc, #176]	; (8000b70 <HAL_RCC_OscConfig+0x278>)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	05d9      	lsls	r1, r3, #23
 8000ac2:	d51b      	bpl.n	8000afc <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac4:	68a3      	ldr	r3, [r4, #8]
 8000ac6:	4d28      	ldr	r5, [pc, #160]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d127      	bne.n	8000b1c <HAL_RCC_OscConfig+0x224>
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fd86 	bl	80005e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad8:	4e23      	ldr	r6, [pc, #140]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000ada:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000adc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000ae2:	079b      	lsls	r3, r3, #30
 8000ae4:	d539      	bpl.n	8000b5a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	f43f af18 	beq.w	800091c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aec:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <HAL_RCC_OscConfig+0x270>)
 8000aee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	e711      	b.n	800091c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000af8:	2700      	movs	r7, #0
 8000afa:	e7df      	b.n	8000abc <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b04:	f7ff fd6e 	bl	80005e4 <HAL_GetTick>
 8000b08:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	05da      	lsls	r2, r3, #23
 8000b0e:	d4d9      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b10:	f7ff fd68 	bl	80005e4 <HAL_GetTick>
 8000b14:	1b80      	subs	r0, r0, r6
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f7      	bls.n	8000b0a <HAL_RCC_OscConfig+0x212>
 8000b1a:	e730      	b.n	800097e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	d104      	bne.n	8000b2a <HAL_RCC_OscConfig+0x232>
 8000b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	672b      	str	r3, [r5, #112]	; 0x70
 8000b28:	e7d0      	b.n	8000acc <HAL_RCC_OscConfig+0x1d4>
 8000b2a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	672a      	str	r2, [r5, #112]	; 0x70
 8000b32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b34:	f022 0204 	bic.w	r2, r2, #4
 8000b38:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1ca      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fd51 	bl	80005e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b42:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b4a:	0798      	lsls	r0, r3, #30
 8000b4c:	d5cb      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4e:	f7ff fd49 	bl	80005e4 <HAL_GetTick>
 8000b52:	1b80      	subs	r0, r0, r6
 8000b54:	4540      	cmp	r0, r8
 8000b56:	d9f7      	bls.n	8000b48 <HAL_RCC_OscConfig+0x250>
 8000b58:	e711      	b.n	800097e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fd43 	bl	80005e4 <HAL_GetTick>
 8000b5e:	1b40      	subs	r0, r0, r5
 8000b60:	4540      	cmp	r0, r8
 8000b62:	d9bd      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x1e8>
 8000b64:	e70b      	b.n	800097e <HAL_RCC_OscConfig+0x86>
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	42470000 	.word	0x42470000
 8000b70:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b74:	4d36      	ldr	r5, [pc, #216]	; (8000c50 <HAL_RCC_OscConfig+0x358>)
 8000b76:	68ab      	ldr	r3, [r5, #8]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	d03d      	beq.n	8000bfc <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <HAL_RCC_OscConfig+0x35c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b86:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b88:	d12b      	bne.n	8000be2 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fd2b 	bl	80005e4 <HAL_GetTick>
 8000b8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	0199      	lsls	r1, r3, #6
 8000b94:	d41f      	bmi.n	8000bd6 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b96:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000baa:	0852      	lsrs	r2, r2, #1
 8000bac:	3a01      	subs	r2, #1
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb6:	4d26      	ldr	r5, [pc, #152]	; (8000c50 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8000bb8:	2201      	movs	r2, #1
 8000bba:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fd12 	bl	80005e4 <HAL_GetTick>
 8000bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	019a      	lsls	r2, r3, #6
 8000bc6:	f53f aead 	bmi.w	8000924 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fd0b 	bl	80005e4 <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ca>
 8000bd4:	e6d3      	b.n	800097e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd6:	f7ff fd05 	bl	80005e4 <HAL_GetTick>
 8000bda:	1b80      	subs	r0, r0, r6
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d9d7      	bls.n	8000b90 <HAL_RCC_OscConfig+0x298>
 8000be0:	e6cd      	b.n	800097e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000be2:	f7ff fcff 	bl	80005e4 <HAL_GetTick>
 8000be6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	019b      	lsls	r3, r3, #6
 8000bec:	f57f ae9a 	bpl.w	8000924 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fcf8 	bl	80005e4 <HAL_GetTick>
 8000bf4:	1b00      	subs	r0, r0, r4
 8000bf6:	2802      	cmp	r0, #2
 8000bf8:	d9f6      	bls.n	8000be8 <HAL_RCC_OscConfig+0x2f0>
 8000bfa:	e6c0      	b.n	800097e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bfc:	2801      	cmp	r0, #1
 8000bfe:	f43f aebf 	beq.w	8000980 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000c02:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c04:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c06:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c0a:	4291      	cmp	r1, r2
 8000c0c:	f47f aea1 	bne.w	8000952 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c10:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c16:	428a      	cmp	r2, r1
 8000c18:	f47f ae9b 	bne.w	8000952 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c1e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000c22:	401a      	ands	r2, r3
 8000c24:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000c28:	f47f ae93 	bne.w	8000952 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c2e:	0852      	lsrs	r2, r2, #1
 8000c30:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000c34:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c36:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000c3a:	f47f ae8a 	bne.w	8000952 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c40:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c44:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000c48:	f43f ae6c 	beq.w	8000924 <HAL_RCC_OscConfig+0x2c>
 8000c4c:	e681      	b.n	8000952 <HAL_RCC_OscConfig+0x5a>
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	42470000 	.word	0x42470000

08000c58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c58:	4913      	ldr	r1, [pc, #76]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c5c:	688b      	ldr	r3, [r1, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d01c      	beq.n	8000ca0 <HAL_RCC_GetSysClockFreq+0x48>
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d11c      	bne.n	8000ca4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c6a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c6c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c6e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c70:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c74:	bf14      	ite	ne
 8000c76:	480d      	ldrne	r0, [pc, #52]	; (8000cac <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c78:	480d      	ldreq	r0, [pc, #52]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c7e:	bf18      	it	ne
 8000c80:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c86:	fba1 0100 	umull	r0, r1, r1, r0
 8000c8a:	f7ff faaf 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c96:	3301      	adds	r3, #1
 8000c98:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c9a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c9e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <HAL_RCC_GetSysClockFreq+0x54>)
 8000ca2:	e7fc      	b.n	8000c9e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000ca6:	e7fa      	b.n	8000c9e <HAL_RCC_GetSysClockFreq+0x46>
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	00f42400 	.word	0x00f42400

08000cb4 <HAL_RCC_ClockConfig>:
{
 8000cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b910      	cbnz	r0, 8000cc4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
}
 8000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_RCC_ClockConfig+0x124>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f002 020f 	and.w	r2, r2, #15
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	d328      	bcc.n	8000d22 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	0797      	lsls	r7, r2, #30
 8000cd4:	d42d      	bmi.n	8000d32 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd6:	07d0      	lsls	r0, r2, #31
 8000cd8:	d441      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_RCC_ClockConfig+0x124>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	f002 020f 	and.w	r2, r2, #15
 8000ce2:	42aa      	cmp	r2, r5
 8000ce4:	d866      	bhi.n	8000db4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce6:	6822      	ldr	r2, [r4, #0]
 8000ce8:	0751      	lsls	r1, r2, #29
 8000cea:	d46c      	bmi.n	8000dc6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	0713      	lsls	r3, r2, #28
 8000cee:	d507      	bpl.n	8000d00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000cf2:	6921      	ldr	r1, [r4, #16]
 8000cf4:	6893      	ldr	r3, [r2, #8]
 8000cf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cfe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d00:	f7ff ffaa 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d06:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <HAL_RCC_ClockConfig+0x12c>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	40d8      	lsrs	r0, r3
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_RCC_ClockConfig+0x130>)
 8000d14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_RCC_ClockConfig+0x134>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f7ff fc1f 	bl	800055c <HAL_InitTick>
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e7ce      	b.n	8000cc0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d1c6      	bne.n	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000d30:	e7ce      	b.n	8000cd0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d34:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d38:	bf1e      	ittt	ne
 8000d3a:	6899      	ldrne	r1, [r3, #8]
 8000d3c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000d40:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d42:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d44:	bf42      	ittt	mi
 8000d46:	6899      	ldrmi	r1, [r3, #8]
 8000d48:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000d4c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d4e:	4923      	ldr	r1, [pc, #140]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d50:	68a0      	ldr	r0, [r4, #8]
 8000d52:	688b      	ldr	r3, [r1, #8]
 8000d54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d58:	4303      	orrs	r3, r0
 8000d5a:	608b      	str	r3, [r1, #8]
 8000d5c:	e7bb      	b.n	8000cd6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5e:	6862      	ldr	r2, [r4, #4]
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d11c      	bne.n	8000da0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	d0a7      	beq.n	8000cbe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d6e:	4e1b      	ldr	r6, [pc, #108]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d70:	68b3      	ldr	r3, [r6, #8]
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fc33 	bl	80005e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d84:	68b3      	ldr	r3, [r6, #8]
 8000d86:	6862      	ldr	r2, [r4, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d90:	d0a3      	beq.n	8000cda <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d92:	f7ff fc27 	bl	80005e4 <HAL_GetTick>
 8000d96:	1bc0      	subs	r0, r0, r7
 8000d98:	4540      	cmp	r0, r8
 8000d9a:	d9f3      	bls.n	8000d84 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	e78f      	b.n	8000cc0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da0:	1e91      	subs	r1, r2, #2
 8000da2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da6:	d802      	bhi.n	8000dae <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dac:	e7de      	b.n	8000d6c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dae:	f013 0f02 	tst.w	r3, #2
 8000db2:	e7db      	b.n	8000d6c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db4:	b2ea      	uxtb	r2, r5
 8000db6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	f47f af7d 	bne.w	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000dc4:	e78f      	b.n	8000ce6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000dc8:	68e0      	ldr	r0, [r4, #12]
 8000dca:	688b      	ldr	r3, [r1, #8]
 8000dcc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	608b      	str	r3, [r1, #8]
 8000dd4:	e78a      	b.n	8000cec <HAL_RCC_ClockConfig+0x38>
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	0800103e 	.word	0x0800103e
 8000de4:	20000010 	.word	0x20000010
 8000de8:	20000018 	.word	0x20000018

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000df0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000df2:	e003      	b.n	8000dfc <LoopCopyDataInit>

08000df4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000df6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000df8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dfa:	3104      	adds	r1, #4

08000dfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e04:	d3f6      	bcc.n	8000df4 <CopyDataInit>
  ldr  r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e08:	e002      	b.n	8000e10 <LoopFillZerobss>

08000e0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e0c:	f842 3b04 	str.w	r3, [r2], #4

08000e10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e14:	d3f9      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e16:	f7ff fb79 	bl	800050c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f000 f8db 	bl	8000fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f000 f821 	bl	8000e64 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e24:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e28:	08001068 	.word	0x08001068
  ldr  r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e30:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8000e34:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8000e38:	20000060 	.word	0x20000060

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <number0>:

	  }
  }
}

void number0(){
 8000e40:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOE, a, 1);
 8000e42:	4c06      	ldr	r4, [pc, #24]	; (8000e5c <number0+0x1c>)
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <number0+0x20>)
 8000e46:	8821      	ldrh	r1, [r4, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f7ff fd15 	bl	8000878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, a, 1);
 8000e4e:	8821      	ldrh	r1, [r4, #0]
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <number0+0x20>)
}
 8000e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOE, a, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f7ff bd0e 	b.w	8000878 <HAL_GPIO_WritePin>
 8000e5c:	2000001c 	.word	0x2000001c
 8000e60:	40021000 	.word	0x40021000

08000e64 <main>:
{
 8000e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e68:	b094      	sub	sp, #80	; 0x50
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4d4e      	ldr	r5, [pc, #312]	; (8000fa4 <main+0x140>)
 8000e6c:	2400      	movs	r4, #0
  HAL_Init();
 8000e6e:	f7ff fb97 	bl	80005a0 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	9401      	str	r4, [sp, #4]
 8000e74:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	642b      	str	r3, [r5, #64]	; 0x40
 8000e7c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e86:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <main+0x144>)
 8000e88:	9402      	str	r4, [sp, #8]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e98:	9302      	str	r3, [sp, #8]
 8000e9a:	9b02      	ldr	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e9c:	2701      	movs	r7, #1
 8000e9e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ea2:	e9cd 7308 	strd	r7, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	f04f 0802 	mov.w	r8, #2
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	e9cd 830e 	strd	r8, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000eb8:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ebe:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec0:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec4:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f7ff fd17 	bl	80008f8 <HAL_RCC_OscConfig>
 8000eca:	4606      	mov	r6, r0
 8000ecc:	b118      	cbz	r0, 8000ed6 <main+0x72>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff fb0e 	bl	80004f0 <BSP_LED_Off>
  while(1)
 8000ed4:	e7fe      	b.n	8000ed4 <main+0x70>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ed6:	f7ff fcd5 	bl	8000884 <HAL_PWREx_EnableOverDrive>
 8000eda:	4604      	mov	r4, r0
 8000edc:	b118      	cbz	r0, 8000ee6 <main+0x82>
  BSP_LED_Off(LED1);
 8000ede:	4630      	mov	r0, r6
 8000ee0:	f7ff fb06 	bl	80004f0 <BSP_LED_Off>
  while(1)
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x80>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000ee6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee8:	e9cd 3803 	strd	r3, r8, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000eee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef6:	2105      	movs	r1, #5
 8000ef8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000efe:	f7ff fed9 	bl	8000cb4 <HAL_RCC_ClockConfig>
 8000f02:	4606      	mov	r6, r0
 8000f04:	b118      	cbz	r0, 8000f0e <main+0xaa>
  BSP_LED_Off(LED1);
 8000f06:	4620      	mov	r0, r4
 8000f08:	f7ff faf2 	bl	80004f0 <BSP_LED_Off>
  while(1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0xa8>
  __HAL_RCC_GPIOF_CLK_ENABLE(); //PF 활성화
 8000f0e:	9003      	str	r0, [sp, #12]
 8000f10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Mode	= GPIO_MODE_INPUT;
 8000f12:	4c26      	ldr	r4, [pc, #152]	; (8000fac <main+0x148>)
  __HAL_RCC_GPIOF_CLK_ENABLE(); //PF 활성화
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	632b      	str	r3, [r5, #48]	; 0x30
 8000f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000f1c:	f003 0320 	and.w	r3, r3, #32
 8000f20:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull	= GPIO_PULLUP; //pullup모드로 하면 스위치가 계속 눌려있는 상태라고 볼 수 있음.
 8000f22:	e9c4 0701 	strd	r0, r7, [r4, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f26:	4621      	mov	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE(); //PF 활성화
 8000f28:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2a:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <main+0x14c>)
  GPIO_InitStruct.Pin	= GPIO_PIN_14;
 8000f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin	= GPIO_PIN_14;
 8000f34:	6023      	str	r3, [r4, #0]
  GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3a:	f7ff fbb1 	bl	80006a0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOE_CLK_ENABLE(); //PE 활성화
 8000f3e:	9608      	str	r6, [sp, #32]
 8000f40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pin	= a|b|c|d|e|f|g;
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <main+0x150>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <main+0x154>)
  GPIO_InitStruct.Pin	= a|b|c|d|e|f|g;
 8000f46:	8851      	ldrh	r1, [r2, #2]
  __HAL_RCC_GPIOE_CLK_ENABLE(); //PE 활성화
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	632b      	str	r3, [r5, #48]	; 0x30
 8000f4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Speed	= GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	f8c4 800c 	str.w	r8, [r4, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE(); //PE 활성화
 8000f54:	f003 0310 	and.w	r3, r3, #16
 8000f58:	9308      	str	r3, [sp, #32]
 8000f5a:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin	= a|b|c|d|e|f|g;
 8000f5c:	8813      	ldrh	r3, [r2, #0]
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == 0){
 8000f5e:	4d14      	ldr	r5, [pc, #80]	; (8000fb0 <main+0x14c>)
  GPIO_InitStruct.Pin	= a|b|c|d|e|f|g;
 8000f60:	430b      	orrs	r3, r1
 8000f62:	8891      	ldrh	r1, [r2, #4]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	88d1      	ldrh	r1, [r2, #6]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	8911      	ldrh	r1, [r2, #8]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	8951      	ldrh	r1, [r2, #10]
 8000f70:	8992      	ldrh	r2, [r2, #12]
 8000f72:	430b      	orrs	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b29b      	uxth	r3, r3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f78:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull	= GPIO_PULLUP; //pullup모드로 하면 스위치가 계속 눌려있는 상태라고 볼 수 있음.
 8000f7a:	e9c4 7701 	strd	r7, r7, [r4, #4]
  GPIO_InitStruct.Pin	= a|b|c|d|e|f|g;
 8000f7e:	6023      	str	r3, [r4, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f7ff fb8e 	bl	80006a0 <HAL_GPIO_Init>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f84:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <main+0x158>)
	  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == 0){
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff fc6e 	bl	800086c <HAL_GPIO_ReadPin>
 8000f90:	b910      	cbnz	r0, 8000f98 <main+0x134>
		  		  number0();
 8000f92:	f7ff ff55 	bl	8000e40 <number0>
 8000f96:	e7f6      	b.n	8000f86 <main+0x122>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fc6b 	bl	8000878 <HAL_GPIO_WritePin>
 8000fa2:	e7f0      	b.n	8000f86 <main+0x122>
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	2000004c 	.word	0x2000004c
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	2000001c 	.word	0x2000001c
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000fc0:	4770      	bx	lr

08000fc2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler>

08000fc4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler>

08000fc6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler>

08000fc8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler>

08000fca <SVC_Handler>:
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000fd0:	f7ff bafc 	b.w	80005cc <HAL_IncTick>

08000fd4 <__libc_init_array>:
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	4d0d      	ldr	r5, [pc, #52]	; (800100c <__libc_init_array+0x38>)
 8000fd8:	4c0d      	ldr	r4, [pc, #52]	; (8001010 <__libc_init_array+0x3c>)
 8000fda:	1b64      	subs	r4, r4, r5
 8000fdc:	10a4      	asrs	r4, r4, #2
 8000fde:	2600      	movs	r6, #0
 8000fe0:	42a6      	cmp	r6, r4
 8000fe2:	d109      	bne.n	8000ff8 <__libc_init_array+0x24>
 8000fe4:	4d0b      	ldr	r5, [pc, #44]	; (8001014 <__libc_init_array+0x40>)
 8000fe6:	4c0c      	ldr	r4, [pc, #48]	; (8001018 <__libc_init_array+0x44>)
 8000fe8:	f000 f818 	bl	800101c <_init>
 8000fec:	1b64      	subs	r4, r4, r5
 8000fee:	10a4      	asrs	r4, r4, #2
 8000ff0:	2600      	movs	r6, #0
 8000ff2:	42a6      	cmp	r6, r4
 8000ff4:	d105      	bne.n	8001002 <__libc_init_array+0x2e>
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
 8000ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffc:	4798      	blx	r3
 8000ffe:	3601      	adds	r6, #1
 8001000:	e7ee      	b.n	8000fe0 <__libc_init_array+0xc>
 8001002:	f855 3b04 	ldr.w	r3, [r5], #4
 8001006:	4798      	blx	r3
 8001008:	3601      	adds	r6, #1
 800100a:	e7f2      	b.n	8000ff2 <__libc_init_array+0x1e>
 800100c:	08001060 	.word	0x08001060
 8001010:	08001060 	.word	0x08001060
 8001014:	08001060 	.word	0x08001060
 8001018:	08001064 	.word	0x08001064

0800101c <_init>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

08001028 <_fini>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	bf00      	nop
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr
