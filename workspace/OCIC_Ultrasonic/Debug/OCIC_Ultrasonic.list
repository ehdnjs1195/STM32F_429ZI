
OCIC_Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cdc  08006cdc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce4  08006ce4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000170  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011991  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225f  00000000  00000000  00031a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  00034c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a0c  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124cd  00000000  00000000  0005a584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddaba  00000000  00000000  0006ca51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a50b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e50  00000000  00000000  0014a55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006b9c 	.word	0x08006b9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08006b9c 	.word	0x08006b9c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <I2C_Scan+0xc0>)
 8000d88:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d96:	6020      	str	r0, [r4, #0]
 8000d98:	3404      	adds	r4, #4
 8000d9a:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fa25 	bl	80001f0 <strlen>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	4824      	ldr	r0, [pc, #144]	; (8000e44 <I2C_Scan+0xc4>)
 8000db4:	f004 f9ad 	bl	8005112 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000dbe:	e02f      	b.n	8000e20 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000dc0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	230a      	movs	r3, #10
 8000dca:	2201      	movs	r2, #1
 8000dcc:	481e      	ldr	r0, [pc, #120]	; (8000e48 <I2C_Scan+0xc8>)
 8000dce:	f001 fd4d 	bl	800286c <HAL_I2C_IsDeviceReady>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8000dd8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d113      	bne.n	8000e08 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000de0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000de4:	1d38      	adds	r0, r7, #4
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <I2C_Scan+0xcc>)
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	f004 fd51 	bl	8005890 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9fd 	bl	80001f0 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	1d39      	adds	r1, r7, #4
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4810      	ldr	r0, [pc, #64]	; (8000e44 <I2C_Scan+0xc4>)
 8000e02:	f004 f986 	bl	8005112 <HAL_UART_Transmit>
 8000e06:	e006      	b.n	8000e16 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4910      	ldr	r1, [pc, #64]	; (8000e50 <I2C_Scan+0xd0>)
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <I2C_Scan+0xc4>)
 8000e12:	f004 f97e 	bl	8005112 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000e16:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000e20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e24:	2b7f      	cmp	r3, #127	; 0x7f
 8000e26:	d9cb      	bls.n	8000dc0 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4909      	ldr	r1, [pc, #36]	; (8000e54 <I2C_Scan+0xd4>)
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <I2C_Scan+0xc4>)
 8000e32:	f004 f96e 	bl	8005112 <HAL_UART_Transmit>
}
 8000e36:	bf00      	nop
 8000e38:	3760      	adds	r7, #96	; 0x60
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08006bc4 	.word	0x08006bc4
 8000e44:	200000a4 	.word	0x200000a4
 8000e48:	200000e8 	.word	0x200000e8
 8000e4c:	08006bb4 	.word	0x08006bb4
 8000e50:	08006bbc 	.word	0x08006bbc
 8000e54:	08006bc0 	.word	0x08006bc0

08000e58 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	460b      	mov	r3, r1
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	4613      	mov	r3, r2
 8000e68:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	2201      	movs	r2, #1
 8000e74:	4822      	ldr	r0, [pc, #136]	; (8000f00 <LCD_SendInternal+0xa8>)
 8000e76:	f001 fcf9 	bl	800286c <HAL_I2C_IsDeviceReady>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d000      	beq.n	8000e86 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000e84:	e7f1      	b.n	8000e6a <LCD_SendInternal+0x12>
            break;
 8000e86:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 8000e96:	7bba      	ldrb	r2, [r7, #14]
 8000e98:	797b      	ldrb	r3, [r7, #5]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f043 030c 	orr.w	r3, r3, #12
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 8000eb6:	7b7a      	ldrb	r2, [r7, #13]
 8000eb8:	797b      	ldrb	r3, [r7, #5]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f043 030c 	orr.w	r3, r3, #12
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 8000ec6:	7b7a      	ldrb	r2, [r7, #13]
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f107 0208 	add.w	r2, r7, #8
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	4806      	ldr	r0, [pc, #24]	; (8000f00 <LCD_SendInternal+0xa8>)
 8000ee8:	f001 fbc2 	bl	8002670 <HAL_I2C_Master_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	f000 ff7d 	bl	8001df0 <HAL_Delay>
    return res;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000e8 	.word	0x200000e8

08000f04 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000f14:	79b9      	ldrb	r1, [r7, #6]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff9c 	bl	8000e58 <LCD_SendInternal>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000f38:	79b9      	ldrb	r1, [r7, #6]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff8a 	bl	8000e58 <LCD_SendInternal>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2130      	movs	r1, #48	; 0x30
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ffd2 	bl	8000f04 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2102      	movs	r1, #2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffcd 	bl	8000f04 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffc8 	bl	8000f04 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2101      	movs	r1, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffc3 	bl	8000f04 <LCD_SendCommand>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	6039      	str	r1, [r7, #0]
 8000f90:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 8000f92:	e009      	b.n	8000fa8 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffc3 	bl	8000f28 <LCD_SendData>
        str++;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f1      	bne.n	8000f94 <LCD_SendString+0xe>
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <init>:

void init() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    I2C_Scan();
 8000fc0:	f7ff fede 	bl	8000d80 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 8000fc4:	204e      	movs	r0, #78	; 0x4e
 8000fc6:	f7ff ffc1 	bl	8000f4c <LCD_Init>

    // set address to 0x00 첫번째줄 0번부터 글을 쓴다
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	204e      	movs	r0, #78	; 0x4e
 8000fce:	f7ff ff99 	bl	8000f04 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, " Fxxxing 1602 LCD");
 8000fd2:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <init+0x34>)
 8000fd4:	204e      	movs	r0, #78	; 0x4e
 8000fd6:	f7ff ffd6 	bl	8000f86 <LCD_SendString>

    // set address to 0x40 두번째줄 0번째부터 글을 쓴다.
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000fda:	21c0      	movs	r1, #192	; 0xc0
 8000fdc:	204e      	movs	r0, #78	; 0x4e
 8000fde:	f7ff ff91 	bl	8000f04 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000fe2:	4904      	ldr	r1, [pc, #16]	; (8000ff4 <init+0x38>)
 8000fe4:	204e      	movs	r0, #78	; 0x4e
 8000fe6:	f7ff ffce 	bl	8000f86 <LCD_SendString>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08006bdc 	.word	0x08006bdc
 8000ff4:	08006bf0 	.word	0x08006bf0

08000ff8 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <__io_putchar+0x20>)
 800100a:	f004 f882 	bl	8005112 <HAL_UART_Transmit>

  return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000a4 	.word	0x200000a4

0800101c <delay>:
static void MX_TIM4_Init(void);
static void MX_I2C1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <delay+0x30>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 800102e:	bf00      	nop
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <delay+0x30>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3f9      	bcc.n	8001030 <delay+0x14>
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000013c 	.word	0x2000013c

08001050 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	2b01      	cmp	r3, #1
 800105e:	f040 808c 	bne.w	800117a <HAL_TIM_IC_CaptureCallback+0x12a>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d11a      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800106a:	2100      	movs	r1, #0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f003 facd 	bl	800460c <HAL_TIM_ReadCapturedValue>
 8001072:	4603      	mov	r3, r0
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001076:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x140>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020a 	bic.w	r2, r2, #10
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0202 	orr.w	r2, r2, #2
 800109c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 800109e:	e06c      	b.n	800117a <HAL_TIM_IC_CaptureCallback+0x12a>
		else if (Is_First_Captured==1)   // if the first is already captured
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x140>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d168      	bne.n	800117a <HAL_TIM_IC_CaptureCallback+0x12a>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80010a8:	2100      	movs	r1, #0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f003 faae 	bl	800460c <HAL_TIM_ReadCapturedValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010b4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d907      	bls.n	80010da <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a31      	ldr	r2, [pc, #196]	; (800119c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e00f      	b.n	80010fa <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d909      	bls.n	80010fa <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x148>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x144>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010f4:	33ff      	adds	r3, #255	; 0xff
 80010f6:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010f8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2 - 1;
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa10 	bl	8000524 <__aeabi_ui2d>
 8001104:	a320      	add	r3, pc, #128	; (adr r3, 8001188 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa85 	bl	8000618 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	f7ff fba5 	bl	800086c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001130:	f7ff f8ba 	bl	80002a8 <__aeabi_dsub>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fc7e 	bl	8000a3c <__aeabi_d2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001146:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x140>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 020a 	bic.w	r2, r2, #10
 800115c:	621a      	str	r2, [r3, #32]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6a12      	ldr	r2, [r2, #32]
 8001168:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0202 	bic.w	r2, r2, #2
 8001178:	60da      	str	r2, [r3, #12]
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	b020c49c 	.word	0xb020c49c
 800118c:	3fa16872 	.word	0x3fa16872
 8001190:	200001d8 	.word	0x200001d8
 8001194:	200001cc 	.word	0x200001cc
 8001198:	200001d0 	.word	0x200001d0
 800119c:	200001d4 	.word	0x200001d4
 80011a0:	3ff00000 	.word	0x3ff00000
 80011a4:	200001d9 	.word	0x200001d9
 80011a8:	2000013c 	.word	0x2000013c

080011ac <HCSR04_Read>:

void HCSR04_Read (void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80011b0:	2201      	movs	r2, #1
 80011b2:	2120      	movs	r1, #32
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <HCSR04_Read+0x34>)
 80011b6:	f001 f8fd 	bl	80023b4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80011ba:	200a      	movs	r0, #10
 80011bc:	f7ff ff2e 	bl	800101c <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <HCSR04_Read+0x34>)
 80011c6:	f001 f8f5 	bl	80023b4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HCSR04_Read+0x38>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HCSR04_Read+0x38>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0202 	orr.w	r2, r2, #2
 80011d8:	60da      	str	r2, [r3, #12]
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020000 	.word	0x40020000
 80011e4:	2000013c 	.word	0x2000013c

080011e8 <distanceToScale>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
_NOTE distanceToScale(uint8_t Distance){
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	if(Distance==3){
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d105      	bne.n	8001204 <distanceToScale+0x1c>
		code = 'C';
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <distanceToScale+0xb0>)
 80011fa:	2243      	movs	r2, #67	; 0x43
 80011fc:	701a      	strb	r2, [r3, #0]
		return C;
 80011fe:	f44f 736f 	mov.w	r3, #956	; 0x3bc
 8001202:	e042      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==4){
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d105      	bne.n	8001216 <distanceToScale+0x2e>
		code = 'D';
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <distanceToScale+0xb0>)
 800120c:	2244      	movs	r2, #68	; 0x44
 800120e:	701a      	strb	r2, [r3, #0]
		return D;
 8001210:	f44f 7355 	mov.w	r3, #852	; 0x354
 8001214:	e039      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==5){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b05      	cmp	r3, #5
 800121a:	d105      	bne.n	8001228 <distanceToScale+0x40>
		code = 'E';
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <distanceToScale+0xb0>)
 800121e:	2245      	movs	r2, #69	; 0x45
 8001220:	701a      	strb	r2, [r3, #0]
		return E;
 8001222:	f240 23f6 	movw	r3, #758	; 0x2f6
 8001226:	e030      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==6){
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b06      	cmp	r3, #6
 800122c:	d105      	bne.n	800123a <distanceToScale+0x52>
		code = 'F';
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <distanceToScale+0xb0>)
 8001230:	2246      	movs	r2, #70	; 0x46
 8001232:	701a      	strb	r2, [r3, #0]
		return F;
 8001234:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 8001238:	e027      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==7){
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b07      	cmp	r3, #7
 800123e:	d105      	bne.n	800124c <distanceToScale+0x64>
		code = 'G';
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <distanceToScale+0xb0>)
 8001242:	2247      	movs	r2, #71	; 0x47
 8001244:	701a      	strb	r2, [r3, #0]
		return G;
 8001246:	f240 237e 	movw	r3, #638	; 0x27e
 800124a:	e01e      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==8){
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d105      	bne.n	800125e <distanceToScale+0x76>
		code = 'A';
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <distanceToScale+0xb0>)
 8001254:	2241      	movs	r2, #65	; 0x41
 8001256:	701a      	strb	r2, [r3, #0]
		return A;
 8001258:	f44f 730e 	mov.w	r3, #568	; 0x238
 800125c:	e015      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==9){
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d105      	bne.n	8001270 <distanceToScale+0x88>
		code = 'B';
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <distanceToScale+0xb0>)
 8001266:	2242      	movs	r2, #66	; 0x42
 8001268:	701a      	strb	r2, [r3, #0]
		return B;
 800126a:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 800126e:	e00c      	b.n	800128a <distanceToScale+0xa2>
	}else if(Distance==10){
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d105      	bne.n	8001282 <distanceToScale+0x9a>
		code = 'C';
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <distanceToScale+0xb0>)
 8001278:	2243      	movs	r2, #67	; 0x43
 800127a:	701a      	strb	r2, [r3, #0]
		return C6;
 800127c:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8001280:	e003      	b.n	800128a <distanceToScale+0xa2>
	}else{
		code = ' ';
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <distanceToScale+0xb0>)
 8001284:	2220      	movs	r2, #32
 8001286:	701a      	strb	r2, [r3, #0]
		return N;
 8001288:	2300      	movs	r3, #0
	}

}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001dc 	.word	0x200001dc

0800129c <piano>:

void piano(_NOTE scale){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012a6:	2108      	movs	r1, #8
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <piano+0x30>)
 80012aa:	f002 fbc7 	bl	8003a3c <HAL_TIM_PWM_Start>
	TIM4->PSC = scale;
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <piano+0x34>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6293      	str	r3, [r2, #40]	; 0x28
	HAL_Delay(300);
 80012b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012b8:	f000 fd9a 	bl	8001df0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80012bc:	2108      	movs	r1, #8
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <piano+0x30>)
 80012c0:	f002 fc84 	bl	8003bcc <HAL_TIM_PWM_Stop>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000184 	.word	0x20000184
 80012d0:	40000800 	.word	0x40000800

080012d4 <slideLine>:

char complete[] = "HOMEWORK COMPLETE!   ";
//문자를 밀어주는 함수
void slideLine(char line[])
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	int i;
	char start = line[0];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	72fb      	strb	r3, [r7, #11]
	for(i = 0; i < 21; i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e014      	b.n	8001312 <slideLine+0x3e>
	{
		if(i == 20)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b14      	cmp	r3, #20
 80012ec:	d105      	bne.n	80012fa <slideLine+0x26>
		{
			line[i] = start;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	7afa      	ldrb	r2, [r7, #11]
 80012f6:	701a      	strb	r2, [r3, #0]
			break;
 80012f8:	e00f      	b.n	800131a <slideLine+0x46>
		}
		line[i] = line[i + 1];
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	441a      	add	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 21; i++)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b14      	cmp	r3, #20
 8001316:	dde7      	ble.n	80012e8 <slideLine+0x14>
	}
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fced 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f861 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 fa07 	bl	8001748 <MX_GPIO_Init>
  MX_TIM3_Init();
 800133a:	f000 f913 	bl	8001564 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800133e:	f000 f9d9 	bl	80016f4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001342:	f000 f97f 	bl	8001644 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001346:	f000 f8cd 	bl	80014e4 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800134a:	f000 f8bf 	bl	80014cc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800134e:	2100      	movs	r1, #0
 8001350:	4821      	ldr	r0, [pc, #132]	; (80013d8 <main+0xb0>)
 8001352:	f002 fd05 	bl	8003d60 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001356:	2108      	movs	r1, #8
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <main+0xb4>)
 800135a:	f002 fb6f 	bl	8003a3c <HAL_TIM_PWM_Start>
  LCD_Init(LCD_ADDR);
 800135e:	204e      	movs	r0, #78	; 0x4e
 8001360:	f7ff fdf4 	bl	8000f4c <LCD_Init>
  init();
 8001364:	f7ff fe2a 	bl	8000fbc <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8001368:	f7ff ff20 	bl	80011ac <HCSR04_Read>
	  note = distanceToScale(Distance);
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <main+0xb8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff39 	bl	80011e8 <distanceToScale>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <main+0xbc>)
 800137c:	801a      	strh	r2, [r3, #0]
	  piano(note);
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <main+0xbc>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff8a 	bl	800129c <piano>
	  printf("%d cm, Piano: %c\r\n",Distance, code);
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <main+0xb8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <main+0xc0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <main+0xc4>)
 8001396:	f004 fa63 	bl	8005860 <iprintf>
	  sprintf(String, "%03d cm, Piano: %c\r\n",Distance, code);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <main+0xb8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <main+0xc0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4638      	mov	r0, r7
 80013a6:	4912      	ldr	r1, [pc, #72]	; (80013f0 <main+0xc8>)
 80013a8:	f004 faa6 	bl	80058f8 <siprintf>
	  LCD_SendCommand(LCD_ADDR, 0b10000000); //0x00
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	204e      	movs	r0, #78	; 0x4e
 80013b0:	f7ff fda8 	bl	8000f04 <LCD_SendCommand>
	  LCD_SendString((0x27 << 1), String);
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	204e      	movs	r0, #78	; 0x4e
 80013ba:	f7ff fde4 	bl	8000f86 <LCD_SendString>
	  slideLine(complete);
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <main+0xcc>)
 80013c0:	f7ff ff88 	bl	80012d4 <slideLine>
	  LCD_SendCommand((0x27 << 1), 0b11000000); //0x00
 80013c4:	21c0      	movs	r1, #192	; 0xc0
 80013c6:	204e      	movs	r0, #78	; 0x4e
 80013c8:	f7ff fd9c 	bl	8000f04 <LCD_SendCommand>
	  LCD_SendString((0x27 << 1), complete);
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <main+0xcc>)
 80013ce:	204e      	movs	r0, #78	; 0x4e
 80013d0:	f7ff fdd9 	bl	8000f86 <LCD_SendString>
  {
 80013d4:	e7c8      	b.n	8001368 <main+0x40>
 80013d6:	bf00      	nop
 80013d8:	2000013c 	.word	0x2000013c
 80013dc:	20000184 	.word	0x20000184
 80013e0:	200001d9 	.word	0x200001d9
 80013e4:	200001da 	.word	0x200001da
 80013e8:	200001dc 	.word	0x200001dc
 80013ec:	08006c00 	.word	0x08006c00
 80013f0:	08006c14 	.word	0x08006c14
 80013f4:	20000000 	.word	0x20000000

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f004 fa22 	bl	8005850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <SystemClock_Config+0xcc>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <SystemClock_Config+0xd0>)
 8001442:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001458:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800146c:	23a8      	movs	r3, #168	; 0xa8
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fda7 	bl	8002fd0 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001488:	f000 f9ca 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001498:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2105      	movs	r1, #5
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 f808 	bl	80034c0 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014b6:	f000 f9b3 	bl	8001820 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3750      	adds	r7, #80	; 0x50
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40007000 	.word	0x40007000

080014cc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	201d      	movs	r0, #29
 80014d6:	f000 fd8a 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014da:	201d      	movs	r0, #29
 80014dc:	f000 fda3 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_I2C1_Init+0x74>)
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <MX_I2C1_Init+0x78>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_I2C1_Init+0x74>)
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <MX_I2C1_Init+0x7c>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_I2C1_Init+0x74>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_I2C1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_I2C1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_I2C1_Init+0x74>)
 8001522:	f000 ff61 	bl	80023e8 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f978 	bl	8001820 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <MX_I2C1_Init+0x74>)
 8001534:	f001 fcd1 	bl	8002eda <HAL_I2CEx_ConfigAnalogFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800153e:	f000 f96f 	bl	8001820 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_I2C1_Init+0x74>)
 8001546:	f001 fd04 	bl	8002f52 <HAL_I2CEx_ConfigDigitalFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001550:	f000 f966 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200000e8 	.word	0x200000e8
 800155c:	40005400 	.word	0x40005400
 8001560:	000186a0 	.word	0x000186a0

08001564 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_TIM3_Init+0xd8>)
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <MX_TIM3_Init+0xdc>)
 8001592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_TIM3_Init+0xd8>)
 8001596:	2253      	movs	r2, #83	; 0x53
 8001598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_TIM3_Init+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <MX_TIM3_Init+0xd8>)
 80015a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <MX_TIM3_Init+0xd8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <MX_TIM3_Init+0xd8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b4:	4821      	ldr	r0, [pc, #132]	; (800163c <MX_TIM3_Init+0xd8>)
 80015b6:	f002 f9a3 	bl	8003900 <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80015c0:	f000 f92e 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4619      	mov	r1, r3
 80015d0:	481a      	ldr	r0, [pc, #104]	; (800163c <MX_TIM3_Init+0xd8>)
 80015d2:	f002 ff53 	bl	800447c <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015dc:	f000 f920 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80015e0:	4816      	ldr	r0, [pc, #88]	; (800163c <MX_TIM3_Init+0xd8>)
 80015e2:	f002 fb63 	bl	8003cac <HAL_TIM_IC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015ec:	f000 f918 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4619      	mov	r1, r3
 80015fe:	480f      	ldr	r0, [pc, #60]	; (800163c <MX_TIM3_Init+0xd8>)
 8001600:	f003 fcaa 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800160a:	f000 f909 	bl	8001820 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001612:	2301      	movs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM3_Init+0xd8>)
 8001626:	f002 fdcb 	bl	80041c0 <HAL_TIM_IC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001630:	f000 f8f6 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000013c 	.word	0x2000013c
 8001640:	40000400 	.word	0x40000400

08001644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_TIM4_Init+0xa8>)
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <MX_TIM4_Init+0xac>)
 800166a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_TIM4_Init+0xa8>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM4_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_TIM4_Init+0xa8>)
 800167a:	22a7      	movs	r2, #167	; 0xa7
 800167c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM4_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_TIM4_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM4_Init+0xa8>)
 800168c:	f002 f987 	bl	800399e <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001696:	f000 f8c3 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4619      	mov	r1, r3
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_TIM4_Init+0xa8>)
 80016aa:	f003 fc55 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80016b4:	f000 f8b4 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b8:	2360      	movs	r3, #96	; 0x60
 80016ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 80016bc:	2353      	movs	r3, #83	; 0x53
 80016be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2208      	movs	r2, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM4_Init+0xa8>)
 80016d0:	f002 fe12 	bl	80042f8 <HAL_TIM_PWM_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016da:	f000 f8a1 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM4_Init+0xa8>)
 80016e0:	f000 f97e 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	; 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000184 	.word	0x20000184
 80016f0:	40000800 	.word	0x40000800

080016f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART3_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800172c:	f003 fca4 	bl	8005078 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 f873 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000a4 	.word	0x200000a4
 8001744:	40004800 	.word	0x40004800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2c      	ldr	r2, [pc, #176]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <MX_GPIO_Init+0xd0>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_GPIO_Init+0xd0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <MX_GPIO_Init+0xd0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <MX_GPIO_Init+0xd4>)
 80017f0:	f000 fde0 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f4:	2320      	movs	r3, #32
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_GPIO_Init+0xd4>)
 800180c:	f000 fc26 	bl	800205c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_I2C_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <HAL_I2C_MspInit+0x8c>)
 80018d8:	f000 fbc0 	bl	800205c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <HAL_TIM_Base_MspInit+0x84>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12b      	bne.n	8001986 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_TIM_Base_MspInit+0x88>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_TIM_Base_MspInit+0x8c>)
 8001982:	f000 fb6b 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40000400 	.word	0x40000400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000

0800199c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10d      	bne.n	80019ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_TIM_PWM_MspInit+0x40>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_TIM_PWM_MspInit+0x40>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_TIM_PWM_MspInit+0x40>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_TIM_MspPostInit+0x68>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_TIM_MspPostInit+0x70>)
 8001a3c:	f000 fb0e 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020c00 	.word	0x40020c00

08001a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_UART_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12c      	bne.n	8001ad0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_UART_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_MspInit+0x8c>)
 8001acc:	f000 fac6 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40004800 	.word	0x40004800
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f93e 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM3_IRQHandler+0x10>)
 8001b3e:	f002 fa37 	bl	8003fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000013c 	.word	0x2000013c

08001b4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
  }

  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa29 	bl	8000ff8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
  }
  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f003 fdd0 	bl	80057fc <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20030000 	.word	0x20030000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200001e0 	.word	0x200001e0
 8001c90:	200001f8 	.word	0x200001f8

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd7 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f003 fd8f 	bl	8005808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fb1d 	bl	8001328 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cf0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001cfc:	08006cec 	.word	0x08006cec
  ldr r2, =_sbss
 8001d00:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d04:	200001f8 	.word	0x200001f8

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f94f 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd74 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f967 	bl	8002042 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f92f 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000018 	.word	0x20000018
 8001da8:	20000020 	.word	0x20000020
 8001dac:	2000001c 	.word	0x2000001c

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000020 	.word	0x20000020
 8001dd4:	200001e4 	.word	0x200001e4

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200001e4 	.word	0x200001e4

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000020 	.word	0x20000020

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e177      	b.n	8002368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8166 	bne.w	8002362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d130      	bne.n	8002110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80c0 	beq.w	8002362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b66      	ldr	r3, [pc, #408]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a65      	ldr	r2, [pc, #404]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_GPIO_Init+0x324>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <HAL_GPIO_Init+0x328>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_GPIO_Init+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d037      	beq.n	800229a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_GPIO_Init+0x330>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x334>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_GPIO_Init+0x338>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x33c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a53      	ldr	r2, [pc, #332]	; (800239c <HAL_GPIO_Init+0x340>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x22a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x344>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x348>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x34c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x350>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x21a>
 8002272:	2309      	movs	r3, #9
 8002274:	e012      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002276:	230a      	movs	r3, #10
 8002278:	e010      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227a:	2308      	movs	r3, #8
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x240>
 800227e:	2307      	movs	r3, #7
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x240>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x240>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x240>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x328>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <HAL_GPIO_Init+0x354>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae84 	bls.w	8002078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022400 	.word	0x40022400
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e12b      	b.n	8002652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fa34 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800244c:	f001 fa30 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a81      	ldr	r2, [pc, #516]	; (800265c <HAL_I2C_Init+0x274>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d807      	bhi.n	800246c <HAL_I2C_Init+0x84>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a80      	ldr	r2, [pc, #512]	; (8002660 <HAL_I2C_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e006      	b.n	800247a <HAL_I2C_Init+0x92>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a7d      	ldr	r2, [pc, #500]	; (8002664 <HAL_I2C_Init+0x27c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e7      	b.n	8002652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a78      	ldr	r2, [pc, #480]	; (8002668 <HAL_I2C_Init+0x280>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9b      	lsrs	r3, r3, #18
 800248c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_I2C_Init+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d802      	bhi.n	80024bc <HAL_I2C_Init+0xd4>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	e009      	b.n	80024d0 <HAL_I2C_Init+0xe8>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a69      	ldr	r2, [pc, #420]	; (800266c <HAL_I2C_Init+0x284>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	495c      	ldr	r1, [pc, #368]	; (800265c <HAL_I2C_Init+0x274>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d819      	bhi.n	8002524 <HAL_I2C_Init+0x13c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e59      	subs	r1, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002504:	400b      	ands	r3, r1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_I2C_Init+0x138>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	e051      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e04f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_I2C_Init+0x168>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_I2C_Init+0x18e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x196>
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_I2C_Init+0x1bc>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6911      	ldr	r1, [r2, #16]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	000186a0 	.word	0x000186a0
 8002660:	001e847f 	.word	0x001e847f
 8002664:	003d08ff 	.word	0x003d08ff
 8002668:	431bde83 	.word	0x431bde83
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	461a      	mov	r2, r3
 800267c:	460b      	mov	r3, r1
 800267e:	817b      	strh	r3, [r7, #10]
 8002680:	4613      	mov	r3, r2
 8002682:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff fba8 	bl	8001dd8 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	f040 80e0 	bne.w	8002858 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2319      	movs	r3, #25
 800269e:	2201      	movs	r2, #1
 80026a0:	4970      	ldr	r1, [pc, #448]	; (8002864 <HAL_I2C_Master_Transmit+0x1f4>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fa92 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0d3      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2C_Master_Transmit+0x50>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0cc      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d007      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2221      	movs	r2, #33	; 0x21
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2210      	movs	r2, #16
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	893a      	ldrh	r2, [r7, #8]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a50      	ldr	r2, [pc, #320]	; (8002868 <HAL_I2C_Master_Transmit+0x1f8>)
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6a3a      	ldr	r2, [r7, #32]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f9ca 	bl	8002ac8 <I2C_MasterRequestWrite>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e08d      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002754:	e066      	b.n	8002824 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb0c 	bl	8002d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b04      	cmp	r3, #4
 800276c:	d107      	bne.n	800277e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06b      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d11b      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x188>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6a39      	ldr	r1, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fafc 	bl	8002dfa <I2C_WaitOnBTFFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e01a      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d194      	bne.n	8002756 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000

0800286c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	460b      	mov	r3, r1
 800287a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff faac 	bl	8001dd8 <HAL_GetTick>
 8002880:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b20      	cmp	r3, #32
 8002890:	f040 8111 	bne.w	8002ab6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2319      	movs	r3, #25
 800289a:	2201      	movs	r2, #1
 800289c:	4988      	ldr	r1, [pc, #544]	; (8002ac0 <HAL_I2C_IsDeviceReady+0x254>)
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f994 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
 80028ac:	e104      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_I2C_IsDeviceReady+0x50>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e0fd      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d007      	beq.n	80028e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2224      	movs	r2, #36	; 0x24
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a70      	ldr	r2, [pc, #448]	; (8002ac4 <HAL_I2C_IsDeviceReady+0x258>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002914:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f952 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293c:	d103      	bne.n	8002946 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0b6      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800294a:	897b      	ldrh	r3, [r7, #10]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002958:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff fa3d 	bl	8001dd8 <HAL_GetTick>
 800295e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800298e:	e025      	b.n	80029dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7ff fa22 	bl	8001dd8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <HAL_I2C_IsDeviceReady+0x13a>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22a0      	movs	r2, #160	; 0xa0
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2ba0      	cmp	r3, #160	; 0xa0
 80029e6:	d005      	beq.n	80029f4 <HAL_I2C_IsDeviceReady+0x188>
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_I2C_IsDeviceReady+0x188>
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0cd      	beq.n	8002990 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d129      	bne.n	8002a5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2319      	movs	r3, #25
 8002a36:	2201      	movs	r2, #1
 8002a38:	4921      	ldr	r1, [pc, #132]	; (8002ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f8c6 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e036      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e02c      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	490f      	ldr	r1, [pc, #60]	; (8002ac0 <HAL_I2C_IsDeviceReady+0x254>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8a2 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e012      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f4ff af32 	bcc.w	8002906 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00100002 	.word	0x00100002
 8002ac4:	ffff0000 	.word	0xffff0000

08002ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d006      	beq.n	8002af2 <I2C_MasterRequestWrite+0x2a>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d003      	beq.n	8002af2 <I2C_MasterRequestWrite+0x2a>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af0:	d108      	bne.n	8002b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e00b      	b.n	8002b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	d107      	bne.n	8002b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f84f 	bl	8002bcc <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b42:	d103      	bne.n	8002b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e035      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	e01b      	b.n	8002ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b6c:	897b      	ldrh	r3, [r7, #10]
 8002b6e:	11db      	asrs	r3, r3, #7
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f063 030f 	orn	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <I2C_MasterRequestWrite+0xfc>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f875 	bl	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e010      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <I2C_MasterRequestWrite+0x100>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f865 	bl	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00010008 	.word	0x00010008
 8002bc8:	00010002 	.word	0x00010002

08002bcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bdc:	e025      	b.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d021      	beq.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7ff f8f7 	bl	8001dd8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e023      	b.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10d      	bne.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	e00c      	b.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0b6      	beq.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c88:	e051      	b.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d123      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e046      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d021      	beq.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7ff f875 	bl	8001dd8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d116      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0220 	orr.w	r2, r3, #32
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10c      	bne.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e00b      	b.n	8002d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d18d      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d84:	e02d      	b.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f878 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02d      	b.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d021      	beq.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7ff f81b 	bl	8001dd8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d116      	bne.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e007      	b.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d1ca      	bne.n	8002d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e06:	e02d      	b.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f837 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e02d      	b.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d021      	beq.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe ffda 	bl	8001dd8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d1ca      	bne.n	8002e08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d11b      	bne.n	8002ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d129      	bne.n	8002f44 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0210 	bic.w	r2, r2, #16
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d12a      	bne.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	f023 030f 	bic.w	r3, r3, #15
 8002f92:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	89fa      	ldrh	r2, [r7, #14]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
  }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e267      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d075      	beq.n	80030da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fee:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4b85      	ldr	r3, [pc, #532]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	2b08      	cmp	r3, #8
 8003004:	d112      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b82      	ldr	r3, [pc, #520]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b7e      	ldr	r3, [pc, #504]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05b      	beq.n	80030d8 <HAL_RCC_OscConfig+0x108>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d157      	bne.n	80030d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e242      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x74>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x98>
 800304e:	4b70      	ldr	r3, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6f      	ldr	r2, [pc, #444]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6c      	ldr	r2, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xb0>
 8003068:	4b69      	ldr	r3, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a68      	ldr	r2, [pc, #416]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b66      	ldr	r3, [pc, #408]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a65      	ldr	r2, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fea6 	bl	8001dd8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7fe fea2 	bl	8001dd8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e207      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b5b      	ldr	r3, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xc0>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fe92 	bl	8001dd8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe fe8e 	bl	8001dd8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1f3      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b51      	ldr	r3, [pc, #324]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0xe8>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e6:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11c      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b44      	ldr	r3, [pc, #272]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1c7      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	e03a      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b34      	ldr	r3, [pc, #208]	; (8003214 <HAL_RCC_OscConfig+0x244>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fe47 	bl	8001dd8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314e:	f7fe fe43 	bl	8001dd8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1a8      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4925      	ldr	r1, [pc, #148]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x244>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fe26 	bl	8001dd8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe fe22 	bl	8001dd8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e187      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d036      	beq.n	8003228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCC_OscConfig+0x248>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe fe06 	bl	8001dd8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fe fe02 	bl	8001dd8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e167      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x240>)
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x200>
 80031ee:	e01b      	b.n	8003228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCC_OscConfig+0x248>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fdef 	bl	8001dd8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	e00e      	b.n	800321c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031fe:	f7fe fdeb 	bl	8001dd8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d907      	bls.n	800321c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e150      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
 8003210:	40023800 	.word	0x40023800
 8003214:	42470000 	.word	0x42470000
 8003218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ea      	bne.n	80031fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8097 	beq.w	8003364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b7a      	ldr	r3, [pc, #488]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b77      	ldr	r3, [pc, #476]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b74      	ldr	r3, [pc, #464]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a73      	ldr	r2, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe fdab 	bl	8001dd8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fe fda7 	bl	8001dd8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e10c      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_OscConfig+0x474>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x2ea>
 80032ac:	4b64      	ldr	r3, [pc, #400]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a63      	ldr	r2, [pc, #396]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e01c      	b.n	80032f4 <HAL_RCC_OscConfig+0x324>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x30c>
 80032c2:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a5e      	ldr	r2, [pc, #376]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	4b5c      	ldr	r3, [pc, #368]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a5b      	ldr	r2, [pc, #364]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0x324>
 80032dc:	4b58      	ldr	r3, [pc, #352]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a57      	ldr	r2, [pc, #348]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a54      	ldr	r2, [pc, #336]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80032ee:	f023 0304 	bic.w	r3, r3, #4
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fd6c 	bl	8001dd8 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003302:	e00a      	b.n	800331a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003304:	f7fe fd68 	bl	8001dd8 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0cb      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ee      	beq.n	8003304 <HAL_RCC_OscConfig+0x334>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fd56 	bl	8001dd8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332e:	e00a      	b.n	8003346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe fd52 	bl	8001dd8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0b5      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ee      	bne.n	8003330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	4a38      	ldr	r2, [pc, #224]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a1 	beq.w	80034b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800336e:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b08      	cmp	r3, #8
 8003378:	d05c      	beq.n	8003434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d141      	bne.n	8003406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fd26 	bl	8001dd8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe fd22 	bl	8001dd8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e087      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	019b      	lsls	r3, r3, #6
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	3b01      	subs	r3, #1
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	491b      	ldr	r1, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe fcfb 	bl	8001dd8 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe fcf7 	bl	8001dd8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e05c      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x416>
 8003404:	e054      	b.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCC_OscConfig+0x478>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fce4 	bl	8001dd8 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fce0 	bl	8001dd8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e045      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_OscConfig+0x470>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x444>
 8003432:	e03d      	b.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e038      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
 8003440:	40023800 	.word	0x40023800
 8003444:	40007000 	.word	0x40007000
 8003448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x4ec>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d028      	beq.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d121      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d11a      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	4293      	cmp	r3, r2
 8003486:	d111      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	3b01      	subs	r3, #1
 8003496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90c      	bls.n	80034fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d044      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d003      	beq.n	800357e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e067      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4934      	ldr	r1, [pc, #208]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7fe fc12 	bl	8001dd8 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe fc0e 	bl	8001dd8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20c      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f821 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fb72 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	08006c2c 	.word	0x08006c2c
 8003684:	20000018 	.word	0x20000018
 8003688:	2000001c 	.word	0x2000001c

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003690:	b094      	sub	sp, #80	; 0x50
 8003692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
 8003698:	2300      	movs	r3, #0
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	2300      	movs	r3, #0
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a4:	4b79      	ldr	r3, [pc, #484]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d00d      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x40>
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	f200 80e1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036be:	e0db      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b73      	ldr	r3, [pc, #460]	; (8003890 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036c4:	e0db      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036c6:	4b73      	ldr	r3, [pc, #460]	; (8003894 <HAL_RCC_GetSysClockFreq+0x208>)
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ca:	e0d8      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036cc:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036d6:	4b6d      	ldr	r3, [pc, #436]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	2200      	movs	r2, #0
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
 80036f6:	2300      	movs	r3, #0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
 80036fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003710:	0150      	lsls	r0, r2, #5
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4621      	mov	r1, r4
 8003718:	1a51      	subs	r1, r2, r1
 800371a:	6139      	str	r1, [r7, #16]
 800371c:	4629      	mov	r1, r5
 800371e:	eb63 0301 	sbc.w	r3, r3, r1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003730:	4659      	mov	r1, fp
 8003732:	018b      	lsls	r3, r1, #6
 8003734:	4651      	mov	r1, sl
 8003736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373a:	4651      	mov	r1, sl
 800373c:	018a      	lsls	r2, r1, #6
 800373e:	4651      	mov	r1, sl
 8003740:	ebb2 0801 	subs.w	r8, r2, r1
 8003744:	4659      	mov	r1, fp
 8003746:	eb63 0901 	sbc.w	r9, r3, r1
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800375e:	4690      	mov	r8, r2
 8003760:	4699      	mov	r9, r3
 8003762:	4623      	mov	r3, r4
 8003764:	eb18 0303 	adds.w	r3, r8, r3
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	462b      	mov	r3, r5
 800376c:	eb49 0303 	adc.w	r3, r9, r3
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800377e:	4629      	mov	r1, r5
 8003780:	024b      	lsls	r3, r1, #9
 8003782:	4621      	mov	r1, r4
 8003784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003788:	4621      	mov	r1, r4
 800378a:	024a      	lsls	r2, r1, #9
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	2200      	movs	r2, #0
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
 8003796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800379c:	f7fd f96e 	bl	8000a7c <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4613      	mov	r3, r2
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	e058      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b38      	ldr	r3, [pc, #224]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	4611      	mov	r1, r2
 80037b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c4:	4642      	mov	r2, r8
 80037c6:	464b      	mov	r3, r9
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4641      	mov	r1, r8
 80037de:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e2:	4649      	mov	r1, r9
 80037e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003800:	eb63 050b 	sbc.w	r5, r3, fp
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	00eb      	lsls	r3, r5, #3
 800380e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003812:	00e2      	lsls	r2, r4, #3
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	4643      	mov	r3, r8
 800381a:	18e3      	adds	r3, r4, r3
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	464b      	mov	r3, r9
 8003820:	eb45 0303 	adc.w	r3, r5, r3
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	61fa      	str	r2, [r7, #28]
 800384c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003850:	f7fd f914 	bl	8000a7c <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x200>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800386c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetSysClockFreq+0x204>)
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003880:	4618      	mov	r0, r3
 8003882:	3750      	adds	r7, #80	; 0x50
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000018 	.word	0x20000018

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08006c3c 	.word	0x08006c3c

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08006c3c 	.word	0x08006c3c

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e041      	b.n	8003996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fff0 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fed0 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e041      	b.n	8003a34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd ffe9 	bl	800199c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f000 fe81 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <HAL_TIM_PWM_Start+0x24>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	bf14      	ite	ne
 8003a58:	2301      	movne	r3, #1
 8003a5a:	2300      	moveq	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e022      	b.n	8003aa6 <HAL_TIM_PWM_Start+0x6a>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d109      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x3e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e015      	b.n	8003aa6 <HAL_TIM_PWM_Start+0x6a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d109      	bne.n	8003a94 <HAL_TIM_PWM_Start+0x58>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e008      	b.n	8003aa6 <HAL_TIM_PWM_Start+0x6a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07c      	b.n	8003ba8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0x82>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	e013      	b.n	8003ae6 <HAL_TIM_PWM_Start+0xaa>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0x92>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003acc:	e00b      	b.n	8003ae6 <HAL_TIM_PWM_Start+0xaa>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Start+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003adc:	e003      	b.n	8003ae6 <HAL_TIM_PWM_Start+0xaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fa0c 	bl	8004f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <HAL_TIM_PWM_Start+0x174>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Start+0xcc>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <HAL_TIM_PWM_Start+0x178>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Start+0xd0>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_TIM_PWM_Start+0xd2>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIM_PWM_Start+0x174>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d01d      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_TIM_PWM_Start+0x17c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <HAL_TIM_PWM_Start+0x180>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_TIM_PWM_Start+0x184>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_TIM_PWM_Start+0x178>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <HAL_TIM_PWM_Start+0x188>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_TIM_PWM_Start+0x136>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <HAL_TIM_PWM_Start+0x18c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d010      	beq.n	8003ba6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	e007      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40001800 	.word	0x40001800

08003bcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f994 	bl	8004f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_TIM_PWM_Stop+0xd8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_PWM_Stop+0x2c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_TIM_PWM_Stop+0xdc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIM_PWM_Stop+0x30>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_TIM_PWM_Stop+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d017      	beq.n	8003c32 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_TIM_PWM_Stop+0x66>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	f240 4344 	movw	r3, #1092	; 0x444
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_PWM_Stop+0x66>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1a      	ldr	r2, [r3, #32]
 8003c38:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_TIM_PWM_Stop+0x96>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	f240 4344 	movw	r3, #1092	; 0x444
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <HAL_TIM_PWM_Stop+0x96>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Stop+0xa6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_PWM_Stop+0xce>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Stop+0xb6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_PWM_Stop+0xce>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Stop+0xc6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_PWM_Stop+0xce>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40010400 	.word	0x40010400

08003cac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f839 	bl	8003d4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f000 fcfa 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_IC_Start_IT+0x1e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_IC_Start_IT+0x46>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_IC_Start_IT+0x2e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_IC_Start_IT+0x46>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_IC_Start_IT+0x3e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_IC_Start_IT+0x46>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_TIM_IC_Start_IT+0x58>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e013      	b.n	8003de0 <HAL_TIM_IC_Start_IT+0x80>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d104      	bne.n	8003dc8 <HAL_TIM_IC_Start_IT+0x68>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e00b      	b.n	8003de0 <HAL_TIM_IC_Start_IT+0x80>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d104      	bne.n	8003dd8 <HAL_TIM_IC_Start_IT+0x78>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e003      	b.n	8003de0 <HAL_TIM_IC_Start_IT+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003de2:	7bbb      	ldrb	r3, [r7, #14]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003de8:	7b7b      	ldrb	r3, [r7, #13]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0cc      	b.n	8003f8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0xa2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e00:	e013      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0xca>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_IC_Start_IT+0xb2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e10:	e00b      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0xca>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_IC_Start_IT+0xc2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e20:	e003      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0xca>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_IC_Start_IT+0xda>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e38:	e013      	b.n	8003e62 <HAL_TIM_IC_Start_IT+0x102>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIM_IC_Start_IT+0xea>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	e00b      	b.n	8003e62 <HAL_TIM_IC_Start_IT+0x102>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start_IT+0xfa>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e58:	e003      	b.n	8003e62 <HAL_TIM_IC_Start_IT+0x102>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b0c      	cmp	r3, #12
 8003e66:	d841      	bhi.n	8003eec <HAL_TIM_IC_Start_IT+0x18c>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_TIM_IC_Start_IT+0x110>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08003eed 	.word	0x08003eed
 8003e78:	08003eed 	.word	0x08003eed
 8003e7c:	08003eed 	.word	0x08003eed
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003eed 	.word	0x08003eed
 8003e8c:	08003eed 	.word	0x08003eed
 8003e90:	08003ec9 	.word	0x08003ec9
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003edb 	.word	0x08003edb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0202 	orr.w	r2, r2, #2
 8003eb2:	60da      	str	r2, [r3, #12]
      break;
 8003eb4:	e01d      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0204 	orr.w	r2, r2, #4
 8003ec4:	60da      	str	r2, [r3, #12]
      break;
 8003ec6:	e014      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	60da      	str	r2, [r3, #12]
      break;
 8003ed8:	e00b      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0210 	orr.w	r2, r2, #16
 8003ee8:	60da      	str	r2, [r3, #12]
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d148      	bne.n	8003f8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 f803 	bl	8004f0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <HAL_TIM_IC_Start_IT+0x234>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d01d      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <HAL_TIM_IC_Start_IT+0x238>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <HAL_TIM_IC_Start_IT+0x23c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <HAL_TIM_IC_Start_IT+0x240>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_TIM_IC_Start_IT+0x244>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_TIM_IC_Start_IT+0x248>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIM_IC_Start_IT+0x1f6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_TIM_IC_Start_IT+0x24c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d111      	bne.n	8003f7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b06      	cmp	r3, #6
 8003f66:	d010      	beq.n	8003f8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	e007      	b.n	8003f8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40001800 	.word	0x40001800

08003fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0202 	mvn.w	r2, #2
 8003fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd f82c 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb54 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fb5b 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b04      	cmp	r3, #4
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0204 	mvn.w	r2, #4
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd f802 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb2a 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb31 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b08      	cmp	r3, #8
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b08      	cmp	r3, #8
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0208 	mvn.w	r2, #8
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2204      	movs	r2, #4
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc ffd8 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb00 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb07 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0210 	mvn.w	r2, #16
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2208      	movs	r2, #8
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc ffae 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fad6 	bl	80046a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fadd 	bl	80046bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0201 	mvn.w	r2, #1
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fab0 	bl	8004694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 ff82 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 faa2 	bl	80046d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b20      	cmp	r3, #32
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0220 	mvn.w	r2, #32
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 ff4c 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_TIM_IC_ConfigChannel+0x1e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e088      	b.n	80042f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f000 fcc2 	bl	8004b84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 020c 	bic.w	r2, r2, #12
 800420e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	619a      	str	r2, [r3, #24]
 8004222:	e060      	b.n	80042e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b04      	cmp	r3, #4
 8004228:	d11c      	bne.n	8004264 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6819      	ldr	r1, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f000 fd46 	bl	8004cca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800424c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6999      	ldr	r1, [r3, #24]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	619a      	str	r2, [r3, #24]
 8004262:	e040      	b.n	80042e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11b      	bne.n	80042a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f000 fd93 	bl	8004da4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 020c 	bic.w	r2, r2, #12
 800428c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	61da      	str	r2, [r3, #28]
 80042a0:	e021      	b.n	80042e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	d11c      	bne.n	80042e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f000 fdb0 	bl	8004e1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	021a      	lsls	r2, r3, #8
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	61da      	str	r2, [r3, #28]
 80042e0:	e001      	b.n	80042e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004312:	2302      	movs	r3, #2
 8004314:	e0ae      	b.n	8004474 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b0c      	cmp	r3, #12
 8004322:	f200 809f 	bhi.w	8004464 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004361 	.word	0x08004361
 8004330:	08004465 	.word	0x08004465
 8004334:	08004465 	.word	0x08004465
 8004338:	08004465 	.word	0x08004465
 800433c:	080043a1 	.word	0x080043a1
 8004340:	08004465 	.word	0x08004465
 8004344:	08004465 	.word	0x08004465
 8004348:	08004465 	.word	0x08004465
 800434c:	080043e3 	.word	0x080043e3
 8004350:	08004465 	.word	0x08004465
 8004354:	08004465 	.word	0x08004465
 8004358:	08004465 	.word	0x08004465
 800435c:	08004423 	.word	0x08004423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fa5c 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0204 	bic.w	r2, r2, #4
 800438a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6999      	ldr	r1, [r3, #24]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	619a      	str	r2, [r3, #24]
      break;
 800439e:	e064      	b.n	800446a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 faac 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6999      	ldr	r1, [r3, #24]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	619a      	str	r2, [r3, #24]
      break;
 80043e0:	e043      	b.n	800446a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb01 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0208 	orr.w	r2, r2, #8
 80043fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0204 	bic.w	r2, r2, #4
 800440c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69d9      	ldr	r1, [r3, #28]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	61da      	str	r2, [r3, #28]
      break;
 8004420:	e023      	b.n	800446a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fb55 	bl	8004ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
      break;
 8004462:	e002      	b.n	800446a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]
      break;
 8004468:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004472:	7dfb      	ldrb	r3, [r7, #23]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIM_ConfigClockSource+0x1c>
 8004494:	2302      	movs	r3, #2
 8004496:	e0b4      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x186>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d0:	d03e      	beq.n	8004550 <HAL_TIM_ConfigClockSource+0xd4>
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d6:	f200 8087 	bhi.w	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	f000 8086 	beq.w	80045ee <HAL_TIM_ConfigClockSource+0x172>
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d87f      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b70      	cmp	r3, #112	; 0x70
 80044ea:	d01a      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xa6>
 80044ec:	2b70      	cmp	r3, #112	; 0x70
 80044ee:	d87b      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b60      	cmp	r3, #96	; 0x60
 80044f2:	d050      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0x11a>
 80044f4:	2b60      	cmp	r3, #96	; 0x60
 80044f6:	d877      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b50      	cmp	r3, #80	; 0x50
 80044fa:	d03c      	beq.n	8004576 <HAL_TIM_ConfigClockSource+0xfa>
 80044fc:	2b50      	cmp	r3, #80	; 0x50
 80044fe:	d873      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d058      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d86f      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b30      	cmp	r3, #48	; 0x30
 800450a:	d064      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d86b      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b20      	cmp	r3, #32
 8004512:	d060      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	2b20      	cmp	r3, #32
 8004516:	d867      	bhi.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d05c      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x15a>
 800451c:	2b10      	cmp	r3, #16
 800451e:	d05a      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004520:	e062      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6899      	ldr	r1, [r3, #8]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f000 fccb 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004544:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	609a      	str	r2, [r3, #8]
      break;
 800454e:	e04f      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6899      	ldr	r1, [r3, #8]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f000 fcb4 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004572:	609a      	str	r2, [r3, #8]
      break;
 8004574:	e03c      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6859      	ldr	r1, [r3, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	461a      	mov	r2, r3
 8004584:	f000 fb72 	bl	8004c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2150      	movs	r1, #80	; 0x50
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fc81 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004594:	e02c      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 fbce 	bl	8004d44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2160      	movs	r1, #96	; 0x60
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fc71 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 80045b4:	e01c      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f000 fb52 	bl	8004c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2140      	movs	r1, #64	; 0x40
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fc61 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 80045d4:	e00c      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	4610      	mov	r0, r2
 80045e2:	f000 fc58 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 80045e6:	e003      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      break;
 80045ec:	e000      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d831      	bhi.n	8004684 <HAL_TIM_ReadCapturedValue+0x78>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	0800465d 	.word	0x0800465d
 800462c:	08004685 	.word	0x08004685
 8004630:	08004685 	.word	0x08004685
 8004634:	08004685 	.word	0x08004685
 8004638:	08004667 	.word	0x08004667
 800463c:	08004685 	.word	0x08004685
 8004640:	08004685 	.word	0x08004685
 8004644:	08004685 	.word	0x08004685
 8004648:	08004671 	.word	0x08004671
 800464c:	08004685 	.word	0x08004685
 8004650:	08004685 	.word	0x08004685
 8004654:	08004685 	.word	0x08004685
 8004658:	0800467b 	.word	0x0800467b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	60fb      	str	r3, [r7, #12]

      break;
 8004664:	e00f      	b.n	8004686 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	60fb      	str	r3, [r7, #12]

      break;
 800466e:	e00a      	b.n	8004686 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	60fb      	str	r3, [r7, #12]

      break;
 8004678:	e005      	b.n	8004686 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	60fb      	str	r3, [r7, #12]

      break;
 8004682:	e000      	b.n	8004686 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004684:	bf00      	nop
  }

  return tmpreg;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <TIM_Base_SetConfig+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <TIM_Base_SetConfig+0x120>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d027      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0x118>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d023      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d017      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00f      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <TIM_Base_SetConfig+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <TIM_Base_SetConfig+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <TIM_Base_SetConfig+0x13c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <TIM_Base_SetConfig+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40010400 	.word	0x40010400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40001800 	.word	0x40001800
 800481c:	40001c00 	.word	0x40001c00
 8004820:	40002000 	.word	0x40002000

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a20      	ldr	r2, [pc, #128]	; (80048fc <TIM_OC1_SetConfig+0xd8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC1_SetConfig+0x64>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <TIM_OC1_SetConfig+0xdc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d10c      	bne.n	80048a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0308 	bic.w	r3, r3, #8
 800488e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <TIM_OC1_SetConfig+0xd8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0x8e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <TIM_OC1_SetConfig+0xdc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <TIM_OC2_SetConfig+0xe4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC2_SetConfig+0x68>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <TIM_OC2_SetConfig+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC2_SetConfig+0x94>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <TIM_OC2_SetConfig+0xe8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d113      	bne.n	80049c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800499e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40010400 	.word	0x40010400

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a21      	ldr	r2, [pc, #132]	; (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_OC3_SetConfig+0x66>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d10d      	bne.n	8004a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <TIM_OC3_SetConfig+0xe0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_OC3_SetConfig+0x92>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <TIM_OC3_SetConfig+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	031b      	lsls	r3, r3, #12
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <TIM_OC4_SetConfig+0xa4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC4_SetConfig+0x68>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <TIM_OC4_SetConfig+0xa8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d109      	bne.n	8004b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400

08004b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <TIM_TI1_SetConfig+0xcc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01b      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb8:	d017      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <TIM_TI1_SetConfig+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <TIM_TI1_SetConfig+0xd4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00f      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <TIM_TI1_SetConfig+0xd8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <TIM_TI1_SetConfig+0xdc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <TIM_TI1_SetConfig+0xe0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_TI1_SetConfig+0x66>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <TIM_TI1_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <TIM_TI1_SetConfig+0x6a>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <TIM_TI1_SetConfig+0x6c>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e003      	b.n	8004c0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 030a 	and.w	r3, r3, #10
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40010400 	.word	0x40010400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40001800 	.word	0x40001800

08004c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f023 0210 	bic.w	r2, r3, #16
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 0210 	bic.w	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	031b      	lsls	r3, r3, #12
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 0303 	bic.w	r3, r3, #3
 8004dd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004df4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	031b      	lsls	r3, r3, #12
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	031b      	lsls	r3, r3, #12
 8004e74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2201      	movs	r2, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e05a      	b.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a21      	ldr	r2, [pc, #132]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d022      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d01d      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d018      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00e      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d004      	beq.n	8004ffa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a15      	ldr	r2, [pc, #84]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10c      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40010400 	.word	0x40010400
 8005048:	40014000 	.word	0x40014000
 800504c:	40001800 	.word	0x40001800

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e03f      	b.n	800510a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fcd8 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f929 	bl	8005314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b08a      	sub	sp, #40	; 0x28
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	d17c      	bne.n	800522c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Transmit+0x2c>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e075      	b.n	800522e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Transmit+0x3e>
 800514c:	2302      	movs	r3, #2
 800514e:	e06e      	b.n	800522e <HAL_UART_Transmit+0x11c>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2221      	movs	r2, #33	; 0x21
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005166:	f7fc fe37 	bl	8001dd8 <HAL_GetTick>
 800516a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d108      	bne.n	8005194 <HAL_UART_Transmit+0x82>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e003      	b.n	800519c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051a4:	e02a      	b.n	80051fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f840 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e036      	b.n	800522e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3302      	adds	r3, #2
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e007      	b.n	80051ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1cf      	bne.n	80051a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f810 	bl	8005236 <UART_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b090      	sub	sp, #64	; 0x40
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005246:	e050      	b.n	80052ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d04c      	beq.n	80052ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0x30>
 8005256:	f7fc fdbf 	bl	8001dd8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005262:	429a      	cmp	r2, r3
 8005264:	d241      	bcs.n	80052ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800527c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005286:	637a      	str	r2, [r7, #52]	; 0x34
 8005288:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800528c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3314      	adds	r3, #20
 80052a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	613b      	str	r3, [r7, #16]
   return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3314      	adds	r3, #20
 80052b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ba:	623a      	str	r2, [r7, #32]
 80052bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e5      	bne.n	800529a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d09f      	beq.n	8005248 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3740      	adds	r7, #64	; 0x40
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005318:	b0c0      	sub	sp, #256	; 0x100
 800531a:	af00      	add	r7, sp, #0
 800531c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	ea40 0301 	orr.w	r3, r0, r1
 800533c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800536c:	f021 010c 	bic.w	r1, r1, #12
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800537a:	430b      	orrs	r3, r1
 800537c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	6999      	ldr	r1, [r3, #24]
 8005390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	ea40 0301 	orr.w	r3, r0, r1
 800539a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b8f      	ldr	r3, [pc, #572]	; (80055e0 <UART_SetConfig+0x2cc>)
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d005      	beq.n	80053b4 <UART_SetConfig+0xa0>
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b8d      	ldr	r3, [pc, #564]	; (80055e4 <UART_SetConfig+0x2d0>)
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d104      	bne.n	80053be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fa90 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 80053b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053bc:	e003      	b.n	80053c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fe fa77 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 80053c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d0:	f040 810c 	bne.w	80055ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	1891      	adds	r1, r2, r2
 80053ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ee:	415b      	adcs	r3, r3
 80053f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053f6:	4621      	mov	r1, r4
 80053f8:	eb12 0801 	adds.w	r8, r2, r1
 80053fc:	4629      	mov	r1, r5
 80053fe:	eb43 0901 	adc.w	r9, r3, r1
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800540e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005416:	4690      	mov	r8, r2
 8005418:	4699      	mov	r9, r3
 800541a:	4623      	mov	r3, r4
 800541c:	eb18 0303 	adds.w	r3, r8, r3
 8005420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005424:	462b      	mov	r3, r5
 8005426:	eb49 0303 	adc.w	r3, r9, r3
 800542a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800543a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800543e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005442:	460b      	mov	r3, r1
 8005444:	18db      	adds	r3, r3, r3
 8005446:	653b      	str	r3, [r7, #80]	; 0x50
 8005448:	4613      	mov	r3, r2
 800544a:	eb42 0303 	adc.w	r3, r2, r3
 800544e:	657b      	str	r3, [r7, #84]	; 0x54
 8005450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005458:	f7fb fb10 	bl	8000a7c <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4b61      	ldr	r3, [pc, #388]	; (80055e8 <UART_SetConfig+0x2d4>)
 8005462:	fba3 2302 	umull	r2, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	011c      	lsls	r4, r3, #4
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546e:	2200      	movs	r2, #0
 8005470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005474:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800547c:	4642      	mov	r2, r8
 800547e:	464b      	mov	r3, r9
 8005480:	1891      	adds	r1, r2, r2
 8005482:	64b9      	str	r1, [r7, #72]	; 0x48
 8005484:	415b      	adcs	r3, r3
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800548c:	4641      	mov	r1, r8
 800548e:	eb12 0a01 	adds.w	sl, r2, r1
 8005492:	4649      	mov	r1, r9
 8005494:	eb43 0b01 	adc.w	fp, r3, r1
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ac:	4692      	mov	sl, r2
 80054ae:	469b      	mov	fp, r3
 80054b0:	4643      	mov	r3, r8
 80054b2:	eb1a 0303 	adds.w	r3, sl, r3
 80054b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ba:	464b      	mov	r3, r9
 80054bc:	eb4b 0303 	adc.w	r3, fp, r3
 80054c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054d8:	460b      	mov	r3, r1
 80054da:	18db      	adds	r3, r3, r3
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
 80054de:	4613      	mov	r3, r2
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44
 80054e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ee:	f7fb fac5 	bl	8000a7c <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <UART_SetConfig+0x2d4>)
 80054fa:	fba3 2301 	umull	r2, r3, r3, r1
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2264      	movs	r2, #100	; 0x64
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	1acb      	subs	r3, r1, r3
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800550e:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <UART_SetConfig+0x2d4>)
 8005510:	fba3 2302 	umull	r2, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800551c:	441c      	add	r4, r3
 800551e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005522:	2200      	movs	r2, #0
 8005524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005528:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800552c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005530:	4642      	mov	r2, r8
 8005532:	464b      	mov	r3, r9
 8005534:	1891      	adds	r1, r2, r2
 8005536:	63b9      	str	r1, [r7, #56]	; 0x38
 8005538:	415b      	adcs	r3, r3
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005540:	4641      	mov	r1, r8
 8005542:	1851      	adds	r1, r2, r1
 8005544:	6339      	str	r1, [r7, #48]	; 0x30
 8005546:	4649      	mov	r1, r9
 8005548:	414b      	adcs	r3, r1
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005558:	4659      	mov	r1, fp
 800555a:	00cb      	lsls	r3, r1, #3
 800555c:	4651      	mov	r1, sl
 800555e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005562:	4651      	mov	r1, sl
 8005564:	00ca      	lsls	r2, r1, #3
 8005566:	4610      	mov	r0, r2
 8005568:	4619      	mov	r1, r3
 800556a:	4603      	mov	r3, r0
 800556c:	4642      	mov	r2, r8
 800556e:	189b      	adds	r3, r3, r2
 8005570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005574:	464b      	mov	r3, r9
 8005576:	460a      	mov	r2, r1
 8005578:	eb42 0303 	adc.w	r3, r2, r3
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800558c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005594:	460b      	mov	r3, r1
 8005596:	18db      	adds	r3, r3, r3
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
 800559a:	4613      	mov	r3, r2
 800559c:	eb42 0303 	adc.w	r3, r2, r3
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055aa:	f7fb fa67 	bl	8000a7c <__aeabi_uldivmod>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <UART_SetConfig+0x2d4>)
 80055b4:	fba3 1302 	umull	r1, r3, r3, r2
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	2164      	movs	r1, #100	; 0x64
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	3332      	adds	r3, #50	; 0x32
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <UART_SetConfig+0x2d4>)
 80055c8:	fba2 2303 	umull	r2, r3, r2, r3
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	f003 0207 	and.w	r2, r3, #7
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4422      	add	r2, r4
 80055da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055dc:	e105      	b.n	80057ea <UART_SetConfig+0x4d6>
 80055de:	bf00      	nop
 80055e0:	40011000 	.word	0x40011000
 80055e4:	40011400 	.word	0x40011400
 80055e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055fe:	4642      	mov	r2, r8
 8005600:	464b      	mov	r3, r9
 8005602:	1891      	adds	r1, r2, r2
 8005604:	6239      	str	r1, [r7, #32]
 8005606:	415b      	adcs	r3, r3
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800560e:	4641      	mov	r1, r8
 8005610:	1854      	adds	r4, r2, r1
 8005612:	4649      	mov	r1, r9
 8005614:	eb43 0501 	adc.w	r5, r3, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	00eb      	lsls	r3, r5, #3
 8005622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005626:	00e2      	lsls	r2, r4, #3
 8005628:	4614      	mov	r4, r2
 800562a:	461d      	mov	r5, r3
 800562c:	4643      	mov	r3, r8
 800562e:	18e3      	adds	r3, r4, r3
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005634:	464b      	mov	r3, r9
 8005636:	eb45 0303 	adc.w	r3, r5, r3
 800563a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800564a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800565a:	4629      	mov	r1, r5
 800565c:	008b      	lsls	r3, r1, #2
 800565e:	4621      	mov	r1, r4
 8005660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005664:	4621      	mov	r1, r4
 8005666:	008a      	lsls	r2, r1, #2
 8005668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800566c:	f7fb fa06 	bl	8000a7c <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4b60      	ldr	r3, [pc, #384]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005676:	fba3 2302 	umull	r2, r3, r3, r2
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	011c      	lsls	r4, r3, #4
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005682:	2200      	movs	r2, #0
 8005684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800568c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	1891      	adds	r1, r2, r2
 8005696:	61b9      	str	r1, [r7, #24]
 8005698:	415b      	adcs	r3, r3
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a0:	4641      	mov	r1, r8
 80056a2:	1851      	adds	r1, r2, r1
 80056a4:	6139      	str	r1, [r7, #16]
 80056a6:	4649      	mov	r1, r9
 80056a8:	414b      	adcs	r3, r1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b8:	4659      	mov	r1, fp
 80056ba:	00cb      	lsls	r3, r1, #3
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c2:	4651      	mov	r1, sl
 80056c4:	00ca      	lsls	r2, r1, #3
 80056c6:	4610      	mov	r0, r2
 80056c8:	4619      	mov	r1, r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	4642      	mov	r2, r8
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056d4:	464b      	mov	r3, r9
 80056d6:	460a      	mov	r2, r1
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056f8:	4649      	mov	r1, r9
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	4641      	mov	r1, r8
 80056fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005702:	4641      	mov	r1, r8
 8005704:	008a      	lsls	r2, r1, #2
 8005706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800570a:	f7fb f9b7 	bl	8000a7c <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005714:	fba3 1302 	umull	r1, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	2164      	movs	r1, #100	; 0x64
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	3332      	adds	r3, #50	; 0x32
 8005726:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <UART_SetConfig+0x4e4>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005732:	441c      	add	r4, r3
 8005734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005738:	2200      	movs	r2, #0
 800573a:	673b      	str	r3, [r7, #112]	; 0x70
 800573c:	677a      	str	r2, [r7, #116]	; 0x74
 800573e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005742:	4642      	mov	r2, r8
 8005744:	464b      	mov	r3, r9
 8005746:	1891      	adds	r1, r2, r2
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	415b      	adcs	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005752:	4641      	mov	r1, r8
 8005754:	1851      	adds	r1, r2, r1
 8005756:	6039      	str	r1, [r7, #0]
 8005758:	4649      	mov	r1, r9
 800575a:	414b      	adcs	r3, r1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800576a:	4659      	mov	r1, fp
 800576c:	00cb      	lsls	r3, r1, #3
 800576e:	4651      	mov	r1, sl
 8005770:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005774:	4651      	mov	r1, sl
 8005776:	00ca      	lsls	r2, r1, #3
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	4603      	mov	r3, r0
 800577e:	4642      	mov	r2, r8
 8005780:	189b      	adds	r3, r3, r2
 8005782:	66bb      	str	r3, [r7, #104]	; 0x68
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	663b      	str	r3, [r7, #96]	; 0x60
 8005798:	667a      	str	r2, [r7, #100]	; 0x64
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057a6:	4649      	mov	r1, r9
 80057a8:	008b      	lsls	r3, r1, #2
 80057aa:	4641      	mov	r1, r8
 80057ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b0:	4641      	mov	r1, r8
 80057b2:	008a      	lsls	r2, r1, #2
 80057b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057b8:	f7fb f960 	bl	8000a7c <__aeabi_uldivmod>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <UART_SetConfig+0x4e4>)
 80057c2:	fba3 1302 	umull	r1, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2164      	movs	r1, #100	; 0x64
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	3332      	adds	r3, #50	; 0x32
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <UART_SetConfig+0x4e4>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f003 020f 	and.w	r2, r3, #15
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4422      	add	r2, r4
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057f0:	46bd      	mov	sp, r7
 80057f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f6:	bf00      	nop
 80057f8:	51eb851f 	.word	0x51eb851f

080057fc <__errno>:
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <__errno+0x8>)
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000024 	.word	0x20000024

08005808 <__libc_init_array>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	4d0d      	ldr	r5, [pc, #52]	; (8005840 <__libc_init_array+0x38>)
 800580c:	4c0d      	ldr	r4, [pc, #52]	; (8005844 <__libc_init_array+0x3c>)
 800580e:	1b64      	subs	r4, r4, r5
 8005810:	10a4      	asrs	r4, r4, #2
 8005812:	2600      	movs	r6, #0
 8005814:	42a6      	cmp	r6, r4
 8005816:	d109      	bne.n	800582c <__libc_init_array+0x24>
 8005818:	4d0b      	ldr	r5, [pc, #44]	; (8005848 <__libc_init_array+0x40>)
 800581a:	4c0c      	ldr	r4, [pc, #48]	; (800584c <__libc_init_array+0x44>)
 800581c:	f001 f9be 	bl	8006b9c <_init>
 8005820:	1b64      	subs	r4, r4, r5
 8005822:	10a4      	asrs	r4, r4, #2
 8005824:	2600      	movs	r6, #0
 8005826:	42a6      	cmp	r6, r4
 8005828:	d105      	bne.n	8005836 <__libc_init_array+0x2e>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005830:	4798      	blx	r3
 8005832:	3601      	adds	r6, #1
 8005834:	e7ee      	b.n	8005814 <__libc_init_array+0xc>
 8005836:	f855 3b04 	ldr.w	r3, [r5], #4
 800583a:	4798      	blx	r3
 800583c:	3601      	adds	r6, #1
 800583e:	e7f2      	b.n	8005826 <__libc_init_array+0x1e>
 8005840:	08006ce4 	.word	0x08006ce4
 8005844:	08006ce4 	.word	0x08006ce4
 8005848:	08006ce4 	.word	0x08006ce4
 800584c:	08006ce8 	.word	0x08006ce8

08005850 <memset>:
 8005850:	4402      	add	r2, r0
 8005852:	4603      	mov	r3, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	d100      	bne.n	800585a <memset+0xa>
 8005858:	4770      	bx	lr
 800585a:	f803 1b01 	strb.w	r1, [r3], #1
 800585e:	e7f9      	b.n	8005854 <memset+0x4>

08005860 <iprintf>:
 8005860:	b40f      	push	{r0, r1, r2, r3}
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <iprintf+0x2c>)
 8005864:	b513      	push	{r0, r1, r4, lr}
 8005866:	681c      	ldr	r4, [r3, #0]
 8005868:	b124      	cbz	r4, 8005874 <iprintf+0x14>
 800586a:	69a3      	ldr	r3, [r4, #24]
 800586c:	b913      	cbnz	r3, 8005874 <iprintf+0x14>
 800586e:	4620      	mov	r0, r4
 8005870:	f000 f8ba 	bl	80059e8 <__sinit>
 8005874:	ab05      	add	r3, sp, #20
 8005876:	9a04      	ldr	r2, [sp, #16]
 8005878:	68a1      	ldr	r1, [r4, #8]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fb6d 	bl	8005f5c <_vfiprintf_r>
 8005882:	b002      	add	sp, #8
 8005884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005888:	b004      	add	sp, #16
 800588a:	4770      	bx	lr
 800588c:	20000024 	.word	0x20000024

08005890 <sniprintf>:
 8005890:	b40c      	push	{r2, r3}
 8005892:	b530      	push	{r4, r5, lr}
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <sniprintf+0x64>)
 8005896:	1e0c      	subs	r4, r1, #0
 8005898:	681d      	ldr	r5, [r3, #0]
 800589a:	b09d      	sub	sp, #116	; 0x74
 800589c:	da08      	bge.n	80058b0 <sniprintf+0x20>
 800589e:	238b      	movs	r3, #139	; 0x8b
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	f04f 30ff 	mov.w	r0, #4294967295
 80058a6:	b01d      	add	sp, #116	; 0x74
 80058a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ac:	b002      	add	sp, #8
 80058ae:	4770      	bx	lr
 80058b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058b8:	bf14      	ite	ne
 80058ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058be:	4623      	moveq	r3, r4
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058c8:	9002      	str	r0, [sp, #8]
 80058ca:	9006      	str	r0, [sp, #24]
 80058cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d2:	ab21      	add	r3, sp, #132	; 0x84
 80058d4:	a902      	add	r1, sp, #8
 80058d6:	4628      	mov	r0, r5
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	f000 fa15 	bl	8005d08 <_svfiprintf_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	bfbc      	itt	lt
 80058e2:	238b      	movlt	r3, #139	; 0x8b
 80058e4:	602b      	strlt	r3, [r5, #0]
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d0dd      	beq.n	80058a6 <sniprintf+0x16>
 80058ea:	9b02      	ldr	r3, [sp, #8]
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e7d9      	b.n	80058a6 <sniprintf+0x16>
 80058f2:	bf00      	nop
 80058f4:	20000024 	.word	0x20000024

080058f8 <siprintf>:
 80058f8:	b40e      	push	{r1, r2, r3}
 80058fa:	b500      	push	{lr}
 80058fc:	b09c      	sub	sp, #112	; 0x70
 80058fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	9006      	str	r0, [sp, #24]
 8005904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005908:	4809      	ldr	r0, [pc, #36]	; (8005930 <siprintf+0x38>)
 800590a:	9107      	str	r1, [sp, #28]
 800590c:	9104      	str	r1, [sp, #16]
 800590e:	4909      	ldr	r1, [pc, #36]	; (8005934 <siprintf+0x3c>)
 8005910:	f853 2b04 	ldr.w	r2, [r3], #4
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	a902      	add	r1, sp, #8
 800591c:	f000 f9f4 	bl	8005d08 <_svfiprintf_r>
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	b01c      	add	sp, #112	; 0x70
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b003      	add	sp, #12
 800592e:	4770      	bx	lr
 8005930:	20000024 	.word	0x20000024
 8005934:	ffff0208 	.word	0xffff0208

08005938 <std>:
 8005938:	2300      	movs	r3, #0
 800593a:	b510      	push	{r4, lr}
 800593c:	4604      	mov	r4, r0
 800593e:	e9c0 3300 	strd	r3, r3, [r0]
 8005942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005946:	6083      	str	r3, [r0, #8]
 8005948:	8181      	strh	r1, [r0, #12]
 800594a:	6643      	str	r3, [r0, #100]	; 0x64
 800594c:	81c2      	strh	r2, [r0, #14]
 800594e:	6183      	str	r3, [r0, #24]
 8005950:	4619      	mov	r1, r3
 8005952:	2208      	movs	r2, #8
 8005954:	305c      	adds	r0, #92	; 0x5c
 8005956:	f7ff ff7b 	bl	8005850 <memset>
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <std+0x38>)
 800595c:	6263      	str	r3, [r4, #36]	; 0x24
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <std+0x3c>)
 8005960:	62a3      	str	r3, [r4, #40]	; 0x28
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <std+0x40>)
 8005964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <std+0x44>)
 8005968:	6224      	str	r4, [r4, #32]
 800596a:	6323      	str	r3, [r4, #48]	; 0x30
 800596c:	bd10      	pop	{r4, pc}
 800596e:	bf00      	nop
 8005970:	08006505 	.word	0x08006505
 8005974:	08006527 	.word	0x08006527
 8005978:	0800655f 	.word	0x0800655f
 800597c:	08006583 	.word	0x08006583

08005980 <_cleanup_r>:
 8005980:	4901      	ldr	r1, [pc, #4]	; (8005988 <_cleanup_r+0x8>)
 8005982:	f000 b8af 	b.w	8005ae4 <_fwalk_reent>
 8005986:	bf00      	nop
 8005988:	0800685d 	.word	0x0800685d

0800598c <__sfmoreglue>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	2268      	movs	r2, #104	; 0x68
 8005990:	1e4d      	subs	r5, r1, #1
 8005992:	4355      	muls	r5, r2
 8005994:	460e      	mov	r6, r1
 8005996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800599a:	f000 f8e5 	bl	8005b68 <_malloc_r>
 800599e:	4604      	mov	r4, r0
 80059a0:	b140      	cbz	r0, 80059b4 <__sfmoreglue+0x28>
 80059a2:	2100      	movs	r1, #0
 80059a4:	e9c0 1600 	strd	r1, r6, [r0]
 80059a8:	300c      	adds	r0, #12
 80059aa:	60a0      	str	r0, [r4, #8]
 80059ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059b0:	f7ff ff4e 	bl	8005850 <memset>
 80059b4:	4620      	mov	r0, r4
 80059b6:	bd70      	pop	{r4, r5, r6, pc}

080059b8 <__sfp_lock_acquire>:
 80059b8:	4801      	ldr	r0, [pc, #4]	; (80059c0 <__sfp_lock_acquire+0x8>)
 80059ba:	f000 b8b3 	b.w	8005b24 <__retarget_lock_acquire_recursive>
 80059be:	bf00      	nop
 80059c0:	200001e9 	.word	0x200001e9

080059c4 <__sfp_lock_release>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__sfp_lock_release+0x8>)
 80059c6:	f000 b8ae 	b.w	8005b26 <__retarget_lock_release_recursive>
 80059ca:	bf00      	nop
 80059cc:	200001e9 	.word	0x200001e9

080059d0 <__sinit_lock_acquire>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__sinit_lock_acquire+0x8>)
 80059d2:	f000 b8a7 	b.w	8005b24 <__retarget_lock_acquire_recursive>
 80059d6:	bf00      	nop
 80059d8:	200001ea 	.word	0x200001ea

080059dc <__sinit_lock_release>:
 80059dc:	4801      	ldr	r0, [pc, #4]	; (80059e4 <__sinit_lock_release+0x8>)
 80059de:	f000 b8a2 	b.w	8005b26 <__retarget_lock_release_recursive>
 80059e2:	bf00      	nop
 80059e4:	200001ea 	.word	0x200001ea

080059e8 <__sinit>:
 80059e8:	b510      	push	{r4, lr}
 80059ea:	4604      	mov	r4, r0
 80059ec:	f7ff fff0 	bl	80059d0 <__sinit_lock_acquire>
 80059f0:	69a3      	ldr	r3, [r4, #24]
 80059f2:	b11b      	cbz	r3, 80059fc <__sinit+0x14>
 80059f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f8:	f7ff bff0 	b.w	80059dc <__sinit_lock_release>
 80059fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a00:	6523      	str	r3, [r4, #80]	; 0x50
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <__sinit+0x68>)
 8005a04:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <__sinit+0x6c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a0a:	42a3      	cmp	r3, r4
 8005a0c:	bf04      	itt	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	61a3      	streq	r3, [r4, #24]
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 f820 	bl	8005a58 <__sfp>
 8005a18:	6060      	str	r0, [r4, #4]
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 f81c 	bl	8005a58 <__sfp>
 8005a20:	60a0      	str	r0, [r4, #8]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f818 	bl	8005a58 <__sfp>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	60e0      	str	r0, [r4, #12]
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	6860      	ldr	r0, [r4, #4]
 8005a30:	f7ff ff82 	bl	8005938 <std>
 8005a34:	68a0      	ldr	r0, [r4, #8]
 8005a36:	2201      	movs	r2, #1
 8005a38:	2109      	movs	r1, #9
 8005a3a:	f7ff ff7d 	bl	8005938 <std>
 8005a3e:	68e0      	ldr	r0, [r4, #12]
 8005a40:	2202      	movs	r2, #2
 8005a42:	2112      	movs	r1, #18
 8005a44:	f7ff ff78 	bl	8005938 <std>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	61a3      	str	r3, [r4, #24]
 8005a4c:	e7d2      	b.n	80059f4 <__sinit+0xc>
 8005a4e:	bf00      	nop
 8005a50:	08006c44 	.word	0x08006c44
 8005a54:	08005981 	.word	0x08005981

08005a58 <__sfp>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	f7ff ffac 	bl	80059b8 <__sfp_lock_acquire>
 8005a60:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <__sfp+0x84>)
 8005a62:	681e      	ldr	r6, [r3, #0]
 8005a64:	69b3      	ldr	r3, [r6, #24]
 8005a66:	b913      	cbnz	r3, 8005a6e <__sfp+0x16>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff ffbd 	bl	80059e8 <__sinit>
 8005a6e:	3648      	adds	r6, #72	; 0x48
 8005a70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	d503      	bpl.n	8005a80 <__sfp+0x28>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	b30b      	cbz	r3, 8005ac0 <__sfp+0x68>
 8005a7c:	6836      	ldr	r6, [r6, #0]
 8005a7e:	e7f7      	b.n	8005a70 <__sfp+0x18>
 8005a80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a84:	b9d5      	cbnz	r5, 8005abc <__sfp+0x64>
 8005a86:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <__sfp+0x88>)
 8005a88:	60e3      	str	r3, [r4, #12]
 8005a8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a8e:	6665      	str	r5, [r4, #100]	; 0x64
 8005a90:	f000 f847 	bl	8005b22 <__retarget_lock_init_recursive>
 8005a94:	f7ff ff96 	bl	80059c4 <__sfp_lock_release>
 8005a98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005aa0:	6025      	str	r5, [r4, #0]
 8005aa2:	61a5      	str	r5, [r4, #24]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aac:	f7ff fed0 	bl	8005850 <memset>
 8005ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ab8:	4620      	mov	r0, r4
 8005aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005abc:	3468      	adds	r4, #104	; 0x68
 8005abe:	e7d9      	b.n	8005a74 <__sfp+0x1c>
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f7ff ff62 	bl	800598c <__sfmoreglue>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	6030      	str	r0, [r6, #0]
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d1d5      	bne.n	8005a7c <__sfp+0x24>
 8005ad0:	f7ff ff78 	bl	80059c4 <__sfp_lock_release>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	e7ee      	b.n	8005ab8 <__sfp+0x60>
 8005ada:	bf00      	nop
 8005adc:	08006c44 	.word	0x08006c44
 8005ae0:	ffff0001 	.word	0xffff0001

08005ae4 <_fwalk_reent>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	4606      	mov	r6, r0
 8005aea:	4688      	mov	r8, r1
 8005aec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005af0:	2700      	movs	r7, #0
 8005af2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af6:	f1b9 0901 	subs.w	r9, r9, #1
 8005afa:	d505      	bpl.n	8005b08 <_fwalk_reent+0x24>
 8005afc:	6824      	ldr	r4, [r4, #0]
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	d1f7      	bne.n	8005af2 <_fwalk_reent+0xe>
 8005b02:	4638      	mov	r0, r7
 8005b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b08:	89ab      	ldrh	r3, [r5, #12]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d907      	bls.n	8005b1e <_fwalk_reent+0x3a>
 8005b0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b12:	3301      	adds	r3, #1
 8005b14:	d003      	beq.n	8005b1e <_fwalk_reent+0x3a>
 8005b16:	4629      	mov	r1, r5
 8005b18:	4630      	mov	r0, r6
 8005b1a:	47c0      	blx	r8
 8005b1c:	4307      	orrs	r7, r0
 8005b1e:	3568      	adds	r5, #104	; 0x68
 8005b20:	e7e9      	b.n	8005af6 <_fwalk_reent+0x12>

08005b22 <__retarget_lock_init_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <__retarget_lock_acquire_recursive>:
 8005b24:	4770      	bx	lr

08005b26 <__retarget_lock_release_recursive>:
 8005b26:	4770      	bx	lr

08005b28 <sbrk_aligned>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0e      	ldr	r6, [pc, #56]	; (8005b64 <sbrk_aligned+0x3c>)
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	6831      	ldr	r1, [r6, #0]
 8005b30:	4605      	mov	r5, r0
 8005b32:	b911      	cbnz	r1, 8005b3a <sbrk_aligned+0x12>
 8005b34:	f000 fcd6 	bl	80064e4 <_sbrk_r>
 8005b38:	6030      	str	r0, [r6, #0]
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fcd1 	bl	80064e4 <_sbrk_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	d00a      	beq.n	8005b5c <sbrk_aligned+0x34>
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d007      	beq.n	8005b60 <sbrk_aligned+0x38>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fcc6 	bl	80064e4 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d101      	bne.n	8005b60 <sbrk_aligned+0x38>
 8005b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b60:	4620      	mov	r0, r4
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	200001f0 	.word	0x200001f0

08005b68 <_malloc_r>:
 8005b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6c:	1ccd      	adds	r5, r1, #3
 8005b6e:	f025 0503 	bic.w	r5, r5, #3
 8005b72:	3508      	adds	r5, #8
 8005b74:	2d0c      	cmp	r5, #12
 8005b76:	bf38      	it	cc
 8005b78:	250c      	movcc	r5, #12
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	db01      	blt.n	8005b84 <_malloc_r+0x1c>
 8005b80:	42a9      	cmp	r1, r5
 8005b82:	d905      	bls.n	8005b90 <_malloc_r+0x28>
 8005b84:	230c      	movs	r3, #12
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	2600      	movs	r6, #0
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	4e2e      	ldr	r6, [pc, #184]	; (8005c4c <_malloc_r+0xe4>)
 8005b92:	f000 ff3f 	bl	8006a14 <__malloc_lock>
 8005b96:	6833      	ldr	r3, [r6, #0]
 8005b98:	461c      	mov	r4, r3
 8005b9a:	bb34      	cbnz	r4, 8005bea <_malloc_r+0x82>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f7ff ffc2 	bl	8005b28 <sbrk_aligned>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	d14d      	bne.n	8005c46 <_malloc_r+0xde>
 8005baa:	6834      	ldr	r4, [r6, #0]
 8005bac:	4626      	mov	r6, r4
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d140      	bne.n	8005c34 <_malloc_r+0xcc>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	eb04 0803 	add.w	r8, r4, r3
 8005bbc:	f000 fc92 	bl	80064e4 <_sbrk_r>
 8005bc0:	4580      	cmp	r8, r0
 8005bc2:	d13a      	bne.n	8005c3a <_malloc_r+0xd2>
 8005bc4:	6821      	ldr	r1, [r4, #0]
 8005bc6:	3503      	adds	r5, #3
 8005bc8:	1a6d      	subs	r5, r5, r1
 8005bca:	f025 0503 	bic.w	r5, r5, #3
 8005bce:	3508      	adds	r5, #8
 8005bd0:	2d0c      	cmp	r5, #12
 8005bd2:	bf38      	it	cc
 8005bd4:	250c      	movcc	r5, #12
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ffa5 	bl	8005b28 <sbrk_aligned>
 8005bde:	3001      	adds	r0, #1
 8005be0:	d02b      	beq.n	8005c3a <_malloc_r+0xd2>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	442b      	add	r3, r5
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	e00e      	b.n	8005c08 <_malloc_r+0xa0>
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	d41e      	bmi.n	8005c2e <_malloc_r+0xc6>
 8005bf0:	2a0b      	cmp	r2, #11
 8005bf2:	d916      	bls.n	8005c22 <_malloc_r+0xba>
 8005bf4:	1961      	adds	r1, r4, r5
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	6025      	str	r5, [r4, #0]
 8005bfa:	bf18      	it	ne
 8005bfc:	6059      	strne	r1, [r3, #4]
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	bf08      	it	eq
 8005c02:	6031      	streq	r1, [r6, #0]
 8005c04:	5162      	str	r2, [r4, r5]
 8005c06:	604b      	str	r3, [r1, #4]
 8005c08:	4638      	mov	r0, r7
 8005c0a:	f104 060b 	add.w	r6, r4, #11
 8005c0e:	f000 ff07 	bl	8006a20 <__malloc_unlock>
 8005c12:	f026 0607 	bic.w	r6, r6, #7
 8005c16:	1d23      	adds	r3, r4, #4
 8005c18:	1af2      	subs	r2, r6, r3
 8005c1a:	d0b6      	beq.n	8005b8a <_malloc_r+0x22>
 8005c1c:	1b9b      	subs	r3, r3, r6
 8005c1e:	50a3      	str	r3, [r4, r2]
 8005c20:	e7b3      	b.n	8005b8a <_malloc_r+0x22>
 8005c22:	6862      	ldr	r2, [r4, #4]
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	bf0c      	ite	eq
 8005c28:	6032      	streq	r2, [r6, #0]
 8005c2a:	605a      	strne	r2, [r3, #4]
 8005c2c:	e7ec      	b.n	8005c08 <_malloc_r+0xa0>
 8005c2e:	4623      	mov	r3, r4
 8005c30:	6864      	ldr	r4, [r4, #4]
 8005c32:	e7b2      	b.n	8005b9a <_malloc_r+0x32>
 8005c34:	4634      	mov	r4, r6
 8005c36:	6876      	ldr	r6, [r6, #4]
 8005c38:	e7b9      	b.n	8005bae <_malloc_r+0x46>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f000 feee 	bl	8006a20 <__malloc_unlock>
 8005c44:	e7a1      	b.n	8005b8a <_malloc_r+0x22>
 8005c46:	6025      	str	r5, [r4, #0]
 8005c48:	e7de      	b.n	8005c08 <_malloc_r+0xa0>
 8005c4a:	bf00      	nop
 8005c4c:	200001ec 	.word	0x200001ec

08005c50 <__ssputs_r>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	688e      	ldr	r6, [r1, #8]
 8005c56:	429e      	cmp	r6, r3
 8005c58:	4682      	mov	sl, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	4690      	mov	r8, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	d838      	bhi.n	8005cd4 <__ssputs_r+0x84>
 8005c62:	898a      	ldrh	r2, [r1, #12]
 8005c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c68:	d032      	beq.n	8005cd0 <__ssputs_r+0x80>
 8005c6a:	6825      	ldr	r5, [r4, #0]
 8005c6c:	6909      	ldr	r1, [r1, #16]
 8005c6e:	eba5 0901 	sub.w	r9, r5, r1
 8005c72:	6965      	ldr	r5, [r4, #20]
 8005c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	444b      	add	r3, r9
 8005c80:	106d      	asrs	r5, r5, #1
 8005c82:	429d      	cmp	r5, r3
 8005c84:	bf38      	it	cc
 8005c86:	461d      	movcc	r5, r3
 8005c88:	0553      	lsls	r3, r2, #21
 8005c8a:	d531      	bpl.n	8005cf0 <__ssputs_r+0xa0>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7ff ff6b 	bl	8005b68 <_malloc_r>
 8005c92:	4606      	mov	r6, r0
 8005c94:	b950      	cbnz	r0, 8005cac <__ssputs_r+0x5c>
 8005c96:	230c      	movs	r3, #12
 8005c98:	f8ca 3000 	str.w	r3, [sl]
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cac:	6921      	ldr	r1, [r4, #16]
 8005cae:	464a      	mov	r2, r9
 8005cb0:	f000 fe88 	bl	80069c4 <memcpy>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	6126      	str	r6, [r4, #16]
 8005cc2:	6165      	str	r5, [r4, #20]
 8005cc4:	444e      	add	r6, r9
 8005cc6:	eba5 0509 	sub.w	r5, r5, r9
 8005cca:	6026      	str	r6, [r4, #0]
 8005ccc:	60a5      	str	r5, [r4, #8]
 8005cce:	463e      	mov	r6, r7
 8005cd0:	42be      	cmp	r6, r7
 8005cd2:	d900      	bls.n	8005cd6 <__ssputs_r+0x86>
 8005cd4:	463e      	mov	r6, r7
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	4632      	mov	r2, r6
 8005cda:	4641      	mov	r1, r8
 8005cdc:	f000 fe80 	bl	80069e0 <memmove>
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	1b9b      	subs	r3, r3, r6
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4433      	add	r3, r6
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	2000      	movs	r0, #0
 8005cee:	e7db      	b.n	8005ca8 <__ssputs_r+0x58>
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	f000 fee7 	bl	8006ac4 <_realloc_r>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d1e1      	bne.n	8005cc0 <__ssputs_r+0x70>
 8005cfc:	6921      	ldr	r1, [r4, #16]
 8005cfe:	4650      	mov	r0, sl
 8005d00:	f000 fe94 	bl	8006a2c <_free_r>
 8005d04:	e7c7      	b.n	8005c96 <__ssputs_r+0x46>
	...

08005d08 <_svfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4698      	mov	r8, r3
 8005d0e:	898b      	ldrh	r3, [r1, #12]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	b09d      	sub	sp, #116	; 0x74
 8005d14:	4607      	mov	r7, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	d50e      	bpl.n	8005d3a <_svfiprintf_r+0x32>
 8005d1c:	690b      	ldr	r3, [r1, #16]
 8005d1e:	b963      	cbnz	r3, 8005d3a <_svfiprintf_r+0x32>
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	f7ff ff21 	bl	8005b68 <_malloc_r>
 8005d26:	6028      	str	r0, [r5, #0]
 8005d28:	6128      	str	r0, [r5, #16]
 8005d2a:	b920      	cbnz	r0, 8005d36 <_svfiprintf_r+0x2e>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e0d1      	b.n	8005eda <_svfiprintf_r+0x1d2>
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	616b      	str	r3, [r5, #20]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3e:	2320      	movs	r3, #32
 8005d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d48:	2330      	movs	r3, #48	; 0x30
 8005d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ef4 <_svfiprintf_r+0x1ec>
 8005d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d52:	f04f 0901 	mov.w	r9, #1
 8005d56:	4623      	mov	r3, r4
 8005d58:	469a      	mov	sl, r3
 8005d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d5e:	b10a      	cbz	r2, 8005d64 <_svfiprintf_r+0x5c>
 8005d60:	2a25      	cmp	r2, #37	; 0x25
 8005d62:	d1f9      	bne.n	8005d58 <_svfiprintf_r+0x50>
 8005d64:	ebba 0b04 	subs.w	fp, sl, r4
 8005d68:	d00b      	beq.n	8005d82 <_svfiprintf_r+0x7a>
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7ff ff6d 	bl	8005c50 <__ssputs_r>
 8005d76:	3001      	adds	r0, #1
 8005d78:	f000 80aa 	beq.w	8005ed0 <_svfiprintf_r+0x1c8>
 8005d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d7e:	445a      	add	r2, fp
 8005d80:	9209      	str	r2, [sp, #36]	; 0x24
 8005d82:	f89a 3000 	ldrb.w	r3, [sl]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80a2 	beq.w	8005ed0 <_svfiprintf_r+0x1c8>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d96:	f10a 0a01 	add.w	sl, sl, #1
 8005d9a:	9304      	str	r3, [sp, #16]
 8005d9c:	9307      	str	r3, [sp, #28]
 8005d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da2:	931a      	str	r3, [sp, #104]	; 0x68
 8005da4:	4654      	mov	r4, sl
 8005da6:	2205      	movs	r2, #5
 8005da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dac:	4851      	ldr	r0, [pc, #324]	; (8005ef4 <_svfiprintf_r+0x1ec>)
 8005dae:	f7fa fa27 	bl	8000200 <memchr>
 8005db2:	9a04      	ldr	r2, [sp, #16]
 8005db4:	b9d8      	cbnz	r0, 8005dee <_svfiprintf_r+0xe6>
 8005db6:	06d0      	lsls	r0, r2, #27
 8005db8:	bf44      	itt	mi
 8005dba:	2320      	movmi	r3, #32
 8005dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc0:	0711      	lsls	r1, r2, #28
 8005dc2:	bf44      	itt	mi
 8005dc4:	232b      	movmi	r3, #43	; 0x2b
 8005dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dca:	f89a 3000 	ldrb.w	r3, [sl]
 8005dce:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd0:	d015      	beq.n	8005dfe <_svfiprintf_r+0xf6>
 8005dd2:	9a07      	ldr	r2, [sp, #28]
 8005dd4:	4654      	mov	r4, sl
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f04f 0c0a 	mov.w	ip, #10
 8005ddc:	4621      	mov	r1, r4
 8005dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de2:	3b30      	subs	r3, #48	; 0x30
 8005de4:	2b09      	cmp	r3, #9
 8005de6:	d94e      	bls.n	8005e86 <_svfiprintf_r+0x17e>
 8005de8:	b1b0      	cbz	r0, 8005e18 <_svfiprintf_r+0x110>
 8005dea:	9207      	str	r2, [sp, #28]
 8005dec:	e014      	b.n	8005e18 <_svfiprintf_r+0x110>
 8005dee:	eba0 0308 	sub.w	r3, r0, r8
 8005df2:	fa09 f303 	lsl.w	r3, r9, r3
 8005df6:	4313      	orrs	r3, r2
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	46a2      	mov	sl, r4
 8005dfc:	e7d2      	b.n	8005da4 <_svfiprintf_r+0x9c>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9103      	str	r1, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfbb      	ittet	lt
 8005e0a:	425b      	neglt	r3, r3
 8005e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e10:	9307      	strge	r3, [sp, #28]
 8005e12:	9307      	strlt	r3, [sp, #28]
 8005e14:	bfb8      	it	lt
 8005e16:	9204      	strlt	r2, [sp, #16]
 8005e18:	7823      	ldrb	r3, [r4, #0]
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d10c      	bne.n	8005e38 <_svfiprintf_r+0x130>
 8005e1e:	7863      	ldrb	r3, [r4, #1]
 8005e20:	2b2a      	cmp	r3, #42	; 0x2a
 8005e22:	d135      	bne.n	8005e90 <_svfiprintf_r+0x188>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	9203      	str	r2, [sp, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bfb8      	it	lt
 8005e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e34:	3402      	adds	r4, #2
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f04 <_svfiprintf_r+0x1fc>
 8005e3c:	7821      	ldrb	r1, [r4, #0]
 8005e3e:	2203      	movs	r2, #3
 8005e40:	4650      	mov	r0, sl
 8005e42:	f7fa f9dd 	bl	8000200 <memchr>
 8005e46:	b140      	cbz	r0, 8005e5a <_svfiprintf_r+0x152>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	eba0 000a 	sub.w	r0, r0, sl
 8005e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	4303      	orrs	r3, r0
 8005e56:	3401      	adds	r4, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5e:	4826      	ldr	r0, [pc, #152]	; (8005ef8 <_svfiprintf_r+0x1f0>)
 8005e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e64:	2206      	movs	r2, #6
 8005e66:	f7fa f9cb 	bl	8000200 <memchr>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d038      	beq.n	8005ee0 <_svfiprintf_r+0x1d8>
 8005e6e:	4b23      	ldr	r3, [pc, #140]	; (8005efc <_svfiprintf_r+0x1f4>)
 8005e70:	bb1b      	cbnz	r3, 8005eba <_svfiprintf_r+0x1b2>
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	3307      	adds	r3, #7
 8005e76:	f023 0307 	bic.w	r3, r3, #7
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	9303      	str	r3, [sp, #12]
 8005e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e80:	4433      	add	r3, r6
 8005e82:	9309      	str	r3, [sp, #36]	; 0x24
 8005e84:	e767      	b.n	8005d56 <_svfiprintf_r+0x4e>
 8005e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	e7a5      	b.n	8005ddc <_svfiprintf_r+0xd4>
 8005e90:	2300      	movs	r3, #0
 8005e92:	3401      	adds	r4, #1
 8005e94:	9305      	str	r3, [sp, #20]
 8005e96:	4619      	mov	r1, r3
 8005e98:	f04f 0c0a 	mov.w	ip, #10
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea2:	3a30      	subs	r2, #48	; 0x30
 8005ea4:	2a09      	cmp	r2, #9
 8005ea6:	d903      	bls.n	8005eb0 <_svfiprintf_r+0x1a8>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0c5      	beq.n	8005e38 <_svfiprintf_r+0x130>
 8005eac:	9105      	str	r1, [sp, #20]
 8005eae:	e7c3      	b.n	8005e38 <_svfiprintf_r+0x130>
 8005eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e7f0      	b.n	8005e9c <_svfiprintf_r+0x194>
 8005eba:	ab03      	add	r3, sp, #12
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	462a      	mov	r2, r5
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <_svfiprintf_r+0x1f8>)
 8005ec2:	a904      	add	r1, sp, #16
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f3af 8000 	nop.w
 8005eca:	1c42      	adds	r2, r0, #1
 8005ecc:	4606      	mov	r6, r0
 8005ece:	d1d6      	bne.n	8005e7e <_svfiprintf_r+0x176>
 8005ed0:	89ab      	ldrh	r3, [r5, #12]
 8005ed2:	065b      	lsls	r3, r3, #25
 8005ed4:	f53f af2c 	bmi.w	8005d30 <_svfiprintf_r+0x28>
 8005ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eda:	b01d      	add	sp, #116	; 0x74
 8005edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee0:	ab03      	add	r3, sp, #12
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <_svfiprintf_r+0x1f8>)
 8005ee8:	a904      	add	r1, sp, #16
 8005eea:	4638      	mov	r0, r7
 8005eec:	f000 f9d4 	bl	8006298 <_printf_i>
 8005ef0:	e7eb      	b.n	8005eca <_svfiprintf_r+0x1c2>
 8005ef2:	bf00      	nop
 8005ef4:	08006ca8 	.word	0x08006ca8
 8005ef8:	08006cb2 	.word	0x08006cb2
 8005efc:	00000000 	.word	0x00000000
 8005f00:	08005c51 	.word	0x08005c51
 8005f04:	08006cae 	.word	0x08006cae

08005f08 <__sfputc_r>:
 8005f08:	6893      	ldr	r3, [r2, #8]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	b410      	push	{r4}
 8005f10:	6093      	str	r3, [r2, #8]
 8005f12:	da08      	bge.n	8005f26 <__sfputc_r+0x1e>
 8005f14:	6994      	ldr	r4, [r2, #24]
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	db01      	blt.n	8005f1e <__sfputc_r+0x16>
 8005f1a:	290a      	cmp	r1, #10
 8005f1c:	d103      	bne.n	8005f26 <__sfputc_r+0x1e>
 8005f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f22:	f000 bb33 	b.w	800658c <__swbuf_r>
 8005f26:	6813      	ldr	r3, [r2, #0]
 8005f28:	1c58      	adds	r0, r3, #1
 8005f2a:	6010      	str	r0, [r2, #0]
 8005f2c:	7019      	strb	r1, [r3, #0]
 8005f2e:	4608      	mov	r0, r1
 8005f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <__sfputs_r>:
 8005f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f38:	4606      	mov	r6, r0
 8005f3a:	460f      	mov	r7, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	18d5      	adds	r5, r2, r3
 8005f40:	42ac      	cmp	r4, r5
 8005f42:	d101      	bne.n	8005f48 <__sfputs_r+0x12>
 8005f44:	2000      	movs	r0, #0
 8005f46:	e007      	b.n	8005f58 <__sfputs_r+0x22>
 8005f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4c:	463a      	mov	r2, r7
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff ffda 	bl	8005f08 <__sfputc_r>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d1f3      	bne.n	8005f40 <__sfputs_r+0xa>
 8005f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f5c <_vfiprintf_r>:
 8005f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	460d      	mov	r5, r1
 8005f62:	b09d      	sub	sp, #116	; 0x74
 8005f64:	4614      	mov	r4, r2
 8005f66:	4698      	mov	r8, r3
 8005f68:	4606      	mov	r6, r0
 8005f6a:	b118      	cbz	r0, 8005f74 <_vfiprintf_r+0x18>
 8005f6c:	6983      	ldr	r3, [r0, #24]
 8005f6e:	b90b      	cbnz	r3, 8005f74 <_vfiprintf_r+0x18>
 8005f70:	f7ff fd3a 	bl	80059e8 <__sinit>
 8005f74:	4b89      	ldr	r3, [pc, #548]	; (800619c <_vfiprintf_r+0x240>)
 8005f76:	429d      	cmp	r5, r3
 8005f78:	d11b      	bne.n	8005fb2 <_vfiprintf_r+0x56>
 8005f7a:	6875      	ldr	r5, [r6, #4]
 8005f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f7e:	07d9      	lsls	r1, r3, #31
 8005f80:	d405      	bmi.n	8005f8e <_vfiprintf_r+0x32>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	059a      	lsls	r2, r3, #22
 8005f86:	d402      	bmi.n	8005f8e <_vfiprintf_r+0x32>
 8005f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f8a:	f7ff fdcb 	bl	8005b24 <__retarget_lock_acquire_recursive>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	071b      	lsls	r3, r3, #28
 8005f92:	d501      	bpl.n	8005f98 <_vfiprintf_r+0x3c>
 8005f94:	692b      	ldr	r3, [r5, #16]
 8005f96:	b9eb      	cbnz	r3, 8005fd4 <_vfiprintf_r+0x78>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f000 fb5a 	bl	8006654 <__swsetup_r>
 8005fa0:	b1c0      	cbz	r0, 8005fd4 <_vfiprintf_r+0x78>
 8005fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fa4:	07dc      	lsls	r4, r3, #31
 8005fa6:	d50e      	bpl.n	8005fc6 <_vfiprintf_r+0x6a>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	b01d      	add	sp, #116	; 0x74
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	4b7b      	ldr	r3, [pc, #492]	; (80061a0 <_vfiprintf_r+0x244>)
 8005fb4:	429d      	cmp	r5, r3
 8005fb6:	d101      	bne.n	8005fbc <_vfiprintf_r+0x60>
 8005fb8:	68b5      	ldr	r5, [r6, #8]
 8005fba:	e7df      	b.n	8005f7c <_vfiprintf_r+0x20>
 8005fbc:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <_vfiprintf_r+0x248>)
 8005fbe:	429d      	cmp	r5, r3
 8005fc0:	bf08      	it	eq
 8005fc2:	68f5      	ldreq	r5, [r6, #12]
 8005fc4:	e7da      	b.n	8005f7c <_vfiprintf_r+0x20>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	0598      	lsls	r0, r3, #22
 8005fca:	d4ed      	bmi.n	8005fa8 <_vfiprintf_r+0x4c>
 8005fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fce:	f7ff fdaa 	bl	8005b26 <__retarget_lock_release_recursive>
 8005fd2:	e7e9      	b.n	8005fa8 <_vfiprintf_r+0x4c>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fe2:	2330      	movs	r3, #48	; 0x30
 8005fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80061a8 <_vfiprintf_r+0x24c>
 8005fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fec:	f04f 0901 	mov.w	r9, #1
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	469a      	mov	sl, r3
 8005ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ff8:	b10a      	cbz	r2, 8005ffe <_vfiprintf_r+0xa2>
 8005ffa:	2a25      	cmp	r2, #37	; 0x25
 8005ffc:	d1f9      	bne.n	8005ff2 <_vfiprintf_r+0x96>
 8005ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8006002:	d00b      	beq.n	800601c <_vfiprintf_r+0xc0>
 8006004:	465b      	mov	r3, fp
 8006006:	4622      	mov	r2, r4
 8006008:	4629      	mov	r1, r5
 800600a:	4630      	mov	r0, r6
 800600c:	f7ff ff93 	bl	8005f36 <__sfputs_r>
 8006010:	3001      	adds	r0, #1
 8006012:	f000 80aa 	beq.w	800616a <_vfiprintf_r+0x20e>
 8006016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006018:	445a      	add	r2, fp
 800601a:	9209      	str	r2, [sp, #36]	; 0x24
 800601c:	f89a 3000 	ldrb.w	r3, [sl]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80a2 	beq.w	800616a <_vfiprintf_r+0x20e>
 8006026:	2300      	movs	r3, #0
 8006028:	f04f 32ff 	mov.w	r2, #4294967295
 800602c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006030:	f10a 0a01 	add.w	sl, sl, #1
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	9307      	str	r3, [sp, #28]
 8006038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800603c:	931a      	str	r3, [sp, #104]	; 0x68
 800603e:	4654      	mov	r4, sl
 8006040:	2205      	movs	r2, #5
 8006042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006046:	4858      	ldr	r0, [pc, #352]	; (80061a8 <_vfiprintf_r+0x24c>)
 8006048:	f7fa f8da 	bl	8000200 <memchr>
 800604c:	9a04      	ldr	r2, [sp, #16]
 800604e:	b9d8      	cbnz	r0, 8006088 <_vfiprintf_r+0x12c>
 8006050:	06d1      	lsls	r1, r2, #27
 8006052:	bf44      	itt	mi
 8006054:	2320      	movmi	r3, #32
 8006056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800605a:	0713      	lsls	r3, r2, #28
 800605c:	bf44      	itt	mi
 800605e:	232b      	movmi	r3, #43	; 0x2b
 8006060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006064:	f89a 3000 	ldrb.w	r3, [sl]
 8006068:	2b2a      	cmp	r3, #42	; 0x2a
 800606a:	d015      	beq.n	8006098 <_vfiprintf_r+0x13c>
 800606c:	9a07      	ldr	r2, [sp, #28]
 800606e:	4654      	mov	r4, sl
 8006070:	2000      	movs	r0, #0
 8006072:	f04f 0c0a 	mov.w	ip, #10
 8006076:	4621      	mov	r1, r4
 8006078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800607c:	3b30      	subs	r3, #48	; 0x30
 800607e:	2b09      	cmp	r3, #9
 8006080:	d94e      	bls.n	8006120 <_vfiprintf_r+0x1c4>
 8006082:	b1b0      	cbz	r0, 80060b2 <_vfiprintf_r+0x156>
 8006084:	9207      	str	r2, [sp, #28]
 8006086:	e014      	b.n	80060b2 <_vfiprintf_r+0x156>
 8006088:	eba0 0308 	sub.w	r3, r0, r8
 800608c:	fa09 f303 	lsl.w	r3, r9, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	9304      	str	r3, [sp, #16]
 8006094:	46a2      	mov	sl, r4
 8006096:	e7d2      	b.n	800603e <_vfiprintf_r+0xe2>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	1d19      	adds	r1, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	9103      	str	r1, [sp, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bfbb      	ittet	lt
 80060a4:	425b      	neglt	r3, r3
 80060a6:	f042 0202 	orrlt.w	r2, r2, #2
 80060aa:	9307      	strge	r3, [sp, #28]
 80060ac:	9307      	strlt	r3, [sp, #28]
 80060ae:	bfb8      	it	lt
 80060b0:	9204      	strlt	r2, [sp, #16]
 80060b2:	7823      	ldrb	r3, [r4, #0]
 80060b4:	2b2e      	cmp	r3, #46	; 0x2e
 80060b6:	d10c      	bne.n	80060d2 <_vfiprintf_r+0x176>
 80060b8:	7863      	ldrb	r3, [r4, #1]
 80060ba:	2b2a      	cmp	r3, #42	; 0x2a
 80060bc:	d135      	bne.n	800612a <_vfiprintf_r+0x1ce>
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	9203      	str	r2, [sp, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfb8      	it	lt
 80060ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80060ce:	3402      	adds	r4, #2
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80061b8 <_vfiprintf_r+0x25c>
 80060d6:	7821      	ldrb	r1, [r4, #0]
 80060d8:	2203      	movs	r2, #3
 80060da:	4650      	mov	r0, sl
 80060dc:	f7fa f890 	bl	8000200 <memchr>
 80060e0:	b140      	cbz	r0, 80060f4 <_vfiprintf_r+0x198>
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	eba0 000a 	sub.w	r0, r0, sl
 80060e8:	fa03 f000 	lsl.w	r0, r3, r0
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	4303      	orrs	r3, r0
 80060f0:	3401      	adds	r4, #1
 80060f2:	9304      	str	r3, [sp, #16]
 80060f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f8:	482c      	ldr	r0, [pc, #176]	; (80061ac <_vfiprintf_r+0x250>)
 80060fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060fe:	2206      	movs	r2, #6
 8006100:	f7fa f87e 	bl	8000200 <memchr>
 8006104:	2800      	cmp	r0, #0
 8006106:	d03f      	beq.n	8006188 <_vfiprintf_r+0x22c>
 8006108:	4b29      	ldr	r3, [pc, #164]	; (80061b0 <_vfiprintf_r+0x254>)
 800610a:	bb1b      	cbnz	r3, 8006154 <_vfiprintf_r+0x1f8>
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	3307      	adds	r3, #7
 8006110:	f023 0307 	bic.w	r3, r3, #7
 8006114:	3308      	adds	r3, #8
 8006116:	9303      	str	r3, [sp, #12]
 8006118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611a:	443b      	add	r3, r7
 800611c:	9309      	str	r3, [sp, #36]	; 0x24
 800611e:	e767      	b.n	8005ff0 <_vfiprintf_r+0x94>
 8006120:	fb0c 3202 	mla	r2, ip, r2, r3
 8006124:	460c      	mov	r4, r1
 8006126:	2001      	movs	r0, #1
 8006128:	e7a5      	b.n	8006076 <_vfiprintf_r+0x11a>
 800612a:	2300      	movs	r3, #0
 800612c:	3401      	adds	r4, #1
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	4619      	mov	r1, r3
 8006132:	f04f 0c0a 	mov.w	ip, #10
 8006136:	4620      	mov	r0, r4
 8006138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800613c:	3a30      	subs	r2, #48	; 0x30
 800613e:	2a09      	cmp	r2, #9
 8006140:	d903      	bls.n	800614a <_vfiprintf_r+0x1ee>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0c5      	beq.n	80060d2 <_vfiprintf_r+0x176>
 8006146:	9105      	str	r1, [sp, #20]
 8006148:	e7c3      	b.n	80060d2 <_vfiprintf_r+0x176>
 800614a:	fb0c 2101 	mla	r1, ip, r1, r2
 800614e:	4604      	mov	r4, r0
 8006150:	2301      	movs	r3, #1
 8006152:	e7f0      	b.n	8006136 <_vfiprintf_r+0x1da>
 8006154:	ab03      	add	r3, sp, #12
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	462a      	mov	r2, r5
 800615a:	4b16      	ldr	r3, [pc, #88]	; (80061b4 <_vfiprintf_r+0x258>)
 800615c:	a904      	add	r1, sp, #16
 800615e:	4630      	mov	r0, r6
 8006160:	f3af 8000 	nop.w
 8006164:	4607      	mov	r7, r0
 8006166:	1c78      	adds	r0, r7, #1
 8006168:	d1d6      	bne.n	8006118 <_vfiprintf_r+0x1bc>
 800616a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800616c:	07d9      	lsls	r1, r3, #31
 800616e:	d405      	bmi.n	800617c <_vfiprintf_r+0x220>
 8006170:	89ab      	ldrh	r3, [r5, #12]
 8006172:	059a      	lsls	r2, r3, #22
 8006174:	d402      	bmi.n	800617c <_vfiprintf_r+0x220>
 8006176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006178:	f7ff fcd5 	bl	8005b26 <__retarget_lock_release_recursive>
 800617c:	89ab      	ldrh	r3, [r5, #12]
 800617e:	065b      	lsls	r3, r3, #25
 8006180:	f53f af12 	bmi.w	8005fa8 <_vfiprintf_r+0x4c>
 8006184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006186:	e711      	b.n	8005fac <_vfiprintf_r+0x50>
 8006188:	ab03      	add	r3, sp, #12
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	462a      	mov	r2, r5
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <_vfiprintf_r+0x258>)
 8006190:	a904      	add	r1, sp, #16
 8006192:	4630      	mov	r0, r6
 8006194:	f000 f880 	bl	8006298 <_printf_i>
 8006198:	e7e4      	b.n	8006164 <_vfiprintf_r+0x208>
 800619a:	bf00      	nop
 800619c:	08006c68 	.word	0x08006c68
 80061a0:	08006c88 	.word	0x08006c88
 80061a4:	08006c48 	.word	0x08006c48
 80061a8:	08006ca8 	.word	0x08006ca8
 80061ac:	08006cb2 	.word	0x08006cb2
 80061b0:	00000000 	.word	0x00000000
 80061b4:	08005f37 	.word	0x08005f37
 80061b8:	08006cae 	.word	0x08006cae

080061bc <_printf_common>:
 80061bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	4616      	mov	r6, r2
 80061c2:	4699      	mov	r9, r3
 80061c4:	688a      	ldr	r2, [r1, #8]
 80061c6:	690b      	ldr	r3, [r1, #16]
 80061c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bfb8      	it	lt
 80061d0:	4613      	movlt	r3, r2
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061d8:	4607      	mov	r7, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	b10a      	cbz	r2, 80061e2 <_printf_common+0x26>
 80061de:	3301      	adds	r3, #1
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	0699      	lsls	r1, r3, #26
 80061e6:	bf42      	ittt	mi
 80061e8:	6833      	ldrmi	r3, [r6, #0]
 80061ea:	3302      	addmi	r3, #2
 80061ec:	6033      	strmi	r3, [r6, #0]
 80061ee:	6825      	ldr	r5, [r4, #0]
 80061f0:	f015 0506 	ands.w	r5, r5, #6
 80061f4:	d106      	bne.n	8006204 <_printf_common+0x48>
 80061f6:	f104 0a19 	add.w	sl, r4, #25
 80061fa:	68e3      	ldr	r3, [r4, #12]
 80061fc:	6832      	ldr	r2, [r6, #0]
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	42ab      	cmp	r3, r5
 8006202:	dc26      	bgt.n	8006252 <_printf_common+0x96>
 8006204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006208:	1e13      	subs	r3, r2, #0
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	bf18      	it	ne
 800620e:	2301      	movne	r3, #1
 8006210:	0692      	lsls	r2, r2, #26
 8006212:	d42b      	bmi.n	800626c <_printf_common+0xb0>
 8006214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006218:	4649      	mov	r1, r9
 800621a:	4638      	mov	r0, r7
 800621c:	47c0      	blx	r8
 800621e:	3001      	adds	r0, #1
 8006220:	d01e      	beq.n	8006260 <_printf_common+0xa4>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	68e5      	ldr	r5, [r4, #12]
 8006226:	6832      	ldr	r2, [r6, #0]
 8006228:	f003 0306 	and.w	r3, r3, #6
 800622c:	2b04      	cmp	r3, #4
 800622e:	bf08      	it	eq
 8006230:	1aad      	subeq	r5, r5, r2
 8006232:	68a3      	ldr	r3, [r4, #8]
 8006234:	6922      	ldr	r2, [r4, #16]
 8006236:	bf0c      	ite	eq
 8006238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800623c:	2500      	movne	r5, #0
 800623e:	4293      	cmp	r3, r2
 8006240:	bfc4      	itt	gt
 8006242:	1a9b      	subgt	r3, r3, r2
 8006244:	18ed      	addgt	r5, r5, r3
 8006246:	2600      	movs	r6, #0
 8006248:	341a      	adds	r4, #26
 800624a:	42b5      	cmp	r5, r6
 800624c:	d11a      	bne.n	8006284 <_printf_common+0xc8>
 800624e:	2000      	movs	r0, #0
 8006250:	e008      	b.n	8006264 <_printf_common+0xa8>
 8006252:	2301      	movs	r3, #1
 8006254:	4652      	mov	r2, sl
 8006256:	4649      	mov	r1, r9
 8006258:	4638      	mov	r0, r7
 800625a:	47c0      	blx	r8
 800625c:	3001      	adds	r0, #1
 800625e:	d103      	bne.n	8006268 <_printf_common+0xac>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006268:	3501      	adds	r5, #1
 800626a:	e7c6      	b.n	80061fa <_printf_common+0x3e>
 800626c:	18e1      	adds	r1, r4, r3
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	2030      	movs	r0, #48	; 0x30
 8006272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006276:	4422      	add	r2, r4
 8006278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800627c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006280:	3302      	adds	r3, #2
 8006282:	e7c7      	b.n	8006214 <_printf_common+0x58>
 8006284:	2301      	movs	r3, #1
 8006286:	4622      	mov	r2, r4
 8006288:	4649      	mov	r1, r9
 800628a:	4638      	mov	r0, r7
 800628c:	47c0      	blx	r8
 800628e:	3001      	adds	r0, #1
 8006290:	d0e6      	beq.n	8006260 <_printf_common+0xa4>
 8006292:	3601      	adds	r6, #1
 8006294:	e7d9      	b.n	800624a <_printf_common+0x8e>
	...

08006298 <_printf_i>:
 8006298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800629c:	7e0f      	ldrb	r7, [r1, #24]
 800629e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a0:	2f78      	cmp	r7, #120	; 0x78
 80062a2:	4691      	mov	r9, r2
 80062a4:	4680      	mov	r8, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	469a      	mov	sl, r3
 80062aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ae:	d807      	bhi.n	80062c0 <_printf_i+0x28>
 80062b0:	2f62      	cmp	r7, #98	; 0x62
 80062b2:	d80a      	bhi.n	80062ca <_printf_i+0x32>
 80062b4:	2f00      	cmp	r7, #0
 80062b6:	f000 80d8 	beq.w	800646a <_printf_i+0x1d2>
 80062ba:	2f58      	cmp	r7, #88	; 0x58
 80062bc:	f000 80a3 	beq.w	8006406 <_printf_i+0x16e>
 80062c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062c8:	e03a      	b.n	8006340 <_printf_i+0xa8>
 80062ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ce:	2b15      	cmp	r3, #21
 80062d0:	d8f6      	bhi.n	80062c0 <_printf_i+0x28>
 80062d2:	a101      	add	r1, pc, #4	; (adr r1, 80062d8 <_printf_i+0x40>)
 80062d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d8:	08006331 	.word	0x08006331
 80062dc:	08006345 	.word	0x08006345
 80062e0:	080062c1 	.word	0x080062c1
 80062e4:	080062c1 	.word	0x080062c1
 80062e8:	080062c1 	.word	0x080062c1
 80062ec:	080062c1 	.word	0x080062c1
 80062f0:	08006345 	.word	0x08006345
 80062f4:	080062c1 	.word	0x080062c1
 80062f8:	080062c1 	.word	0x080062c1
 80062fc:	080062c1 	.word	0x080062c1
 8006300:	080062c1 	.word	0x080062c1
 8006304:	08006451 	.word	0x08006451
 8006308:	08006375 	.word	0x08006375
 800630c:	08006433 	.word	0x08006433
 8006310:	080062c1 	.word	0x080062c1
 8006314:	080062c1 	.word	0x080062c1
 8006318:	08006473 	.word	0x08006473
 800631c:	080062c1 	.word	0x080062c1
 8006320:	08006375 	.word	0x08006375
 8006324:	080062c1 	.word	0x080062c1
 8006328:	080062c1 	.word	0x080062c1
 800632c:	0800643b 	.word	0x0800643b
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	602a      	str	r2, [r5, #0]
 8006338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800633c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006340:	2301      	movs	r3, #1
 8006342:	e0a3      	b.n	800648c <_printf_i+0x1f4>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	6829      	ldr	r1, [r5, #0]
 8006348:	0606      	lsls	r6, r0, #24
 800634a:	f101 0304 	add.w	r3, r1, #4
 800634e:	d50a      	bpl.n	8006366 <_printf_i+0xce>
 8006350:	680e      	ldr	r6, [r1, #0]
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	2e00      	cmp	r6, #0
 8006356:	da03      	bge.n	8006360 <_printf_i+0xc8>
 8006358:	232d      	movs	r3, #45	; 0x2d
 800635a:	4276      	negs	r6, r6
 800635c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006360:	485e      	ldr	r0, [pc, #376]	; (80064dc <_printf_i+0x244>)
 8006362:	230a      	movs	r3, #10
 8006364:	e019      	b.n	800639a <_printf_i+0x102>
 8006366:	680e      	ldr	r6, [r1, #0]
 8006368:	602b      	str	r3, [r5, #0]
 800636a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800636e:	bf18      	it	ne
 8006370:	b236      	sxthne	r6, r6
 8006372:	e7ef      	b.n	8006354 <_printf_i+0xbc>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	6820      	ldr	r0, [r4, #0]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	6029      	str	r1, [r5, #0]
 800637c:	0601      	lsls	r1, r0, #24
 800637e:	d501      	bpl.n	8006384 <_printf_i+0xec>
 8006380:	681e      	ldr	r6, [r3, #0]
 8006382:	e002      	b.n	800638a <_printf_i+0xf2>
 8006384:	0646      	lsls	r6, r0, #25
 8006386:	d5fb      	bpl.n	8006380 <_printf_i+0xe8>
 8006388:	881e      	ldrh	r6, [r3, #0]
 800638a:	4854      	ldr	r0, [pc, #336]	; (80064dc <_printf_i+0x244>)
 800638c:	2f6f      	cmp	r7, #111	; 0x6f
 800638e:	bf0c      	ite	eq
 8006390:	2308      	moveq	r3, #8
 8006392:	230a      	movne	r3, #10
 8006394:	2100      	movs	r1, #0
 8006396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639a:	6865      	ldr	r5, [r4, #4]
 800639c:	60a5      	str	r5, [r4, #8]
 800639e:	2d00      	cmp	r5, #0
 80063a0:	bfa2      	ittt	ge
 80063a2:	6821      	ldrge	r1, [r4, #0]
 80063a4:	f021 0104 	bicge.w	r1, r1, #4
 80063a8:	6021      	strge	r1, [r4, #0]
 80063aa:	b90e      	cbnz	r6, 80063b0 <_printf_i+0x118>
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	d04d      	beq.n	800644c <_printf_i+0x1b4>
 80063b0:	4615      	mov	r5, r2
 80063b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063b6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ba:	5dc7      	ldrb	r7, [r0, r7]
 80063bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c0:	4637      	mov	r7, r6
 80063c2:	42bb      	cmp	r3, r7
 80063c4:	460e      	mov	r6, r1
 80063c6:	d9f4      	bls.n	80063b2 <_printf_i+0x11a>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10b      	bne.n	80063e4 <_printf_i+0x14c>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07de      	lsls	r6, r3, #31
 80063d0:	d508      	bpl.n	80063e4 <_printf_i+0x14c>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4299      	cmp	r1, r3
 80063d8:	bfde      	ittt	le
 80063da:	2330      	movle	r3, #48	; 0x30
 80063dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063e4:	1b52      	subs	r2, r2, r5
 80063e6:	6122      	str	r2, [r4, #16]
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	464b      	mov	r3, r9
 80063ee:	aa03      	add	r2, sp, #12
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fee2 	bl	80061bc <_printf_common>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d14c      	bne.n	8006496 <_printf_i+0x1fe>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	b004      	add	sp, #16
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	4835      	ldr	r0, [pc, #212]	; (80064dc <_printf_i+0x244>)
 8006408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800640c:	6829      	ldr	r1, [r5, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	f851 6b04 	ldr.w	r6, [r1], #4
 8006414:	6029      	str	r1, [r5, #0]
 8006416:	061d      	lsls	r5, r3, #24
 8006418:	d514      	bpl.n	8006444 <_printf_i+0x1ac>
 800641a:	07df      	lsls	r7, r3, #31
 800641c:	bf44      	itt	mi
 800641e:	f043 0320 	orrmi.w	r3, r3, #32
 8006422:	6023      	strmi	r3, [r4, #0]
 8006424:	b91e      	cbnz	r6, 800642e <_printf_i+0x196>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	f023 0320 	bic.w	r3, r3, #32
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	2310      	movs	r3, #16
 8006430:	e7b0      	b.n	8006394 <_printf_i+0xfc>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f043 0320 	orr.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	2378      	movs	r3, #120	; 0x78
 800643c:	4828      	ldr	r0, [pc, #160]	; (80064e0 <_printf_i+0x248>)
 800643e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006442:	e7e3      	b.n	800640c <_printf_i+0x174>
 8006444:	0659      	lsls	r1, r3, #25
 8006446:	bf48      	it	mi
 8006448:	b2b6      	uxthmi	r6, r6
 800644a:	e7e6      	b.n	800641a <_printf_i+0x182>
 800644c:	4615      	mov	r5, r2
 800644e:	e7bb      	b.n	80063c8 <_printf_i+0x130>
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	6826      	ldr	r6, [r4, #0]
 8006454:	6961      	ldr	r1, [r4, #20]
 8006456:	1d18      	adds	r0, r3, #4
 8006458:	6028      	str	r0, [r5, #0]
 800645a:	0635      	lsls	r5, r6, #24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	d501      	bpl.n	8006464 <_printf_i+0x1cc>
 8006460:	6019      	str	r1, [r3, #0]
 8006462:	e002      	b.n	800646a <_printf_i+0x1d2>
 8006464:	0670      	lsls	r0, r6, #25
 8006466:	d5fb      	bpl.n	8006460 <_printf_i+0x1c8>
 8006468:	8019      	strh	r1, [r3, #0]
 800646a:	2300      	movs	r3, #0
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	4615      	mov	r5, r2
 8006470:	e7ba      	b.n	80063e8 <_printf_i+0x150>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	602a      	str	r2, [r5, #0]
 8006478:	681d      	ldr	r5, [r3, #0]
 800647a:	6862      	ldr	r2, [r4, #4]
 800647c:	2100      	movs	r1, #0
 800647e:	4628      	mov	r0, r5
 8006480:	f7f9 febe 	bl	8000200 <memchr>
 8006484:	b108      	cbz	r0, 800648a <_printf_i+0x1f2>
 8006486:	1b40      	subs	r0, r0, r5
 8006488:	6060      	str	r0, [r4, #4]
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	2300      	movs	r3, #0
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006494:	e7a8      	b.n	80063e8 <_printf_i+0x150>
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	462a      	mov	r2, r5
 800649a:	4649      	mov	r1, r9
 800649c:	4640      	mov	r0, r8
 800649e:	47d0      	blx	sl
 80064a0:	3001      	adds	r0, #1
 80064a2:	d0ab      	beq.n	80063fc <_printf_i+0x164>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	079b      	lsls	r3, r3, #30
 80064a8:	d413      	bmi.n	80064d2 <_printf_i+0x23a>
 80064aa:	68e0      	ldr	r0, [r4, #12]
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	4298      	cmp	r0, r3
 80064b0:	bfb8      	it	lt
 80064b2:	4618      	movlt	r0, r3
 80064b4:	e7a4      	b.n	8006400 <_printf_i+0x168>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4632      	mov	r2, r6
 80064ba:	4649      	mov	r1, r9
 80064bc:	4640      	mov	r0, r8
 80064be:	47d0      	blx	sl
 80064c0:	3001      	adds	r0, #1
 80064c2:	d09b      	beq.n	80063fc <_printf_i+0x164>
 80064c4:	3501      	adds	r5, #1
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	9903      	ldr	r1, [sp, #12]
 80064ca:	1a5b      	subs	r3, r3, r1
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dcf2      	bgt.n	80064b6 <_printf_i+0x21e>
 80064d0:	e7eb      	b.n	80064aa <_printf_i+0x212>
 80064d2:	2500      	movs	r5, #0
 80064d4:	f104 0619 	add.w	r6, r4, #25
 80064d8:	e7f5      	b.n	80064c6 <_printf_i+0x22e>
 80064da:	bf00      	nop
 80064dc:	08006cb9 	.word	0x08006cb9
 80064e0:	08006cca 	.word	0x08006cca

080064e4 <_sbrk_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d06      	ldr	r5, [pc, #24]	; (8006500 <_sbrk_r+0x1c>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4604      	mov	r4, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	602b      	str	r3, [r5, #0]
 80064f0:	f7fb fb9a 	bl	8001c28 <_sbrk>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_sbrk_r+0x1a>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_sbrk_r+0x1a>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	200001f4 	.word	0x200001f4

08006504 <__sread>:
 8006504:	b510      	push	{r4, lr}
 8006506:	460c      	mov	r4, r1
 8006508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650c:	f000 fb0a 	bl	8006b24 <_read_r>
 8006510:	2800      	cmp	r0, #0
 8006512:	bfab      	itete	ge
 8006514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006516:	89a3      	ldrhlt	r3, [r4, #12]
 8006518:	181b      	addge	r3, r3, r0
 800651a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800651e:	bfac      	ite	ge
 8006520:	6563      	strge	r3, [r4, #84]	; 0x54
 8006522:	81a3      	strhlt	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__swrite>:
 8006526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	461f      	mov	r7, r3
 800652c:	898b      	ldrh	r3, [r1, #12]
 800652e:	05db      	lsls	r3, r3, #23
 8006530:	4605      	mov	r5, r0
 8006532:	460c      	mov	r4, r1
 8006534:	4616      	mov	r6, r2
 8006536:	d505      	bpl.n	8006544 <__swrite+0x1e>
 8006538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800653c:	2302      	movs	r3, #2
 800653e:	2200      	movs	r2, #0
 8006540:	f000 f9c8 	bl	80068d4 <_lseek_r>
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800654a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	4632      	mov	r2, r6
 8006552:	463b      	mov	r3, r7
 8006554:	4628      	mov	r0, r5
 8006556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800655a:	f000 b869 	b.w	8006630 <_write_r>

0800655e <__sseek>:
 800655e:	b510      	push	{r4, lr}
 8006560:	460c      	mov	r4, r1
 8006562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006566:	f000 f9b5 	bl	80068d4 <_lseek_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	bf15      	itete	ne
 8006570:	6560      	strne	r0, [r4, #84]	; 0x54
 8006572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800657a:	81a3      	strheq	r3, [r4, #12]
 800657c:	bf18      	it	ne
 800657e:	81a3      	strhne	r3, [r4, #12]
 8006580:	bd10      	pop	{r4, pc}

08006582 <__sclose>:
 8006582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006586:	f000 b8d3 	b.w	8006730 <_close_r>
	...

0800658c <__swbuf_r>:
 800658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658e:	460e      	mov	r6, r1
 8006590:	4614      	mov	r4, r2
 8006592:	4605      	mov	r5, r0
 8006594:	b118      	cbz	r0, 800659e <__swbuf_r+0x12>
 8006596:	6983      	ldr	r3, [r0, #24]
 8006598:	b90b      	cbnz	r3, 800659e <__swbuf_r+0x12>
 800659a:	f7ff fa25 	bl	80059e8 <__sinit>
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <__swbuf_r+0x98>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d12b      	bne.n	80065fc <__swbuf_r+0x70>
 80065a4:	686c      	ldr	r4, [r5, #4]
 80065a6:	69a3      	ldr	r3, [r4, #24]
 80065a8:	60a3      	str	r3, [r4, #8]
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	071a      	lsls	r2, r3, #28
 80065ae:	d52f      	bpl.n	8006610 <__swbuf_r+0x84>
 80065b0:	6923      	ldr	r3, [r4, #16]
 80065b2:	b36b      	cbz	r3, 8006610 <__swbuf_r+0x84>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	1ac0      	subs	r0, r0, r3
 80065ba:	6963      	ldr	r3, [r4, #20]
 80065bc:	b2f6      	uxtb	r6, r6
 80065be:	4283      	cmp	r3, r0
 80065c0:	4637      	mov	r7, r6
 80065c2:	dc04      	bgt.n	80065ce <__swbuf_r+0x42>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f948 	bl	800685c <_fflush_r>
 80065cc:	bb30      	cbnz	r0, 800661c <__swbuf_r+0x90>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	60a3      	str	r3, [r4, #8]
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	6022      	str	r2, [r4, #0]
 80065da:	701e      	strb	r6, [r3, #0]
 80065dc:	6963      	ldr	r3, [r4, #20]
 80065de:	3001      	adds	r0, #1
 80065e0:	4283      	cmp	r3, r0
 80065e2:	d004      	beq.n	80065ee <__swbuf_r+0x62>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	07db      	lsls	r3, r3, #31
 80065e8:	d506      	bpl.n	80065f8 <__swbuf_r+0x6c>
 80065ea:	2e0a      	cmp	r6, #10
 80065ec:	d104      	bne.n	80065f8 <__swbuf_r+0x6c>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f933 	bl	800685c <_fflush_r>
 80065f6:	b988      	cbnz	r0, 800661c <__swbuf_r+0x90>
 80065f8:	4638      	mov	r0, r7
 80065fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <__swbuf_r+0x9c>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <__swbuf_r+0x7a>
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	e7cf      	b.n	80065a6 <__swbuf_r+0x1a>
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <__swbuf_r+0xa0>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68ec      	ldreq	r4, [r5, #12]
 800660e:	e7ca      	b.n	80065a6 <__swbuf_r+0x1a>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f81e 	bl	8006654 <__swsetup_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0cb      	beq.n	80065b4 <__swbuf_r+0x28>
 800661c:	f04f 37ff 	mov.w	r7, #4294967295
 8006620:	e7ea      	b.n	80065f8 <__swbuf_r+0x6c>
 8006622:	bf00      	nop
 8006624:	08006c68 	.word	0x08006c68
 8006628:	08006c88 	.word	0x08006c88
 800662c:	08006c48 	.word	0x08006c48

08006630 <_write_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	; (8006650 <_write_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fb faa1 	bl	8001b86 <_write>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_write_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_write_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	200001f4 	.word	0x200001f4

08006654 <__swsetup_r>:
 8006654:	4b32      	ldr	r3, [pc, #200]	; (8006720 <__swsetup_r+0xcc>)
 8006656:	b570      	push	{r4, r5, r6, lr}
 8006658:	681d      	ldr	r5, [r3, #0]
 800665a:	4606      	mov	r6, r0
 800665c:	460c      	mov	r4, r1
 800665e:	b125      	cbz	r5, 800666a <__swsetup_r+0x16>
 8006660:	69ab      	ldr	r3, [r5, #24]
 8006662:	b913      	cbnz	r3, 800666a <__swsetup_r+0x16>
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff f9bf 	bl	80059e8 <__sinit>
 800666a:	4b2e      	ldr	r3, [pc, #184]	; (8006724 <__swsetup_r+0xd0>)
 800666c:	429c      	cmp	r4, r3
 800666e:	d10f      	bne.n	8006690 <__swsetup_r+0x3c>
 8006670:	686c      	ldr	r4, [r5, #4]
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006678:	0719      	lsls	r1, r3, #28
 800667a:	d42c      	bmi.n	80066d6 <__swsetup_r+0x82>
 800667c:	06dd      	lsls	r5, r3, #27
 800667e:	d411      	bmi.n	80066a4 <__swsetup_r+0x50>
 8006680:	2309      	movs	r3, #9
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	e03e      	b.n	800670e <__swsetup_r+0xba>
 8006690:	4b25      	ldr	r3, [pc, #148]	; (8006728 <__swsetup_r+0xd4>)
 8006692:	429c      	cmp	r4, r3
 8006694:	d101      	bne.n	800669a <__swsetup_r+0x46>
 8006696:	68ac      	ldr	r4, [r5, #8]
 8006698:	e7eb      	b.n	8006672 <__swsetup_r+0x1e>
 800669a:	4b24      	ldr	r3, [pc, #144]	; (800672c <__swsetup_r+0xd8>)
 800669c:	429c      	cmp	r4, r3
 800669e:	bf08      	it	eq
 80066a0:	68ec      	ldreq	r4, [r5, #12]
 80066a2:	e7e6      	b.n	8006672 <__swsetup_r+0x1e>
 80066a4:	0758      	lsls	r0, r3, #29
 80066a6:	d512      	bpl.n	80066ce <__swsetup_r+0x7a>
 80066a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066aa:	b141      	cbz	r1, 80066be <__swsetup_r+0x6a>
 80066ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b0:	4299      	cmp	r1, r3
 80066b2:	d002      	beq.n	80066ba <__swsetup_r+0x66>
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 f9b9 	bl	8006a2c <_free_r>
 80066ba:	2300      	movs	r3, #0
 80066bc:	6363      	str	r3, [r4, #52]	; 0x34
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	2300      	movs	r3, #0
 80066c8:	6063      	str	r3, [r4, #4]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f043 0308 	orr.w	r3, r3, #8
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	b94b      	cbnz	r3, 80066ee <__swsetup_r+0x9a>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d003      	beq.n	80066ee <__swsetup_r+0x9a>
 80066e6:	4621      	mov	r1, r4
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f92b 	bl	8006944 <__smakebuf_r>
 80066ee:	89a0      	ldrh	r0, [r4, #12]
 80066f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f4:	f010 0301 	ands.w	r3, r0, #1
 80066f8:	d00a      	beq.n	8006710 <__swsetup_r+0xbc>
 80066fa:	2300      	movs	r3, #0
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	6963      	ldr	r3, [r4, #20]
 8006700:	425b      	negs	r3, r3
 8006702:	61a3      	str	r3, [r4, #24]
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	b943      	cbnz	r3, 800671a <__swsetup_r+0xc6>
 8006708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800670c:	d1ba      	bne.n	8006684 <__swsetup_r+0x30>
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	0781      	lsls	r1, r0, #30
 8006712:	bf58      	it	pl
 8006714:	6963      	ldrpl	r3, [r4, #20]
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	e7f4      	b.n	8006704 <__swsetup_r+0xb0>
 800671a:	2000      	movs	r0, #0
 800671c:	e7f7      	b.n	800670e <__swsetup_r+0xba>
 800671e:	bf00      	nop
 8006720:	20000024 	.word	0x20000024
 8006724:	08006c68 	.word	0x08006c68
 8006728:	08006c88 	.word	0x08006c88
 800672c:	08006c48 	.word	0x08006c48

08006730 <_close_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d06      	ldr	r5, [pc, #24]	; (800674c <_close_r+0x1c>)
 8006734:	2300      	movs	r3, #0
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f7fb fa3f 	bl	8001bbe <_close>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_close_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_close_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	200001f4 	.word	0x200001f4

08006750 <__sflush_r>:
 8006750:	898a      	ldrh	r2, [r1, #12]
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	4605      	mov	r5, r0
 8006758:	0710      	lsls	r0, r2, #28
 800675a:	460c      	mov	r4, r1
 800675c:	d458      	bmi.n	8006810 <__sflush_r+0xc0>
 800675e:	684b      	ldr	r3, [r1, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc05      	bgt.n	8006770 <__sflush_r+0x20>
 8006764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	dc02      	bgt.n	8006770 <__sflush_r+0x20>
 800676a:	2000      	movs	r0, #0
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006772:	2e00      	cmp	r6, #0
 8006774:	d0f9      	beq.n	800676a <__sflush_r+0x1a>
 8006776:	2300      	movs	r3, #0
 8006778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800677c:	682f      	ldr	r7, [r5, #0]
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	d032      	beq.n	80067e8 <__sflush_r+0x98>
 8006782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	075a      	lsls	r2, r3, #29
 8006788:	d505      	bpl.n	8006796 <__sflush_r+0x46>
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	1ac0      	subs	r0, r0, r3
 800678e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006790:	b10b      	cbz	r3, 8006796 <__sflush_r+0x46>
 8006792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006794:	1ac0      	subs	r0, r0, r3
 8006796:	2300      	movs	r3, #0
 8006798:	4602      	mov	r2, r0
 800679a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	4628      	mov	r0, r5
 80067a0:	47b0      	blx	r6
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	d106      	bne.n	80067b6 <__sflush_r+0x66>
 80067a8:	6829      	ldr	r1, [r5, #0]
 80067aa:	291d      	cmp	r1, #29
 80067ac:	d82c      	bhi.n	8006808 <__sflush_r+0xb8>
 80067ae:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <__sflush_r+0x108>)
 80067b0:	40ca      	lsrs	r2, r1
 80067b2:	07d6      	lsls	r6, r2, #31
 80067b4:	d528      	bpl.n	8006808 <__sflush_r+0xb8>
 80067b6:	2200      	movs	r2, #0
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	04d9      	lsls	r1, r3, #19
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	d504      	bpl.n	80067cc <__sflush_r+0x7c>
 80067c2:	1c42      	adds	r2, r0, #1
 80067c4:	d101      	bne.n	80067ca <__sflush_r+0x7a>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	b903      	cbnz	r3, 80067cc <__sflush_r+0x7c>
 80067ca:	6560      	str	r0, [r4, #84]	; 0x54
 80067cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ce:	602f      	str	r7, [r5, #0]
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d0ca      	beq.n	800676a <__sflush_r+0x1a>
 80067d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d8:	4299      	cmp	r1, r3
 80067da:	d002      	beq.n	80067e2 <__sflush_r+0x92>
 80067dc:	4628      	mov	r0, r5
 80067de:	f000 f925 	bl	8006a2c <_free_r>
 80067e2:	2000      	movs	r0, #0
 80067e4:	6360      	str	r0, [r4, #52]	; 0x34
 80067e6:	e7c1      	b.n	800676c <__sflush_r+0x1c>
 80067e8:	6a21      	ldr	r1, [r4, #32]
 80067ea:	2301      	movs	r3, #1
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b0      	blx	r6
 80067f0:	1c41      	adds	r1, r0, #1
 80067f2:	d1c7      	bne.n	8006784 <__sflush_r+0x34>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0c4      	beq.n	8006784 <__sflush_r+0x34>
 80067fa:	2b1d      	cmp	r3, #29
 80067fc:	d001      	beq.n	8006802 <__sflush_r+0xb2>
 80067fe:	2b16      	cmp	r3, #22
 8006800:	d101      	bne.n	8006806 <__sflush_r+0xb6>
 8006802:	602f      	str	r7, [r5, #0]
 8006804:	e7b1      	b.n	800676a <__sflush_r+0x1a>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7ad      	b.n	800676c <__sflush_r+0x1c>
 8006810:	690f      	ldr	r7, [r1, #16]
 8006812:	2f00      	cmp	r7, #0
 8006814:	d0a9      	beq.n	800676a <__sflush_r+0x1a>
 8006816:	0793      	lsls	r3, r2, #30
 8006818:	680e      	ldr	r6, [r1, #0]
 800681a:	bf08      	it	eq
 800681c:	694b      	ldreq	r3, [r1, #20]
 800681e:	600f      	str	r7, [r1, #0]
 8006820:	bf18      	it	ne
 8006822:	2300      	movne	r3, #0
 8006824:	eba6 0807 	sub.w	r8, r6, r7
 8006828:	608b      	str	r3, [r1, #8]
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	dd9c      	ble.n	800676a <__sflush_r+0x1a>
 8006830:	6a21      	ldr	r1, [r4, #32]
 8006832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006834:	4643      	mov	r3, r8
 8006836:	463a      	mov	r2, r7
 8006838:	4628      	mov	r0, r5
 800683a:	47b0      	blx	r6
 800683c:	2800      	cmp	r0, #0
 800683e:	dc06      	bgt.n	800684e <__sflush_r+0xfe>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e78e      	b.n	800676c <__sflush_r+0x1c>
 800684e:	4407      	add	r7, r0
 8006850:	eba8 0800 	sub.w	r8, r8, r0
 8006854:	e7e9      	b.n	800682a <__sflush_r+0xda>
 8006856:	bf00      	nop
 8006858:	20400001 	.word	0x20400001

0800685c <_fflush_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b913      	cbnz	r3, 800686c <_fflush_r+0x10>
 8006866:	2500      	movs	r5, #0
 8006868:	4628      	mov	r0, r5
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	b118      	cbz	r0, 8006876 <_fflush_r+0x1a>
 800686e:	6983      	ldr	r3, [r0, #24]
 8006870:	b90b      	cbnz	r3, 8006876 <_fflush_r+0x1a>
 8006872:	f7ff f8b9 	bl	80059e8 <__sinit>
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <_fflush_r+0x6c>)
 8006878:	429c      	cmp	r4, r3
 800687a:	d11b      	bne.n	80068b4 <_fflush_r+0x58>
 800687c:	686c      	ldr	r4, [r5, #4]
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0ef      	beq.n	8006866 <_fflush_r+0xa>
 8006886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006888:	07d0      	lsls	r0, r2, #31
 800688a:	d404      	bmi.n	8006896 <_fflush_r+0x3a>
 800688c:	0599      	lsls	r1, r3, #22
 800688e:	d402      	bmi.n	8006896 <_fflush_r+0x3a>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f7ff f947 	bl	8005b24 <__retarget_lock_acquire_recursive>
 8006896:	4628      	mov	r0, r5
 8006898:	4621      	mov	r1, r4
 800689a:	f7ff ff59 	bl	8006750 <__sflush_r>
 800689e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068a0:	07da      	lsls	r2, r3, #31
 80068a2:	4605      	mov	r5, r0
 80068a4:	d4e0      	bmi.n	8006868 <_fflush_r+0xc>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	d4dd      	bmi.n	8006868 <_fflush_r+0xc>
 80068ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ae:	f7ff f93a 	bl	8005b26 <__retarget_lock_release_recursive>
 80068b2:	e7d9      	b.n	8006868 <_fflush_r+0xc>
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <_fflush_r+0x70>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <_fflush_r+0x62>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7df      	b.n	800687e <_fflush_r+0x22>
 80068be:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <_fflush_r+0x74>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7da      	b.n	800687e <_fflush_r+0x22>
 80068c8:	08006c68 	.word	0x08006c68
 80068cc:	08006c88 	.word	0x08006c88
 80068d0:	08006c48 	.word	0x08006c48

080068d4 <_lseek_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d07      	ldr	r5, [pc, #28]	; (80068f4 <_lseek_r+0x20>)
 80068d8:	4604      	mov	r4, r0
 80068da:	4608      	mov	r0, r1
 80068dc:	4611      	mov	r1, r2
 80068de:	2200      	movs	r2, #0
 80068e0:	602a      	str	r2, [r5, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	f7fb f992 	bl	8001c0c <_lseek>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_lseek_r+0x1e>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_lseek_r+0x1e>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	200001f4 	.word	0x200001f4

080068f8 <__swhatbuf_r>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	460e      	mov	r6, r1
 80068fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006900:	2900      	cmp	r1, #0
 8006902:	b096      	sub	sp, #88	; 0x58
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	da08      	bge.n	800691c <__swhatbuf_r+0x24>
 800690a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	061a      	lsls	r2, r3, #24
 8006914:	d410      	bmi.n	8006938 <__swhatbuf_r+0x40>
 8006916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691a:	e00e      	b.n	800693a <__swhatbuf_r+0x42>
 800691c:	466a      	mov	r2, sp
 800691e:	f000 f913 	bl	8006b48 <_fstat_r>
 8006922:	2800      	cmp	r0, #0
 8006924:	dbf1      	blt.n	800690a <__swhatbuf_r+0x12>
 8006926:	9a01      	ldr	r2, [sp, #4]
 8006928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800692c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006930:	425a      	negs	r2, r3
 8006932:	415a      	adcs	r2, r3
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	e7ee      	b.n	8006916 <__swhatbuf_r+0x1e>
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	2000      	movs	r0, #0
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	b016      	add	sp, #88	; 0x58
 8006940:	bd70      	pop	{r4, r5, r6, pc}
	...

08006944 <__smakebuf_r>:
 8006944:	898b      	ldrh	r3, [r1, #12]
 8006946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006948:	079d      	lsls	r5, r3, #30
 800694a:	4606      	mov	r6, r0
 800694c:	460c      	mov	r4, r1
 800694e:	d507      	bpl.n	8006960 <__smakebuf_r+0x1c>
 8006950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	2301      	movs	r3, #1
 800695a:	6163      	str	r3, [r4, #20]
 800695c:	b002      	add	sp, #8
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	ab01      	add	r3, sp, #4
 8006962:	466a      	mov	r2, sp
 8006964:	f7ff ffc8 	bl	80068f8 <__swhatbuf_r>
 8006968:	9900      	ldr	r1, [sp, #0]
 800696a:	4605      	mov	r5, r0
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff f8fb 	bl	8005b68 <_malloc_r>
 8006972:	b948      	cbnz	r0, 8006988 <__smakebuf_r+0x44>
 8006974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006978:	059a      	lsls	r2, r3, #22
 800697a:	d4ef      	bmi.n	800695c <__smakebuf_r+0x18>
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	e7e3      	b.n	8006950 <__smakebuf_r+0xc>
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <__smakebuf_r+0x7c>)
 800698a:	62b3      	str	r3, [r6, #40]	; 0x28
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	6020      	str	r0, [r4, #0]
 8006990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006994:	81a3      	strh	r3, [r4, #12]
 8006996:	9b00      	ldr	r3, [sp, #0]
 8006998:	6163      	str	r3, [r4, #20]
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	6120      	str	r0, [r4, #16]
 800699e:	b15b      	cbz	r3, 80069b8 <__smakebuf_r+0x74>
 80069a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f8e1 	bl	8006b6c <_isatty_r>
 80069aa:	b128      	cbz	r0, 80069b8 <__smakebuf_r+0x74>
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	89a0      	ldrh	r0, [r4, #12]
 80069ba:	4305      	orrs	r5, r0
 80069bc:	81a5      	strh	r5, [r4, #12]
 80069be:	e7cd      	b.n	800695c <__smakebuf_r+0x18>
 80069c0:	08005981 	.word	0x08005981

080069c4 <memcpy>:
 80069c4:	440a      	add	r2, r1
 80069c6:	4291      	cmp	r1, r2
 80069c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069cc:	d100      	bne.n	80069d0 <memcpy+0xc>
 80069ce:	4770      	bx	lr
 80069d0:	b510      	push	{r4, lr}
 80069d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069da:	4291      	cmp	r1, r2
 80069dc:	d1f9      	bne.n	80069d2 <memcpy+0xe>
 80069de:	bd10      	pop	{r4, pc}

080069e0 <memmove>:
 80069e0:	4288      	cmp	r0, r1
 80069e2:	b510      	push	{r4, lr}
 80069e4:	eb01 0402 	add.w	r4, r1, r2
 80069e8:	d902      	bls.n	80069f0 <memmove+0x10>
 80069ea:	4284      	cmp	r4, r0
 80069ec:	4623      	mov	r3, r4
 80069ee:	d807      	bhi.n	8006a00 <memmove+0x20>
 80069f0:	1e43      	subs	r3, r0, #1
 80069f2:	42a1      	cmp	r1, r4
 80069f4:	d008      	beq.n	8006a08 <memmove+0x28>
 80069f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069fe:	e7f8      	b.n	80069f2 <memmove+0x12>
 8006a00:	4402      	add	r2, r0
 8006a02:	4601      	mov	r1, r0
 8006a04:	428a      	cmp	r2, r1
 8006a06:	d100      	bne.n	8006a0a <memmove+0x2a>
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a12:	e7f7      	b.n	8006a04 <memmove+0x24>

08006a14 <__malloc_lock>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__malloc_lock+0x8>)
 8006a16:	f7ff b885 	b.w	8005b24 <__retarget_lock_acquire_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	200001e8 	.word	0x200001e8

08006a20 <__malloc_unlock>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__malloc_unlock+0x8>)
 8006a22:	f7ff b880 	b.w	8005b26 <__retarget_lock_release_recursive>
 8006a26:	bf00      	nop
 8006a28:	200001e8 	.word	0x200001e8

08006a2c <_free_r>:
 8006a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	d044      	beq.n	8006abc <_free_r+0x90>
 8006a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a36:	9001      	str	r0, [sp, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a3e:	bfb8      	it	lt
 8006a40:	18e4      	addlt	r4, r4, r3
 8006a42:	f7ff ffe7 	bl	8006a14 <__malloc_lock>
 8006a46:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <_free_r+0x94>)
 8006a48:	9801      	ldr	r0, [sp, #4]
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	b933      	cbnz	r3, 8006a5c <_free_r+0x30>
 8006a4e:	6063      	str	r3, [r4, #4]
 8006a50:	6014      	str	r4, [r2, #0]
 8006a52:	b003      	add	sp, #12
 8006a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a58:	f7ff bfe2 	b.w	8006a20 <__malloc_unlock>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d908      	bls.n	8006a72 <_free_r+0x46>
 8006a60:	6825      	ldr	r5, [r4, #0]
 8006a62:	1961      	adds	r1, r4, r5
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf01      	itttt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	1949      	addeq	r1, r1, r5
 8006a6e:	6021      	streq	r1, [r4, #0]
 8006a70:	e7ed      	b.n	8006a4e <_free_r+0x22>
 8006a72:	461a      	mov	r2, r3
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b10b      	cbz	r3, 8006a7c <_free_r+0x50>
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	d9fa      	bls.n	8006a72 <_free_r+0x46>
 8006a7c:	6811      	ldr	r1, [r2, #0]
 8006a7e:	1855      	adds	r5, r2, r1
 8006a80:	42a5      	cmp	r5, r4
 8006a82:	d10b      	bne.n	8006a9c <_free_r+0x70>
 8006a84:	6824      	ldr	r4, [r4, #0]
 8006a86:	4421      	add	r1, r4
 8006a88:	1854      	adds	r4, r2, r1
 8006a8a:	42a3      	cmp	r3, r4
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	d1e0      	bne.n	8006a52 <_free_r+0x26>
 8006a90:	681c      	ldr	r4, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	6053      	str	r3, [r2, #4]
 8006a96:	4421      	add	r1, r4
 8006a98:	6011      	str	r1, [r2, #0]
 8006a9a:	e7da      	b.n	8006a52 <_free_r+0x26>
 8006a9c:	d902      	bls.n	8006aa4 <_free_r+0x78>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	e7d6      	b.n	8006a52 <_free_r+0x26>
 8006aa4:	6825      	ldr	r5, [r4, #0]
 8006aa6:	1961      	adds	r1, r4, r5
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	bf04      	itt	eq
 8006aac:	6819      	ldreq	r1, [r3, #0]
 8006aae:	685b      	ldreq	r3, [r3, #4]
 8006ab0:	6063      	str	r3, [r4, #4]
 8006ab2:	bf04      	itt	eq
 8006ab4:	1949      	addeq	r1, r1, r5
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	6054      	str	r4, [r2, #4]
 8006aba:	e7ca      	b.n	8006a52 <_free_r+0x26>
 8006abc:	b003      	add	sp, #12
 8006abe:	bd30      	pop	{r4, r5, pc}
 8006ac0:	200001ec 	.word	0x200001ec

08006ac4 <_realloc_r>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4614      	mov	r4, r2
 8006acc:	460e      	mov	r6, r1
 8006ace:	b921      	cbnz	r1, 8006ada <_realloc_r+0x16>
 8006ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	f7ff b847 	b.w	8005b68 <_malloc_r>
 8006ada:	b92a      	cbnz	r2, 8006ae8 <_realloc_r+0x24>
 8006adc:	f7ff ffa6 	bl	8006a2c <_free_r>
 8006ae0:	4625      	mov	r5, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	f000 f850 	bl	8006b8c <_malloc_usable_size_r>
 8006aec:	4284      	cmp	r4, r0
 8006aee:	4607      	mov	r7, r0
 8006af0:	d802      	bhi.n	8006af8 <_realloc_r+0x34>
 8006af2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006af6:	d812      	bhi.n	8006b1e <_realloc_r+0x5a>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4640      	mov	r0, r8
 8006afc:	f7ff f834 	bl	8005b68 <_malloc_r>
 8006b00:	4605      	mov	r5, r0
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d0ed      	beq.n	8006ae2 <_realloc_r+0x1e>
 8006b06:	42bc      	cmp	r4, r7
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	bf28      	it	cs
 8006b0e:	463a      	movcs	r2, r7
 8006b10:	f7ff ff58 	bl	80069c4 <memcpy>
 8006b14:	4631      	mov	r1, r6
 8006b16:	4640      	mov	r0, r8
 8006b18:	f7ff ff88 	bl	8006a2c <_free_r>
 8006b1c:	e7e1      	b.n	8006ae2 <_realloc_r+0x1e>
 8006b1e:	4635      	mov	r5, r6
 8006b20:	e7df      	b.n	8006ae2 <_realloc_r+0x1e>
	...

08006b24 <_read_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	; (8006b44 <_read_r+0x20>)
 8006b28:	4604      	mov	r4, r0
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fb f80a 	bl	8001b4c <_read>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_read_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_read_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	200001f4 	.word	0x200001f4

08006b48 <_fstat_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d07      	ldr	r5, [pc, #28]	; (8006b68 <_fstat_r+0x20>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	f7fb f83e 	bl	8001bd6 <_fstat>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d102      	bne.n	8006b64 <_fstat_r+0x1c>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	b103      	cbz	r3, 8006b64 <_fstat_r+0x1c>
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
 8006b66:	bf00      	nop
 8006b68:	200001f4 	.word	0x200001f4

08006b6c <_isatty_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d06      	ldr	r5, [pc, #24]	; (8006b88 <_isatty_r+0x1c>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7fb f83d 	bl	8001bf6 <_isatty>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_isatty_r+0x1a>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_isatty_r+0x1a>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	200001f4 	.word	0x200001f4

08006b8c <_malloc_usable_size_r>:
 8006b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b90:	1f18      	subs	r0, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbc      	itt	lt
 8006b96:	580b      	ldrlt	r3, [r1, r0]
 8006b98:	18c0      	addlt	r0, r0, r3
 8006b9a:	4770      	bx	lr

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
