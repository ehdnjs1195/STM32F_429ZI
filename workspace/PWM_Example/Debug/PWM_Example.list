
PWM_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007170  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800749c  0800749c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a4  080074a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080074ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000238  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014839  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002967  00000000  00000000  000348dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00037248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  00038468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263f6  00000000  00000000  00039598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015afe  00000000  00000000  0005f98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea89a  00000000  00000000  0007548c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015fd26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005720  00000000  00000000  0015fd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007308 	.word	0x08007308

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007308 	.word	0x08007308

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <I2C_Scan+0xc0>)
 80005ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	6020      	str	r0, [r4, #0]
 80005bc:	3404      	adds	r4, #4
 80005be:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <I2C_Scan+0xc4>)
 80005d8:	f004 fc5d 	bl	8004e96 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005e2:	e02f      	b.n	8000644 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b299      	uxth	r1, r3
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	481e      	ldr	r0, [pc, #120]	; (800066c <I2C_Scan+0xc8>)
 80005f2:	f002 fb87 	bl	8002d04 <HAL_I2C_IsDeviceReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000600:	2b00      	cmp	r3, #0
 8000602:	d113      	bne.n	800062c <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000604:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Scan+0xcc>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f005 fcf5 	bl	8005ffc <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdeb 	bl	80001f0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <I2C_Scan+0xc4>)
 8000626:	f004 fc36 	bl	8004e96 <HAL_UART_Transmit>
 800062a:	e006      	b.n	800063a <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <I2C_Scan+0xd0>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <I2C_Scan+0xc4>)
 8000636:	f004 fc2e 	bl	8004e96 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 800063a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d9cb      	bls.n	80005e4 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2202      	movs	r2, #2
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <I2C_Scan+0xd4>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <I2C_Scan+0xc4>)
 8000656:	f004 fc1e 	bl	8004e96 <HAL_UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3760      	adds	r7, #96	; 0x60
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	08007330 	.word	0x08007330
 8000668:	2000024c 	.word	0x2000024c
 800066c:	20000120 	.word	0x20000120
 8000670:	08007320 	.word	0x08007320
 8000674:	08007328 	.word	0x08007328
 8000678:	0800732c 	.word	0x0800732c

0800067c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b299      	uxth	r1, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <LCD_SendInternal+0xa8>)
 800069a:	f002 fb33 	bl	8002d04 <HAL_I2C_IsDeviceReady>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a8:	e7f1      	b.n	800068e <LCD_SendInternal+0x12>
            break;
 80006aa:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f023 030f 	bic.w	r3, r3, #15
 80006b2:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f043 030c 	orr.w	r3, r3, #12
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006da:	7b7a      	ldrb	r2, [r7, #13]
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f043 030c 	orr.w	r3, r3, #12
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2304      	movs	r3, #4
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <LCD_SendInternal+0xa8>)
 800070c:	f002 f9fc 	bl	8002b08 <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000714:	2005      	movs	r0, #5
 8000716:	f001 f881 	bl	800181c <HAL_Delay>
    return res;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000120 	.word	0x20000120

08000728 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff9c 	bl	800067c <LCD_SendInternal>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 800075c:	79b9      	ldrb	r1, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff8a 	bl	800067c <LCD_SendInternal>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2130      	movs	r1, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffd2 	bl	8000728 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffcd 	bl	8000728 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	210c      	movs	r1, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc8 	bl	8000728 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <LCD_SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007b6:	e009      	b.n	80007cc <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc3 	bl	800074c <LCD_SendData>
        str++;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f1      	bne.n	80007b8 <LCD_SendString+0xe>
    }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <init>:

void init() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007e4:	f7ff fede 	bl	80005a4 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ffc1 	bl	8000770 <LCD_Init>

    // set address to 0x00 첫번째줄 0번부터 글을 쓴다
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ff99 	bl	8000728 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "Fxxxing 1602 LCD");
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <init+0x34>)
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ffd6 	bl	80007aa <LCD_SendString>

    // set address to 0x40 두번째줄 0번째부터 글을 쓴다.
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007fe:	21c0      	movs	r1, #192	; 0xc0
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ff91 	bl	8000728 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000806:	4904      	ldr	r1, [pc, #16]	; (8000818 <init+0x38>)
 8000808:	204e      	movs	r0, #78	; 0x4e
 800080a:	f7ff ffce 	bl	80007aa <LCD_SendString>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08007348 	.word	0x08007348
 8000818:	0800735c 	.word	0x0800735c

0800081c <_write>:
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
//printf
int _write(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b29a      	uxth	r2, r3
 800082c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <_write+0x28>)
 8000834:	f004 fb2f 	bl	8004e96 <HAL_UART_Transmit>

	return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000024c 	.word	0x2000024c

08000848 <_read>:
	return ch;
}

//scanf
int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <_read+0x28>)
 8000860:	f004 fbab 	bl	8004fba <HAL_UART_Receive>
	return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000024c 	.word	0x2000024c

08000874 <scaling>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int scaling(int x)
  {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	  return (x * 2000) / 1023;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <scaling+0x2c>)
 8000888:	fb82 1203 	smull	r1, r2, r2, r3
 800088c:	441a      	add	r2, r3
 800088e:	1252      	asrs	r2, r2, #9
 8000890:	17db      	asrs	r3, r3, #31
 8000892:	1ad3      	subs	r3, r2, r3
  }
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	80200803 	.word	0x80200803

080008a4 <scalingRatio>:

int scalingRatio(int x)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	int t = (250 * x)/10;
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	009a      	lsls	r2, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
	if(t < 50) return 50;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b31      	cmp	r3, #49	; 0x31
 80008be:	dc01      	bgt.n	80008c4 <scalingRatio+0x20>
 80008c0:	2332      	movs	r3, #50	; 0x32
 80008c2:	e000      	b.n	80008c6 <scalingRatio+0x22>
	return t;
 80008c4:	68fb      	ldr	r3, [r7, #12]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 ff2d 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f8af 	bl	8000a40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 fb11 	bl	8000f08 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008e6:	f000 f941 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM3_Init();
 80008ea:	f000 fa21 	bl	8000d30 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80008ee:	f000 fae1 	bl	8000eb4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80008f2:	f000 f98f 	bl	8000c14 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008f6:	f000 f9cd 	bl	8000c94 <MX_TIM2_Init>
  MX_TIM4_Init();
 80008fa:	f000 fa81 	bl	8000e00 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008fe:	f000 f909 	bl	8000b14 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000902:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x130>)
 8000904:	f000 fff2 	bl	80018ec <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//PWM3 of TIM3 start
 8000908:	2108      	movs	r1, #8
 800090a:	483f      	ldr	r0, [pc, #252]	; (8000a08 <main+0x134>)
 800090c:	f003 fb54 	bl	8003fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	//PWM2 of TIM3 start
 8000910:	2104      	movs	r1, #4
 8000912:	483d      	ldr	r0, [pc, #244]	; (8000a08 <main+0x134>)
 8000914:	f003 fb50 	bl	8003fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);	//PWM3 of TIM4 start BUZZ
 8000918:	2108      	movs	r1, #8
 800091a:	483c      	ldr	r0, [pc, #240]	; (8000a0c <main+0x138>)
 800091c:	f003 fb4c 	bl	8003fb8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000920:	483b      	ldr	r0, [pc, #236]	; (8000a10 <main+0x13c>)
 8000922:	f003 fa89 	bl	8003e38 <HAL_TIM_Base_Start_IT>
  LCD_Init(LCD_ADDR);
 8000926:	204e      	movs	r0, #78	; 0x4e
 8000928:	f7ff ff22 	bl	8000770 <LCD_Init>
  init();
 800092c:	f7ff ff58 	bl	80007e0 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8000930:	4834      	ldr	r0, [pc, #208]	; (8000a04 <main+0x130>)
 8000932:	f000 ffdb 	bl	80018ec <HAL_ADC_Start_IT>
	  TIM3 -> CCR3 = scaling(adc_value);
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <main+0x140>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff9a 	bl	8000874 <scaling>
 8000940:	4602      	mov	r2, r0
 8000942:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <main+0x144>)
 8000944:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM4 -> ARR = 1046;
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <main+0x148>)
 8000948:	f240 4216 	movw	r2, #1046	; 0x416
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
	  TIM3 -> CCR2 = scalingRatio(ratio);
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <main+0x14c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffa6 	bl	80008a4 <scalingRatio>
 8000958:	4602      	mov	r2, r0
 800095a:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <main+0x144>)
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, scaling(adc_value));
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <main+0x140>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff86 	bl	8000874 <scaling>
 8000968:	4603      	mov	r3, r0
 800096a:	b2db      	uxtb	r3, r3
 800096c:	461a      	mov	r2, r3
 800096e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <main+0x150>)
 8000974:	f001 ff52 	bl	800281c <HAL_GPIO_WritePin>

	  printf("PWM CH3 value: %d, Scaling value: %d, PWM CH2 value: %d, Scaling value: %d \r\n", adc_value, scaling(adc_value), ratio, scalingRatio(ratio));
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <main+0x140>)
 800097a:	681c      	ldr	r4, [r3, #0]
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <main+0x140>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff77 	bl	8000874 <scaling>
 8000986:	4606      	mov	r6, r0
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <main+0x14c>)
 800098a:	681d      	ldr	r5, [r3, #0]
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <main+0x14c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff87 	bl	80008a4 <scalingRatio>
 8000996:	4603      	mov	r3, r0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	462b      	mov	r3, r5
 800099c:	4632      	mov	r2, r6
 800099e:	4621      	mov	r1, r4
 80009a0:	4821      	ldr	r0, [pc, #132]	; (8000a28 <main+0x154>)
 80009a2:	f005 fb13 	bl	8005fcc <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(ADCstring, "ADC value : %04d    ", scaling(adc_value));
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <main+0x140>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff62 	bl	8000874 <scaling>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	491d      	ldr	r1, [pc, #116]	; (8000a2c <main+0x158>)
 80009b6:	481e      	ldr	r0, [pc, #120]	; (8000a30 <main+0x15c>)
 80009b8:	f005 fb54 	bl	8006064 <siprintf>
	  sprintf(MS_Ratio, "MS Ratio : %04d     ", scalingRatio(ratio));
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x14c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff6f 	bl	80008a4 <scalingRatio>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	491a      	ldr	r1, [pc, #104]	; (8000a34 <main+0x160>)
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <main+0x164>)
 80009ce:	f005 fb49 	bl	8006064 <siprintf>

	  if(lcdPrint == 1)
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <main+0x168>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d1aa      	bne.n	8000930 <main+0x5c>
	  {
		  LCD_SendCommand((0x27 << 1), 0b10000000); //0x00
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	204e      	movs	r0, #78	; 0x4e
 80009de:	f7ff fea3 	bl	8000728 <LCD_SendCommand>
		  LCD_SendString((0x27 << 1), ADCstring);
 80009e2:	4913      	ldr	r1, [pc, #76]	; (8000a30 <main+0x15c>)
 80009e4:	204e      	movs	r0, #78	; 0x4e
 80009e6:	f7ff fee0 	bl	80007aa <LCD_SendString>
		  LCD_SendCommand((0x27 << 1), 0b11000000); //0x00
 80009ea:	21c0      	movs	r1, #192	; 0xc0
 80009ec:	204e      	movs	r0, #78	; 0x4e
 80009ee:	f7ff fe9b 	bl	8000728 <LCD_SendCommand>
		  LCD_SendString((0x27 << 1), MS_Ratio);
 80009f2:	4911      	ldr	r1, [pc, #68]	; (8000a38 <main+0x164>)
 80009f4:	204e      	movs	r0, #78	; 0x4e
 80009f6:	f7ff fed8 	bl	80007aa <LCD_SendString>
		  lcdPrint = 0;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <main+0x168>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  {
 8000a00:	e796      	b.n	8000930 <main+0x5c>
 8000a02:	bf00      	nop
 8000a04:	200000d8 	.word	0x200000d8
 8000a08:	200001bc 	.word	0x200001bc
 8000a0c:	20000204 	.word	0x20000204
 8000a10:	20000174 	.word	0x20000174
 8000a14:	20000090 	.word	0x20000090
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40000800 	.word	0x40000800
 8000a20:	20000000 	.word	0x20000000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	0800736c 	.word	0x0800736c
 8000a2c:	080073bc 	.word	0x080073bc
 8000a30:	20000094 	.word	0x20000094
 8000a34:	080073d4 	.word	0x080073d4
 8000a38:	200000b4 	.word	0x200000b4
 8000a3c:	200000d4 	.word	0x200000d4

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 fab4 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xcc>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <SystemClock_Config+0xcc>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemClock_Config+0xcc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ab4:	23a8      	movs	r3, #168	; 0xa8
 8000ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0320 	add.w	r3, r7, #32
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fccf 	bl	8003468 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad0:	f000 fb52 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2105      	movs	r1, #5
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 ff30 	bl	8003958 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000afe:	f000 fb3b 	bl	8001178 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2012      	movs	r0, #18
 8000b1e:	f001 fc08 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b22:	2012      	movs	r0, #18
 8000b24:	f001 fc21 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2027      	movs	r0, #39	; 0x27
 8000b2e:	f001 fc00 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b32:	2027      	movs	r0, #39	; 0x27
 8000b34:	f001 fc19 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2028      	movs	r0, #40	; 0x28
 8000b3e:	f001 fbf8 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b42:	2028      	movs	r0, #40	; 0x28
 8000b44:	f001 fc11 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f001 fbf0 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b52:	201c      	movs	r0, #28
 8000b54:	f001 fc09 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	201d      	movs	r0, #29
 8000b5e:	f001 fbe8 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b62:	201d      	movs	r0, #29
 8000b64:	f001 fc01 	bl	800236a <HAL_NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <MX_ADC1_Init+0xa0>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <MX_ADC1_Init+0xa4>)
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bd0:	f000 fe48 	bl	8001864 <HAL_ADC_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000bda:	f000 facd 	bl	8001178 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bde:	230a      	movs	r3, #10
 8000be0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_ADC1_Init+0x9c>)
 8000bf0:	f001 f88c 	bl	8001d0c <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bfa:	f000 fabd 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000d8 	.word	0x200000d8
 8000c0c:	40012000 	.word	0x40012000
 8000c10:	0f000001 	.word	0x0f000001

08000c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c52:	f001 fe15 	bl	8002880 <HAL_I2C_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c5c:	f000 fa8c 	bl	8001178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c64:	f002 fb85 	bl	8003372 <HAL_I2CEx_ConfigAnalogFilter>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c6e:	f000 fa83 	bl	8001178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_I2C1_Init+0x74>)
 8000c76:	f002 fbb8 	bl	80033ea <HAL_I2CEx_ConfigDigitalFilter>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c80:	f000 fa7a 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000120 	.word	0x20000120
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cba:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ccc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cdc:	f003 f85c 	bl	8003d98 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ce6:	f000 fa47 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cf8:	f003 fbf0 	bl	80044dc <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d02:	f000 fa39 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000d14:	f003 ffe2 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d1e:	f000 fa2b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000174 	.word	0x20000174

08000d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <MX_TIM3_Init+0xcc>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d5a:	f240 3247 	movw	r2, #839	; 0x347
 8000d5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d68:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d7c:	f003 f8cc 	bl	8003f18 <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d86:	f000 f9f7 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4619      	mov	r1, r3
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000d9a:	f003 ff9f 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000da4:	f000 f9e8 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8000dac:	2363      	movs	r3, #99	; 0x63
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2204      	movs	r2, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000dc0:	f003 faca 	bl	8004358 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dca:	f000 f9d5 	bl	8001178 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000dda:	f003 fabd 	bl	8004358 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000de4:	f000 f9c8 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM3_Init+0xc8>)
 8000dea:	f000 fad7 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001bc 	.word	0x200001bc
 8000dfc:	40000400 	.word	0x40000400

08000e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <MX_TIM4_Init+0xb0>)
 8000e26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e2a:	f240 3247 	movw	r2, #839	; 0x347
 8000e2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e38:	22f9      	movs	r2, #249	; 0xf9
 8000e3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e48:	4818      	ldr	r0, [pc, #96]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e4a:	f003 f865 	bl	8003f18 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e54:	f000 f990 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e68:	f003 ff38 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e72:	f000 f981 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000e7a:	237d      	movs	r3, #125	; 0x7d
 8000e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e8e:	f003 fa63 	bl	8004358 <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e98:	f000 f96e 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM4_Init+0xac>)
 8000e9e:	f000 fa7d 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	; 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000204 	.word	0x20000204
 8000eb0:	40000800 	.word	0x40000800

08000eb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART3_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART3_UART_Init+0x4c>)
 8000eec:	f003 ff86 	bl	8004dfc <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f93f 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000024c 	.word	0x2000024c
 8000f04:	40004800 	.word	0x40004800

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	4b55      	ldr	r3, [pc, #340]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a54      	ldr	r2, [pc, #336]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b52      	ldr	r3, [pc, #328]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a46      	ldr	r2, [pc, #280]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b40      	ldr	r3, [pc, #256]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a3f      	ldr	r2, [pc, #252]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b39      	ldr	r3, [pc, #228]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a38      	ldr	r2, [pc, #224]	; (8001078 <MX_GPIO_Init+0x170>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a31      	ldr	r2, [pc, #196]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a2a      	ldr	r2, [pc, #168]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_GPIO_Init+0x170>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe8:	4824      	ldr	r0, [pc, #144]	; (800107c <MX_GPIO_Init+0x174>)
 8000fea:	f001 fc17 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff4:	4822      	ldr	r0, [pc, #136]	; (8001080 <MX_GPIO_Init+0x178>)
 8000ff6:	f001 fc11 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Btn_Pin */
  GPIO_InitStruct.Pin = User_Btn_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001000:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(User_Btn_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <MX_GPIO_Init+0x17c>)
 8001012:	f001 fa57 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4816      	ldr	r0, [pc, #88]	; (8001088 <MX_GPIO_Init+0x180>)
 800102e:	f001 fa49 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_GPIO_Init+0x174>)
 800104c:	f001 fa3a 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_GPIO_Init+0x178>)
 800106a:	f001 fa2b 	bl	80024c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40021000 	.word	0x40021000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40021400 	.word	0x40021400

0800108c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x28>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d106      	bne.n	80010ac <HAL_ADC_ConvCpltCallback+0x20>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80010a0:	f000 fe12 	bl	8001cc8 <HAL_ADC_GetValue>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_ADC_ConvCpltCallback+0x30>)
 80010aa:	601a      	str	r2, [r3, #0]
	}
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40012000 	.word	0x40012000
 80010b8:	200000d8 	.word	0x200000d8
 80010bc:	20000090 	.word	0x20000090

080010c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == htim2.Instance) //5000 / 10000 => 0.5�???
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d102      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		lcdPrint = 1;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
	}
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000174 	.word	0x20000174
 80010ec:	200000d4 	.word	0x200000d4

080010f0 <HAL_GPIO_EXTI_Callback>:
uint32_t start = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick();
 80010fa:	f000 fb83 	bl	8001804 <HAL_GetTick>
 80010fe:	60f8      	str	r0, [r7, #12]

	if(GPIO_Pin == GPIO_PIN_13) // Left Button
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001106:	d115      	bne.n	8001134 <HAL_GPIO_EXTI_Callback+0x44>
	{
		if(currentTime - start > 300) { //control chattering
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_GPIO_EXTI_Callback+0x80>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001114:	d907      	bls.n	8001126 <HAL_GPIO_EXTI_Callback+0x36>
			ratio++;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 800111e:	6013      	str	r3, [r2, #0]
			start = currentTime;	//start time reset
 8001120:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_GPIO_EXTI_Callback+0x80>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6013      	str	r3, [r2, #0]
		}
		if(currentTime - start > 500)
		{

		}
		if(ratio > 10) ratio = 10;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b0a      	cmp	r3, #10
 800112c:	dd02      	ble.n	8001134 <HAL_GPIO_EXTI_Callback+0x44>
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 8001130:	220a      	movs	r2, #10
 8001132:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_14) // Right Button
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800113a:	d115      	bne.n	8001168 <HAL_GPIO_EXTI_Callback+0x78>
	{
		if(currentTime - start > 500) {
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_GPIO_EXTI_Callback+0x80>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001148:	d907      	bls.n	800115a <HAL_GPIO_EXTI_Callback+0x6a>
			ratio--;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 8001152:	6013      	str	r3, [r2, #0]
			start = currentTime;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_GPIO_EXTI_Callback+0x80>)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6013      	str	r3, [r2, #0]
		}
		if(ratio < 2) ratio =2;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	dc02      	bgt.n	8001168 <HAL_GPIO_EXTI_Callback+0x78>
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_GPIO_EXTI_Callback+0x84>)
 8001164:	2202      	movs	r2, #2
 8001166:	601a      	str	r2, [r3, #0]
	}
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000290 	.word	0x20000290
 8001174:	20000000 	.word	0x20000000

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_ADC_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d127      	bne.n	8001246 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_ADC_MspInit+0x80>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_ADC_MspInit+0x80>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0x84>)
 8001242:	f001 f93f 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012000 	.word	0x40012000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_I2C_MspInit+0x84>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12c      	bne.n	80012d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800129a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	2312      	movs	r3, #18
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ac:	2304      	movs	r3, #4
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_I2C_MspInit+0x8c>)
 80012b8:	f001 f904 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_I2C_MspInit+0x88>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020400 	.word	0x40020400

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d10d      	bne.n	800131a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_TIM_Base_MspInit+0x3c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_TIM_PWM_MspInit+0x64>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10e      	bne.n	800135c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800135a:	e012      	b.n	8001382 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_TIM_PWM_MspInit+0x6c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10d      	bne.n	8001382 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_TIM_PWM_MspInit+0x68>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40000400 	.word	0x40000400
 8001394:	40023800 	.word	0x40023800
 8001398:	40000800 	.word	0x40000800

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a33      	ldr	r2, [pc, #204]	; (8001488 <HAL_TIM_MspPostInit+0xec>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d13c      	bne.n	8001438 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a31      	ldr	r2, [pc, #196]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a2a      	ldr	r2, [pc, #168]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001406:	2302      	movs	r3, #2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	481f      	ldr	r0, [pc, #124]	; (8001490 <HAL_TIM_MspPostInit+0xf4>)
 8001412:	f001 f857 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001426:	2302      	movs	r3, #2
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <HAL_TIM_MspPostInit+0xf8>)
 8001432:	f001 f847 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001436:	e023      	b.n	8001480 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_TIM_MspPostInit+0xfc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d11e      	bne.n	8001480 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_TIM_MspPostInit+0xf0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800145e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001470:	2302      	movs	r3, #2
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <HAL_TIM_MspPostInit+0x100>)
 800147c:	f001 f822 	bl	80024c4 <HAL_GPIO_Init>
}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40000400 	.word	0x40000400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40000800 	.word	0x40000800
 800149c:	40020c00 	.word	0x40020c00

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_UART_MspInit+0x84>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12c      	bne.n	800151c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800150c:	2307      	movs	r3, #7
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_MspInit+0x8c>)
 8001518:	f000 ffd4 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40004800 	.word	0x40004800
 8001528:	40023800 	.word	0x40023800
 800152c:	40020c00 	.word	0x40020c00

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f92e 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <ADC_IRQHandler+0x10>)
 800158a:	f000 fa8d 	bl	8001aa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000d8 	.word	0x200000d8

08001598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM2_IRQHandler+0x10>)
 800159e:	f002 fdd3 	bl	8004148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000174 	.word	0x20000174

080015ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <TIM3_IRQHandler+0x10>)
 80015b2:	f002 fdc9 	bl	8004148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001bc 	.word	0x200001bc

080015c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <USART3_IRQHandler+0x10>)
 80015c6:	f003 fd9b 	bl	8005100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000024c 	.word	0x2000024c

080015d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Btn_Pin);
 80015d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015dc:	f001 f938 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80015e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e4:	f001 f934 	bl	8002850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001614:	605a      	str	r2, [r3, #4]
  return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_isatty>:

int _isatty(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f004 fc70 	bl	8005f68 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20030000 	.word	0x20030000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000294 	.word	0x20000294
 80016bc:	200002b0 	.word	0x200002b0

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f004 fc2f 	bl	8005f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff f8dd 	bl	80008d4 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800171c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001728:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 800172c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001730:	200002ac 	.word	0x200002ac

08001734 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <CAN1_RX0_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 fddb 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fd0a 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fdf3 	bl	8002386 <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 fdbb 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000004 	.word	0x20000004
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000008 	.word	0x20000008

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2000000c 	.word	0x2000000c
 8001800:	20000298 	.word	0x20000298

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000298 	.word	0x20000298

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000000c 	.word	0x2000000c

08001864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e033      	b.n	80018e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fca6 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb5a 	bl	8001f70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Start_IT+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e0bd      	b.n	8001a82 <HAL_ADC_Start_IT+0x196>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d018      	beq.n	800194e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_ADC_Start_IT+0x1a4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_ADC_Start_IT+0x1a8>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	f040 8085 	bne.w	8001a68 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800199c:	d106      	bne.n	80019ac <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f023 0206 	bic.w	r2, r3, #6
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 80019bc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d12a      	bne.n	8001a3e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_ADC_Start_IT+0x1b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d015      	beq.n	8001a1e <HAL_ADC_Start_IT+0x132>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <HAL_ADC_Start_IT+0x1b4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_Start_IT+0x11c>
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <HAL_ADC_Start_IT+0x1b8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d136      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_ADC_Start_IT+0x1ac>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d130      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d129      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e020      	b.n	8001a80 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_ADC_Start_IT+0x1b0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d11b      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d114      	bne.n	8001a80 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	e00b      	b.n	8001a80 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0210 	orr.w	r2, r3, #16
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000004 	.word	0x20000004
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	40012300 	.word	0x40012300
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40012100 	.word	0x40012100
 8001aa4:	40012200 	.word	0x40012200

08001aa8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d049      	beq.n	8001b72 <HAL_ADC_IRQHandler+0xca>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d046      	beq.n	8001b72 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12b      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d127      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d119      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fa92 	bl	800108c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0212 	mvn.w	r2, #18
 8001b70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d057      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x190>
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d054      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d139      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d12b      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d124      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d11d      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fa9d 	bl	8002168 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 020c 	mvn.w	r2, #12
 8001c36:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d017      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d014      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f837 	bl	8001ce2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0201 	mvn.w	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x218>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f043 0202 	orr.w	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0220 	mvn.w	r2, #32
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f820 	bl	8001cf6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0220 	mvn.w	r2, #32
 8001cbe:	601a      	str	r2, [r3, #0]
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1c>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e113      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x244>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d925      	bls.n	8001d84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b1e      	subs	r3, #30
 8001d4e:	2207      	movs	r2, #7
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4403      	add	r3, r0
 8001d76:	3b1e      	subs	r3, #30
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e022      	b.n	8001dca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	2207      	movs	r2, #7
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4403      	add	r3, r0
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d824      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	3b05      	subs	r3, #5
 8001de4:	221f      	movs	r2, #31
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1a:	e04c      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d824      	bhi.n	8001e6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b23      	subs	r3, #35	; 0x23
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	; 0x23
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6c:	e023      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b41      	subs	r3, #65	; 0x41
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b41      	subs	r3, #65	; 0x41
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_ADC_ConfigChannel+0x250>)
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_ADC_ConfigChannel+0x254>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_ADC_ConfigChannel+0x254>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <HAL_ADC_ConfigChannel+0x258>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b11      	cmp	r3, #17
 8001efe:	d122      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ADC_ConfigChannel+0x258>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d111      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_ADC_ConfigChannel+0x25c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x260>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	40012000 	.word	0x40012000
 8001f64:	10000012 	.word	0x10000012
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b79      	ldr	r3, [pc, #484]	; (8002160 <ADC_Init+0x1f0>)
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <ADC_Init+0x1f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	035a      	lsls	r2, r3, #13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051a      	lsls	r2, r3, #20
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002126:	025a      	lsls	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	029a      	lsls	r2, r3, #10
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	0f000001 	.word	0x0f000001

08002168 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	; (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	; 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fa2a 	bl	8001804 <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d008      	beq.n	80023d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e052      	b.n	8002476 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0216 	bic.w	r2, r2, #22
 80023de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <HAL_DMA_Abort+0x62>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002420:	e013      	b.n	800244a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002422:	f7ff f9ef 	bl	8001804 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b05      	cmp	r3, #5
 800242e:	d90c      	bls.n	800244a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2203      	movs	r2, #3
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e015      	b.n	8002476 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e4      	bne.n	8002422 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245c:	223f      	movs	r2, #63	; 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00c      	b.n	80024b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e177      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8166 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80c0 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae84 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800286c:	88fb      	ldrh	r3, [r7, #6]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc3e 	bl	80010f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013c00 	.word	0x40013c00

08002880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e12b      	b.n	8002aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fcd8 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028e4:	f001 fa30 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80028e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a81      	ldr	r2, [pc, #516]	; (8002af4 <HAL_I2C_Init+0x274>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d807      	bhi.n	8002904 <HAL_I2C_Init+0x84>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_I2C_Init+0x278>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e006      	b.n	8002912 <HAL_I2C_Init+0x92>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a7d      	ldr	r2, [pc, #500]	; (8002afc <HAL_I2C_Init+0x27c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	bf94      	ite	ls
 800290c:	2301      	movls	r3, #1
 800290e:	2300      	movhi	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0e7      	b.n	8002aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a78      	ldr	r2, [pc, #480]	; (8002b00 <HAL_I2C_Init+0x280>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a6a      	ldr	r2, [pc, #424]	; (8002af4 <HAL_I2C_Init+0x274>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d802      	bhi.n	8002954 <HAL_I2C_Init+0xd4>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	e009      	b.n	8002968 <HAL_I2C_Init+0xe8>
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <HAL_I2C_Init+0x284>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	099b      	lsrs	r3, r3, #6
 8002966:	3301      	adds	r3, #1
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800297a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	495c      	ldr	r1, [pc, #368]	; (8002af4 <HAL_I2C_Init+0x274>)
 8002984:	428b      	cmp	r3, r1
 8002986:	d819      	bhi.n	80029bc <HAL_I2C_Init+0x13c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e59      	subs	r1, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	fbb1 f3f3 	udiv	r3, r1, r3
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	f640 73fc 	movw	r3, #4092	; 0xffc
 800299c:	400b      	ands	r3, r1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_I2C_Init+0x138>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e59      	subs	r1, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	e051      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 80029b8:	2304      	movs	r3, #4
 80029ba:	e04f      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d111      	bne.n	80029e8 <HAL_I2C_Init+0x168>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e58      	subs	r0, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6859      	ldr	r1, [r3, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e012      	b.n	8002a0e <HAL_I2C_Init+0x18e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x196>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e022      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10e      	bne.n	8002a3c <HAL_I2C_Init+0x1bc>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e58      	subs	r0, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Init+0x1dc>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	6809      	ldr	r1, [r1, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6911      	ldr	r1, [r2, #16]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	000186a0 	.word	0x000186a0
 8002af8:	001e847f 	.word	0x001e847f
 8002afc:	003d08ff 	.word	0x003d08ff
 8002b00:	431bde83 	.word	0x431bde83
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7fe fe72 	bl	8001804 <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 80e0 	bne.w	8002cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	4970      	ldr	r1, [pc, #448]	; (8002cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa92 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0d3      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x50>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0cc      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d007      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	893a      	ldrh	r2, [r7, #8]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	6a3a      	ldr	r2, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9ca 	bl	8002f60 <I2C_MasterRequestWrite>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e08d      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bec:	e066      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fb0c 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06b      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11b      	bne.n	8002c90 <HAL_I2C_Master_Transmit+0x188>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	6a39      	ldr	r1, [r7, #32]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fafc 	bl	8003292 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e01a      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d194      	bne.n	8002bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
  }
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	00100002 	.word	0x00100002
 8002d00:	ffff0000 	.word	0xffff0000

08002d04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7fe fd76 	bl	8001804 <HAL_GetTick>
 8002d18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	f040 8111 	bne.w	8002f4e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2319      	movs	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	4988      	ldr	r1, [pc, #544]	; (8002f58 <HAL_I2C_IsDeviceReady+0x254>)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f994 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	e104      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2C_IsDeviceReady+0x50>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0fd      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d007      	beq.n	8002d7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2224      	movs	r2, #36	; 0x24
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_I2C_IsDeviceReady+0x258>)
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f952 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	d103      	bne.n	8002dde <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b6      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002df0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fd07 	bl	8001804 <HAL_GetTick>
 8002df6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e26:	e025      	b.n	8002e74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e28:	f7fe fcec 	bl	8001804 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d302      	bcc.n	8002e3e <HAL_I2C_IsDeviceReady+0x13a>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	22a0      	movs	r2, #160	; 0xa0
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2ba0      	cmp	r3, #160	; 0xa0
 8002e7e:	d005      	beq.n	8002e8c <HAL_I2C_IsDeviceReady+0x188>
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_I2C_IsDeviceReady+0x188>
 8002e86:	7dbb      	ldrb	r3, [r7, #22]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0cd      	beq.n	8002e28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d129      	bne.n	8002ef6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2319      	movs	r3, #25
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4921      	ldr	r1, [pc, #132]	; (8002f58 <HAL_I2C_IsDeviceReady+0x254>)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8c6 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e036      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e02c      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f0e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2319      	movs	r3, #25
 8002f16:	2201      	movs	r2, #1
 8002f18:	490f      	ldr	r1, [pc, #60]	; (8002f58 <HAL_I2C_IsDeviceReady+0x254>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8a2 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e012      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f4ff af32 	bcc.w	8002d9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d006      	beq.n	8002f8a <I2C_MasterRequestWrite+0x2a>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d003      	beq.n	8002f8a <I2C_MasterRequestWrite+0x2a>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f88:	d108      	bne.n	8002f9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e00b      	b.n	8002fb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2b12      	cmp	r3, #18
 8002fa2:	d107      	bne.n	8002fb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f84f 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fda:	d103      	bne.n	8002fe4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e035      	b.n	8003054 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff0:	d108      	bne.n	8003004 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e01b      	b.n	800303c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	11db      	asrs	r3, r3, #7
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f063 030f 	orn	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	490e      	ldr	r1, [pc, #56]	; (800305c <I2C_MasterRequestWrite+0xfc>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f875 	bl	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e010      	b.n	8003054 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4907      	ldr	r1, [pc, #28]	; (8003060 <I2C_MasterRequestWrite+0x100>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f865 	bl	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	00010008 	.word	0x00010008
 8003060:	00010002 	.word	0x00010002

08003064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003074:	e025      	b.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d021      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fbc1 	bl	8001804 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e023      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10d      	bne.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	e00c      	b.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d0b6      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003120:	e051      	b.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d123      	bne.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e046      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d021      	beq.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003182:	f7fe fb3f 	bl	8001804 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d302      	bcc.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d116      	bne.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e020      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e00b      	b.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d18d      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321c:	e02d      	b.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f878 	bl	8003314 <I2C_IsAcknowledgeFailed>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02d      	b.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d021      	beq.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fae5 	bl	8001804 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d116      	bne.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e007      	b.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d1ca      	bne.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329e:	e02d      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f837 	bl	8003314 <I2C_IsAcknowledgeFailed>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02d      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d021      	beq.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7fe faa4 	bl	8001804 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e007      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d1ca      	bne.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d11b      	bne.n	8003364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d129      	bne.n	80033dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0210 	bic.w	r2, r2, #16
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	d12a      	bne.n	800345a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	f023 030f 	bic.w	r3, r3, #15
 800342a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b29a      	uxth	r2, r3
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	4313      	orrs	r3, r2
 8003434:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	89fa      	ldrh	r2, [r7, #14]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e267      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d075      	beq.n	8003572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003486:	4b88      	ldr	r3, [pc, #544]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b85      	ldr	r3, [pc, #532]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e242      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x74>
 80034ce:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6c      	ldr	r2, [pc, #432]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 8003500:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a68      	ldr	r2, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe f970 	bl	8001804 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe f96c 	bl	8001804 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e207      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xc0>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe f95c 	bl	8001804 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe f958 	bl	8001804 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1f3      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800357e:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1c7      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4937      	ldr	r1, [pc, #220]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x244>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f911 	bl	8001804 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe f90d 	bl	8001804 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1a8      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4925      	ldr	r1, [pc, #148]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_OscConfig+0x244>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f8f0 	bl	8001804 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f8ec 	bl	8001804 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e187      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_OscConfig+0x248>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fe f8d0 	bl	8001804 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe f8cc 	bl	8001804 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e167      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_OscConfig+0x240>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x200>
 8003686:	e01b      	b.n	80036c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x248>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe f8b9 	bl	8001804 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e00e      	b.n	80036b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003696:	f7fe f8b5 	bl	8001804 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d907      	bls.n	80036b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e150      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470000 	.word	0x42470000
 80036b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ea      	bne.n	8003696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8097 	beq.w	80037fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	4b7d      	ldr	r3, [pc, #500]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
 80036ee:	4b7a      	ldr	r3, [pc, #488]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b77      	ldr	r3, [pc, #476]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370a:	4b74      	ldr	r3, [pc, #464]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fe f875 	bl	8001804 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fe f871 	bl	8001804 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e10c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_OscConfig+0x474>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x2ea>
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x30c>
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a5e      	ldr	r2, [pc, #376]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
 8003766:	4b5c      	ldr	r3, [pc, #368]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a5b      	ldr	r2, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003774:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	4a57      	ldr	r2, [pc, #348]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	; 0x70
 8003780:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a54      	ldr	r2, [pc, #336]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0304 	bic.w	r3, r3, #4
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f836 	bl	8001804 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fe f832 	bl	8001804 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0cb      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCC_OscConfig+0x334>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fe f820 	bl	8001804 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe f81c 	bl	8001804 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0b5      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	4a38      	ldr	r2, [pc, #224]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a1 	beq.w	8003948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b08      	cmp	r3, #8
 8003810:	d05c      	beq.n	80038cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d141      	bne.n	800389e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fff0 	bl	8001804 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd ffec 	bl	8001804 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e087      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	491b      	ldr	r1, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd ffc5 	bl	8001804 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd ffc1 	bl	8001804 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e05c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x416>
 800389c:	e054      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd ffae 	bl	8001804 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd ffaa 	bl	8001804 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e045      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x444>
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e038      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000
 80038e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x4ec>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d028      	beq.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d121      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800391a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391c:	4293      	cmp	r3, r2
 800391e:	d111      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	3b01      	subs	r3, #1
 800392e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0cc      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b68      	ldr	r3, [pc, #416]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d90c      	bls.n	8003994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d044      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d119      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e067      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4934      	ldr	r1, [pc, #208]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fedc 	bl	8001804 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fd fed8 	bl	8001804 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e04f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d20c      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490a      	ldr	r1, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fe3c 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00
 8003b14:	40023800 	.word	0x40023800
 8003b18:	080073ec 	.word	0x080073ec
 8003b1c:	20000004 	.word	0x20000004
 8003b20:	20000008 	.word	0x20000008

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b094      	sub	sp, #80	; 0x50
 8003b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b30:	2300      	movs	r3, #0
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4b79      	ldr	r3, [pc, #484]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d00d      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	f200 80e1 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b56:	e0db      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b73      	ldr	r3, [pc, #460]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b5c:	e0db      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b64:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	2200      	movs	r2, #0
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	2300      	movs	r3, #0
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bdc:	4659      	mov	r1, fp
 8003bde:	eb63 0901 	sbc.w	r9, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf6:	4690      	mov	r8, r2
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb18 0303 	adds.w	r3, r8, r3
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	462b      	mov	r3, r5
 8003c04:	eb49 0303 	adc.w	r3, r9, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c16:	4629      	mov	r1, r5
 8003c18:	024b      	lsls	r3, r1, #9
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c20:	4621      	mov	r1, r4
 8003c22:	024a      	lsls	r2, r1, #9
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c34:	f7fc fb34 	bl	80002a0 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6e:	0150      	lsls	r0, r2, #5
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4641      	mov	r1, r8
 8003c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c94:	ebb2 040a 	subs.w	r4, r2, sl
 8003c98:	eb63 050b 	sbc.w	r5, r3, fp
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	eb45 0303 	adc.w	r3, r5, r3
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	028b      	lsls	r3, r1, #10
 8003cce:	4621      	mov	r1, r4
 8003cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	028a      	lsls	r2, r1, #10
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	f7fc fada 	bl	80002a0 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3750      	adds	r7, #80	; 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	080073fc 	.word	0x080073fc

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	080073fc 	.word	0x080073fc

08003d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e041      	b.n	8003e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd fa94 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 fc70 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d001      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04e      	b.n	8003eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d022      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x80>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d111      	bne.n	8003edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d010      	beq.n	8003eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	e007      	b.n	8003eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40001800 	.word	0x40001800

08003f18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e041      	b.n	8003fae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd f9f4 	bl	800132c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 fbb0 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x24>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e022      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d109      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x3e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e015      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x58>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e008      	b.n	8004022 <HAL_TIM_PWM_Start+0x6a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07c      	b.n	8004124 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0x82>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	e013      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0x92>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	e00b      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d104      	bne.n	800405a <HAL_TIM_PWM_Start+0xa2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	e003      	b.n	8004062 <HAL_TIM_PWM_Start+0xaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	6839      	ldr	r1, [r7, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fe10 	bl	8004c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_TIM_PWM_Start+0x174>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_PWM_Start+0xcc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <HAL_TIM_PWM_Start+0x178>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_TIM_PWM_Start+0xd0>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_TIM_PWM_Start+0xd2>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a22      	ldr	r2, [pc, #136]	; (800412c <HAL_TIM_PWM_Start+0x174>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d01d      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_TIM_PWM_Start+0x17c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_TIM_PWM_Start+0x180>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_TIM_PWM_Start+0x184>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_TIM_PWM_Start+0x178>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_TIM_PWM_Start+0x188>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_PWM_Start+0x136>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <HAL_TIM_PWM_Start+0x18c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d111      	bne.n	8004112 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d010      	beq.n	8004122 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	e007      	b.n	8004122 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40001800 	.word	0x40001800

08004148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b02      	cmp	r3, #2
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0202 	mvn.w	r2, #2
 8004174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa77 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa69 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa7a 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0204 	mvn.w	r2, #4
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa4d 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa3f 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa50 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b08      	cmp	r3, #8
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0208 	mvn.w	r2, #8
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa23 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa15 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa26 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9f9 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9eb 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9fc 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0201 	mvn.w	r2, #1
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc fefa 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b80      	cmp	r3, #128	; 0x80
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fd78 	bl	8004de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9c1 	bl	80046a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b20      	cmp	r3, #32
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0220 	mvn.w	r2, #32
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd42 	bl	8004dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004372:	2302      	movs	r3, #2
 8004374:	e0ae      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	f200 809f 	bhi.w	80044c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080044c5 	.word	0x080044c5
 8004394:	080044c5 	.word	0x080044c5
 8004398:	080044c5 	.word	0x080044c5
 800439c:	08004401 	.word	0x08004401
 80043a0:	080044c5 	.word	0x080044c5
 80043a4:	080044c5 	.word	0x080044c5
 80043a8:	080044c5 	.word	0x080044c5
 80043ac:	08004443 	.word	0x08004443
 80043b0:	080044c5 	.word	0x080044c5
 80043b4:	080044c5 	.word	0x080044c5
 80043b8:	080044c5 	.word	0x080044c5
 80043bc:	08004483 	.word	0x08004483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fa18 	bl	80047fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	619a      	str	r2, [r3, #24]
      break;
 80043fe:	e064      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fa68 	bl	80048dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	619a      	str	r2, [r3, #24]
      break;
 8004440:	e043      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fabd 	bl	80049c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0208 	orr.w	r2, r2, #8
 800445c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0204 	bic.w	r2, r2, #4
 800446c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
      break;
 8004480:	e023      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fb11 	bl	8004ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	61da      	str	r2, [r3, #28]
      break;
 80044c2:	e002      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e0b4      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x186>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004530:	d03e      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004536:	f200 8087 	bhi.w	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453e:	f000 8086 	beq.w	800464e <HAL_TIM_ConfigClockSource+0x172>
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	d87f      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b70      	cmp	r3, #112	; 0x70
 800454a:	d01a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xa6>
 800454c:	2b70      	cmp	r3, #112	; 0x70
 800454e:	d87b      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b60      	cmp	r3, #96	; 0x60
 8004552:	d050      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004554:	2b60      	cmp	r3, #96	; 0x60
 8004556:	d877      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b50      	cmp	r3, #80	; 0x50
 800455a:	d03c      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0xfa>
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d873      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d058      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x13a>
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d86f      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b30      	cmp	r3, #48	; 0x30
 800456a:	d064      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	d86b      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d060      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d867      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d05a      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	e062      	b.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6899      	ldr	r1, [r3, #8]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f000 fb5d 	bl	8004c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	609a      	str	r2, [r3, #8]
      break;
 80045ae:	e04f      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f000 fb46 	bl	8004c50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d2:	609a      	str	r2, [r3, #8]
      break;
 80045d4:	e03c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 faba 	bl	8004b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2150      	movs	r1, #80	; 0x50
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb13 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 80045f4:	e02c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	461a      	mov	r2, r3
 8004604:	f000 fad9 	bl	8004bba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2160      	movs	r1, #96	; 0x60
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb03 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004614:	e01c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	461a      	mov	r2, r3
 8004624:	f000 fa9a 	bl	8004b5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2140      	movs	r1, #64	; 0x40
 800462e:	4618      	mov	r0, r3
 8004630:	f000 faf3 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004634:	e00c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 faea 	bl	8004c1a <TIM_ITRx_SetConfig>
      break;
 8004646:	e003      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e000      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800464e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a40      	ldr	r2, [pc, #256]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <TIM_Base_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d027      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d023      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <TIM_Base_SetConfig+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d017      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <TIM_Base_SetConfig+0x128>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <TIM_Base_SetConfig+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <TIM_Base_SetConfig+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <TIM_Base_SetConfig+0x134>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a24      	ldr	r2, [pc, #144]	; (80047f4 <TIM_Base_SetConfig+0x138>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <TIM_Base_SetConfig+0x13c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d103      	bne.n	80047bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	615a      	str	r2, [r3, #20]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40001800 	.word	0x40001800
 80047f4:	40001c00 	.word	0x40001c00
 80047f8:	40002000 	.word	0x40002000

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0201 	bic.w	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0302 	bic.w	r3, r3, #2
 8004844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <TIM_OC1_SetConfig+0xd8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_OC1_SetConfig+0x64>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <TIM_OC1_SetConfig+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10c      	bne.n	800487a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0308 	bic.w	r3, r3, #8
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <TIM_OC1_SetConfig+0xd8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_OC1_SetConfig+0x8e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <TIM_OC1_SetConfig+0xdc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40010400 	.word	0x40010400

080048dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f023 0210 	bic.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <TIM_OC2_SetConfig+0xe4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_OC2_SetConfig+0x68>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <TIM_OC2_SetConfig+0xe8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10d      	bne.n	8004960 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <TIM_OC2_SetConfig+0xe4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC2_SetConfig+0x94>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <TIM_OC2_SetConfig+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d113      	bne.n	8004998 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400

080049c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <TIM_OC3_SetConfig+0xe0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_OC3_SetConfig+0x66>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a20      	ldr	r2, [pc, #128]	; (8004aac <TIM_OC3_SetConfig+0xe4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10d      	bne.n	8004a4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <TIM_OC3_SetConfig+0xe0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC3_SetConfig+0x92>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC3_SetConfig+0xe4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40010400 	.word	0x40010400

08004ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <TIM_OC4_SetConfig+0xa4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC4_SetConfig+0x68>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <TIM_OC4_SetConfig+0xa8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40010400 	.word	0x40010400

08004b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 030a 	bic.w	r3, r3, #10
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	621a      	str	r2, [r3, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b087      	sub	sp, #28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0210 	bic.w	r2, r3, #16
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	621a      	str	r2, [r3, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f043 0307 	orr.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	609a      	str	r2, [r3, #8]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e05a      	b.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10c      	bne.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e03f      	b.n	8004e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fb3c 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fe1d 	bl	8005a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b08a      	sub	sp, #40	; 0x28
 8004e9a:	af02      	add	r7, sp, #8
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d17c      	bne.n	8004fb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_UART_Transmit+0x2c>
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e075      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_UART_Transmit+0x3e>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e06e      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fc fc8b 	bl	8001804 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x82>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f28:	e02a      	b.n	8004f80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2180      	movs	r1, #128	; 0x80
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb9b 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e036      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e007      	b.n	8004f72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1cf      	bne.n	8004f2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fb6b 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e006      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b08a      	sub	sp, #40	; 0x28
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	f040 808c 	bne.w	80050f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Receive+0x2e>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e084      	b.n	80050f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Receive+0x40>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e07d      	b.n	80050f6 <HAL_UART_Receive+0x13c>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2222      	movs	r2, #34	; 0x22
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005016:	f7fc fbf5 	bl	8001804 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d108      	bne.n	8005044 <HAL_UART_Receive+0x8a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d104      	bne.n	8005044 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	e003      	b.n	800504c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005054:	e043      	b.n	80050de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	2120      	movs	r1, #32
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fb05 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e042      	b.n	80050f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10c      	bne.n	8005090 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005082:	b29a      	uxth	r2, r3
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	3302      	adds	r3, #2
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e01f      	b.n	80050d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005098:	d007      	beq.n	80050aa <HAL_UART_Receive+0xf0>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_UART_Receive+0xfe>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e008      	b.n	80050ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1b6      	bne.n	8005056 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b0ba      	sub	sp, #232	; 0xe8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800513e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_UART_IRQHandler+0x66>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fbd3 	bl	800590a <UART_Receive_IT>
      return;
 8005164:	e256      	b.n	8005614 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80de 	beq.w	800532c <HAL_UART_IRQHandler+0x22c>
 8005170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005180:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80d1 	beq.w	800532c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800518a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <HAL_UART_IRQHandler+0xae>
 8005196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f043 0201 	orr.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <HAL_UART_IRQHandler+0xd2>
 80051ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f043 0202 	orr.w	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <HAL_UART_IRQHandler+0xf6>
 80051de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <HAL_UART_IRQHandler+0x126>
 8005202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d105      	bne.n	800521a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800520e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0208 	orr.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 81ed 	beq.w	800560a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_UART_IRQHandler+0x14e>
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb5e 	bl	800590a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_UART_IRQHandler+0x17a>
 8005272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04f      	beq.n	800531a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa66 	bl	800574c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d141      	bne.n	8005312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3314      	adds	r3, #20
 80052b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1d9      	bne.n	800528e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d013      	beq.n	800530a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	4a7d      	ldr	r2, [pc, #500]	; (80054dc <HAL_UART_IRQHandler+0x3dc>)
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fd f8c5 	bl	800247e <HAL_DMA_Abort_IT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005304:	4610      	mov	r0, r2
 8005306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	e00e      	b.n	8005328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f99a 	bl	8005644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	e00a      	b.n	8005328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f996 	bl	8005644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	e006      	b.n	8005328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f992 	bl	8005644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005326:	e170      	b.n	800560a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	bf00      	nop
    return;
 800532a:	e16e      	b.n	800560a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	f040 814a 	bne.w	80055ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8143 	beq.w	80055ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 813c 	beq.w	80055ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	f040 80b4 	bne.w	80054e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8140 	beq.w	800560e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005396:	429a      	cmp	r2, r3
 8005398:	f080 8139 	bcs.w	800560e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ae:	f000 8088 	beq.w	80054c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1d9      	bne.n	80053b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800540e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3314      	adds	r3, #20
 800541e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005422:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005426:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800542a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e1      	bne.n	80053fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800544a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800545e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005460:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005464:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800546c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005492:	f023 0310 	bic.w	r3, r3, #16
 8005496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80054a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e3      	bne.n	8005480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fc ff6e 	bl	800239e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8c0 	bl	8005658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054d8:	e099      	b.n	800560e <HAL_UART_IRQHandler+0x50e>
 80054da:	bf00      	nop
 80054dc:	08005813 	.word	0x08005813
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 808b 	beq.w	8005612 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8086 	beq.w	8005612 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800552a:	647a      	str	r2, [r7, #68]	; 0x44
 800552c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005530:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e3      	bne.n	8005506 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	623b      	str	r3, [r7, #32]
   return(result);
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005562:	633a      	str	r2, [r7, #48]	; 0x30
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e3      	bne.n	800553e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	60fb      	str	r3, [r7, #12]
   return(result);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0310 	bic.w	r3, r3, #16
 800559a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055a8:	61fa      	str	r2, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	617b      	str	r3, [r7, #20]
   return(result);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e3      	bne.n	8005584 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f848 	bl	8005658 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055c8:	e023      	b.n	8005612 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_UART_IRQHandler+0x4ea>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f929 	bl	800583a <UART_Transmit_IT>
    return;
 80055e8:	e014      	b.n	8005614 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00e      	beq.n	8005614 <HAL_UART_IRQHandler+0x514>
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f969 	bl	80058da <UART_EndTransmit_IT>
    return;
 8005608:	e004      	b.n	8005614 <HAL_UART_IRQHandler+0x514>
    return;
 800560a:	bf00      	nop
 800560c:	e002      	b.n	8005614 <HAL_UART_IRQHandler+0x514>
      return;
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <HAL_UART_IRQHandler+0x514>
      return;
 8005612:	bf00      	nop
  }
}
 8005614:	37e8      	adds	r7, #232	; 0xe8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b090      	sub	sp, #64	; 0x40
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005680:	e050      	b.n	8005724 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d04c      	beq.n	8005724 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800568a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005690:	f7fc f8b8 	bl	8001804 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569c:	429a      	cmp	r2, r3
 800569e:	d241      	bcs.n	8005724 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056c0:	637a      	str	r2, [r7, #52]	; 0x34
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e5      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	613b      	str	r3, [r7, #16]
   return(result);
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f4:	623a      	str	r2, [r7, #32]
 80056f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69f9      	ldr	r1, [r7, #28]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	61bb      	str	r3, [r7, #24]
   return(result);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e00f      	b.n	8005744 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d09f      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3740      	adds	r7, #64	; 0x40
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b095      	sub	sp, #84	; 0x54
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005774:	643a      	str	r2, [r7, #64]	; 0x40
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800577a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e5      	bne.n	8005754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	61fb      	str	r3, [r7, #28]
   return(result);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3314      	adds	r3, #20
 80057a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d119      	bne.n	80057f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0310 	bic.w	r3, r3, #16
 80057da:	647b      	str	r3, [r7, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057e4:	61ba      	str	r2, [r7, #24]
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	613b      	str	r3, [r7, #16]
   return(result);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005806:	bf00      	nop
 8005808:	3754      	adds	r7, #84	; 0x54
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff ff09 	bl	8005644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b21      	cmp	r3, #33	; 0x21
 800584c:	d13e      	bne.n	80058cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	d114      	bne.n	8005882 <UART_Transmit_IT+0x48>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d110      	bne.n	8005882 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005874:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	621a      	str	r2, [r3, #32]
 8005880:	e008      	b.n	8005894 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6211      	str	r1, [r2, #32]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4619      	mov	r1, r3
 80058a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10f      	bne.n	80058c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e000      	b.n	80058ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fe8e 	bl	800561c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b08c      	sub	sp, #48	; 0x30
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b22      	cmp	r3, #34	; 0x22
 800591c:	f040 80ab 	bne.w	8005a76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005928:	d117      	bne.n	800595a <UART_Receive_IT+0x50>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d113      	bne.n	800595a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005932:	2300      	movs	r3, #0
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005948:	b29a      	uxth	r2, r3
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	1c9a      	adds	r2, r3, #2
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
 8005958:	e026      	b.n	80059a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	d007      	beq.n	800597e <UART_Receive_IT+0x74>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <UART_Receive_IT+0x82>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	e008      	b.n	800599e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	4619      	mov	r1, r3
 80059b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d15a      	bne.n	8005a72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0220 	bic.w	r2, r2, #32
 80059ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d135      	bne.n	8005a68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	613b      	str	r3, [r7, #16]
   return(result);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	623a      	str	r2, [r7, #32]
 8005a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	69f9      	ldr	r1, [r7, #28]
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d10a      	bne.n	8005a5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fdf9 	bl	8005658 <HAL_UARTEx_RxEventCallback>
 8005a66:	e002      	b.n	8005a6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fde1 	bl	8005630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e002      	b.n	8005a78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e000      	b.n	8005a78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
  }
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3730      	adds	r7, #48	; 0x30
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b0c0      	sub	sp, #256	; 0x100
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	68d9      	ldr	r1, [r3, #12]
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	ea40 0301 	orr.w	r3, r0, r1
 8005aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ad8:	f021 010c 	bic.w	r1, r1, #12
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	6999      	ldr	r1, [r3, #24]
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	ea40 0301 	orr.w	r3, r0, r1
 8005b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b8f      	ldr	r3, [pc, #572]	; (8005d4c <UART_SetConfig+0x2cc>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d005      	beq.n	8005b20 <UART_SetConfig+0xa0>
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b8d      	ldr	r3, [pc, #564]	; (8005d50 <UART_SetConfig+0x2d0>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d104      	bne.n	8005b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b20:	f7fe f926 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8005b24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b28:	e003      	b.n	8005b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7fe f90d 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8005b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3c:	f040 810c 	bne.w	8005d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b52:	4622      	mov	r2, r4
 8005b54:	462b      	mov	r3, r5
 8005b56:	1891      	adds	r1, r2, r2
 8005b58:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b5a:	415b      	adcs	r3, r3
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b62:	4621      	mov	r1, r4
 8005b64:	eb12 0801 	adds.w	r8, r2, r1
 8005b68:	4629      	mov	r1, r5
 8005b6a:	eb43 0901 	adc.w	r9, r3, r1
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b82:	4690      	mov	r8, r2
 8005b84:	4699      	mov	r9, r3
 8005b86:	4623      	mov	r3, r4
 8005b88:	eb18 0303 	adds.w	r3, r8, r3
 8005b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b90:	462b      	mov	r3, r5
 8005b92:	eb49 0303 	adc.w	r3, r9, r3
 8005b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bae:	460b      	mov	r3, r1
 8005bb0:	18db      	adds	r3, r3, r3
 8005bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	eb42 0303 	adc.w	r3, r2, r3
 8005bba:	657b      	str	r3, [r7, #84]	; 0x54
 8005bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bc4:	f7fa fb6c 	bl	80002a0 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b61      	ldr	r3, [pc, #388]	; (8005d54 <UART_SetConfig+0x2d4>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	011c      	lsls	r4, r3, #4
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0b01 	adc.w	fp, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c18:	4692      	mov	sl, r2
 8005c1a:	469b      	mov	fp, r3
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c26:	464b      	mov	r3, r9
 8005c28:	eb4b 0303 	adc.w	r3, fp, r3
 8005c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c44:	460b      	mov	r3, r1
 8005c46:	18db      	adds	r3, r3, r3
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	647b      	str	r3, [r7, #68]	; 0x44
 8005c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c5a:	f7fa fb21 	bl	80002a0 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <UART_SetConfig+0x2d4>)
 8005c66:	fba3 2301 	umull	r2, r3, r3, r1
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2264      	movs	r2, #100	; 0x64
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	1acb      	subs	r3, r1, r3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c7a:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <UART_SetConfig+0x2d4>)
 8005c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c88:	441c      	add	r4, r3
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cac:	4641      	mov	r1, r8
 8005cae:	1851      	adds	r1, r2, r1
 8005cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	414b      	adcs	r3, r1
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cc4:	4659      	mov	r1, fp
 8005cc6:	00cb      	lsls	r3, r1, #3
 8005cc8:	4651      	mov	r1, sl
 8005cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cce:	4651      	mov	r1, sl
 8005cd0:	00ca      	lsls	r2, r1, #3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d00:	460b      	mov	r3, r1
 8005d02:	18db      	adds	r3, r3, r3
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d06:	4613      	mov	r3, r2
 8005d08:	eb42 0303 	adc.w	r3, r2, r3
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d16:	f7fa fac3 	bl	80002a0 <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <UART_SetConfig+0x2d4>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	; 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	3332      	adds	r3, #50	; 0x32
 8005d32:	4a08      	ldr	r2, [pc, #32]	; (8005d54 <UART_SetConfig+0x2d4>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 0207 	and.w	r2, r3, #7
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4422      	add	r2, r4
 8005d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d48:	e105      	b.n	8005f56 <UART_SetConfig+0x4d6>
 8005d4a:	bf00      	nop
 8005d4c:	40011000 	.word	0x40011000
 8005d50:	40011400 	.word	0x40011400
 8005d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	1891      	adds	r1, r2, r2
 8005d70:	6239      	str	r1, [r7, #32]
 8005d72:	415b      	adcs	r3, r3
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	1854      	adds	r4, r2, r1
 8005d7e:	4649      	mov	r1, r9
 8005d80:	eb43 0501 	adc.w	r5, r3, r1
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	00eb      	lsls	r3, r5, #3
 8005d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d92:	00e2      	lsls	r2, r4, #3
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	4643      	mov	r3, r8
 8005d9a:	18e3      	adds	r3, r4, r3
 8005d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005da0:	464b      	mov	r3, r9
 8005da2:	eb45 0303 	adc.w	r3, r5, r3
 8005da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005db6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	008b      	lsls	r3, r1, #2
 8005dca:	4621      	mov	r1, r4
 8005dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	008a      	lsls	r2, r1, #2
 8005dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dd8:	f7fa fa62 	bl	80002a0 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <UART_SetConfig+0x4e4>)
 8005de2:	fba3 2302 	umull	r2, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	011c      	lsls	r4, r3, #4
 8005dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005df4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	1891      	adds	r1, r2, r2
 8005e02:	61b9      	str	r1, [r7, #24]
 8005e04:	415b      	adcs	r3, r3
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	1851      	adds	r1, r2, r1
 8005e10:	6139      	str	r1, [r7, #16]
 8005e12:	4649      	mov	r1, r9
 8005e14:	414b      	adcs	r3, r1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e24:	4659      	mov	r1, fp
 8005e26:	00cb      	lsls	r3, r1, #3
 8005e28:	4651      	mov	r1, sl
 8005e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e2e:	4651      	mov	r1, sl
 8005e30:	00ca      	lsls	r2, r1, #3
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	4642      	mov	r2, r8
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e40:	464b      	mov	r3, r9
 8005e42:	460a      	mov	r2, r1
 8005e44:	eb42 0303 	adc.w	r3, r2, r3
 8005e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e64:	4649      	mov	r1, r9
 8005e66:	008b      	lsls	r3, r1, #2
 8005e68:	4641      	mov	r1, r8
 8005e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6e:	4641      	mov	r1, r8
 8005e70:	008a      	lsls	r2, r1, #2
 8005e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e76:	f7fa fa13 	bl	80002a0 <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <UART_SetConfig+0x4e4>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	2164      	movs	r1, #100	; 0x64
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	3332      	adds	r3, #50	; 0x32
 8005e92:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <UART_SetConfig+0x4e4>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e9e:	441c      	add	r4, r3
 8005ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005eae:	4642      	mov	r2, r8
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	1851      	adds	r1, r2, r1
 8005ec2:	6039      	str	r1, [r7, #0]
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	414b      	adcs	r3, r1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ed6:	4659      	mov	r1, fp
 8005ed8:	00cb      	lsls	r3, r1, #3
 8005eda:	4651      	mov	r1, sl
 8005edc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	00ca      	lsls	r2, r1, #3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4642      	mov	r2, r8
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef0:	464b      	mov	r3, r9
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	eb42 0303 	adc.w	r3, r2, r3
 8005ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	663b      	str	r3, [r7, #96]	; 0x60
 8005f04:	667a      	str	r2, [r7, #100]	; 0x64
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f12:	4649      	mov	r1, r9
 8005f14:	008b      	lsls	r3, r1, #2
 8005f16:	4641      	mov	r1, r8
 8005f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	008a      	lsls	r2, r1, #2
 8005f20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f24:	f7fa f9bc 	bl	80002a0 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <UART_SetConfig+0x4e4>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2164      	movs	r1, #100	; 0x64
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	; 0x32
 8005f40:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <UART_SetConfig+0x4e4>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4422      	add	r2, r4
 8005f54:	609a      	str	r2, [r3, #8]
}
 8005f56:	bf00      	nop
 8005f58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f62:	bf00      	nop
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <__errno>:
 8005f68:	4b01      	ldr	r3, [pc, #4]	; (8005f70 <__errno+0x8>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000010 	.word	0x20000010

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4d0d      	ldr	r5, [pc, #52]	; (8005fac <__libc_init_array+0x38>)
 8005f78:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7a:	1b64      	subs	r4, r4, r5
 8005f7c:	10a4      	asrs	r4, r4, #2
 8005f7e:	2600      	movs	r6, #0
 8005f80:	42a6      	cmp	r6, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	4d0b      	ldr	r5, [pc, #44]	; (8005fb4 <__libc_init_array+0x40>)
 8005f86:	4c0c      	ldr	r4, [pc, #48]	; (8005fb8 <__libc_init_array+0x44>)
 8005f88:	f001 f9be 	bl	8007308 <_init>
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	2600      	movs	r6, #0
 8005f92:	42a6      	cmp	r6, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9c:	4798      	blx	r3
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa6:	4798      	blx	r3
 8005fa8:	3601      	adds	r6, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	080074a4 	.word	0x080074a4
 8005fb0:	080074a4 	.word	0x080074a4
 8005fb4:	080074a4 	.word	0x080074a4
 8005fb8:	080074a8 	.word	0x080074a8

08005fbc <memset>:
 8005fbc:	4402      	add	r2, r0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <iprintf>:
 8005fcc:	b40f      	push	{r0, r1, r2, r3}
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <iprintf+0x2c>)
 8005fd0:	b513      	push	{r0, r1, r4, lr}
 8005fd2:	681c      	ldr	r4, [r3, #0]
 8005fd4:	b124      	cbz	r4, 8005fe0 <iprintf+0x14>
 8005fd6:	69a3      	ldr	r3, [r4, #24]
 8005fd8:	b913      	cbnz	r3, 8005fe0 <iprintf+0x14>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f8ba 	bl	8006154 <__sinit>
 8005fe0:	ab05      	add	r3, sp, #20
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	68a1      	ldr	r1, [r4, #8]
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fb6d 	bl	80066c8 <_vfiprintf_r>
 8005fee:	b002      	add	sp, #8
 8005ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff4:	b004      	add	sp, #16
 8005ff6:	4770      	bx	lr
 8005ff8:	20000010 	.word	0x20000010

08005ffc <sniprintf>:
 8005ffc:	b40c      	push	{r2, r3}
 8005ffe:	b530      	push	{r4, r5, lr}
 8006000:	4b17      	ldr	r3, [pc, #92]	; (8006060 <sniprintf+0x64>)
 8006002:	1e0c      	subs	r4, r1, #0
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	b09d      	sub	sp, #116	; 0x74
 8006008:	da08      	bge.n	800601c <sniprintf+0x20>
 800600a:	238b      	movs	r3, #139	; 0x8b
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	b01d      	add	sp, #116	; 0x74
 8006014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006018:	b002      	add	sp, #8
 800601a:	4770      	bx	lr
 800601c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006020:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006024:	bf14      	ite	ne
 8006026:	f104 33ff 	addne.w	r3, r4, #4294967295
 800602a:	4623      	moveq	r3, r4
 800602c:	9304      	str	r3, [sp, #16]
 800602e:	9307      	str	r3, [sp, #28]
 8006030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006034:	9002      	str	r0, [sp, #8]
 8006036:	9006      	str	r0, [sp, #24]
 8006038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800603c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800603e:	ab21      	add	r3, sp, #132	; 0x84
 8006040:	a902      	add	r1, sp, #8
 8006042:	4628      	mov	r0, r5
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f000 fa15 	bl	8006474 <_svfiprintf_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	bfbc      	itt	lt
 800604e:	238b      	movlt	r3, #139	; 0x8b
 8006050:	602b      	strlt	r3, [r5, #0]
 8006052:	2c00      	cmp	r4, #0
 8006054:	d0dd      	beq.n	8006012 <sniprintf+0x16>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e7d9      	b.n	8006012 <sniprintf+0x16>
 800605e:	bf00      	nop
 8006060:	20000010 	.word	0x20000010

08006064 <siprintf>:
 8006064:	b40e      	push	{r1, r2, r3}
 8006066:	b500      	push	{lr}
 8006068:	b09c      	sub	sp, #112	; 0x70
 800606a:	ab1d      	add	r3, sp, #116	; 0x74
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	9006      	str	r0, [sp, #24]
 8006070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006074:	4809      	ldr	r0, [pc, #36]	; (800609c <siprintf+0x38>)
 8006076:	9107      	str	r1, [sp, #28]
 8006078:	9104      	str	r1, [sp, #16]
 800607a:	4909      	ldr	r1, [pc, #36]	; (80060a0 <siprintf+0x3c>)
 800607c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006080:	9105      	str	r1, [sp, #20]
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	a902      	add	r1, sp, #8
 8006088:	f000 f9f4 	bl	8006474 <_svfiprintf_r>
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	b01c      	add	sp, #112	; 0x70
 8006094:	f85d eb04 	ldr.w	lr, [sp], #4
 8006098:	b003      	add	sp, #12
 800609a:	4770      	bx	lr
 800609c:	20000010 	.word	0x20000010
 80060a0:	ffff0208 	.word	0xffff0208

080060a4 <std>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	e9c0 3300 	strd	r3, r3, [r0]
 80060ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b2:	6083      	str	r3, [r0, #8]
 80060b4:	8181      	strh	r1, [r0, #12]
 80060b6:	6643      	str	r3, [r0, #100]	; 0x64
 80060b8:	81c2      	strh	r2, [r0, #14]
 80060ba:	6183      	str	r3, [r0, #24]
 80060bc:	4619      	mov	r1, r3
 80060be:	2208      	movs	r2, #8
 80060c0:	305c      	adds	r0, #92	; 0x5c
 80060c2:	f7ff ff7b 	bl	8005fbc <memset>
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <std+0x38>)
 80060c8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <std+0x3c>)
 80060cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <std+0x40>)
 80060d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <std+0x44>)
 80060d4:	6224      	str	r4, [r4, #32]
 80060d6:	6323      	str	r3, [r4, #48]	; 0x30
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	bf00      	nop
 80060dc:	08006c71 	.word	0x08006c71
 80060e0:	08006c93 	.word	0x08006c93
 80060e4:	08006ccb 	.word	0x08006ccb
 80060e8:	08006cef 	.word	0x08006cef

080060ec <_cleanup_r>:
 80060ec:	4901      	ldr	r1, [pc, #4]	; (80060f4 <_cleanup_r+0x8>)
 80060ee:	f000 b8af 	b.w	8006250 <_fwalk_reent>
 80060f2:	bf00      	nop
 80060f4:	08006fc9 	.word	0x08006fc9

080060f8 <__sfmoreglue>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	2268      	movs	r2, #104	; 0x68
 80060fc:	1e4d      	subs	r5, r1, #1
 80060fe:	4355      	muls	r5, r2
 8006100:	460e      	mov	r6, r1
 8006102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006106:	f000 f8e5 	bl	80062d4 <_malloc_r>
 800610a:	4604      	mov	r4, r0
 800610c:	b140      	cbz	r0, 8006120 <__sfmoreglue+0x28>
 800610e:	2100      	movs	r1, #0
 8006110:	e9c0 1600 	strd	r1, r6, [r0]
 8006114:	300c      	adds	r0, #12
 8006116:	60a0      	str	r0, [r4, #8]
 8006118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800611c:	f7ff ff4e 	bl	8005fbc <memset>
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}

08006124 <__sfp_lock_acquire>:
 8006124:	4801      	ldr	r0, [pc, #4]	; (800612c <__sfp_lock_acquire+0x8>)
 8006126:	f000 b8b3 	b.w	8006290 <__retarget_lock_acquire_recursive>
 800612a:	bf00      	nop
 800612c:	2000029d 	.word	0x2000029d

08006130 <__sfp_lock_release>:
 8006130:	4801      	ldr	r0, [pc, #4]	; (8006138 <__sfp_lock_release+0x8>)
 8006132:	f000 b8ae 	b.w	8006292 <__retarget_lock_release_recursive>
 8006136:	bf00      	nop
 8006138:	2000029d 	.word	0x2000029d

0800613c <__sinit_lock_acquire>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__sinit_lock_acquire+0x8>)
 800613e:	f000 b8a7 	b.w	8006290 <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	2000029e 	.word	0x2000029e

08006148 <__sinit_lock_release>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__sinit_lock_release+0x8>)
 800614a:	f000 b8a2 	b.w	8006292 <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	2000029e 	.word	0x2000029e

08006154 <__sinit>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	f7ff fff0 	bl	800613c <__sinit_lock_acquire>
 800615c:	69a3      	ldr	r3, [r4, #24]
 800615e:	b11b      	cbz	r3, 8006168 <__sinit+0x14>
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f7ff bff0 	b.w	8006148 <__sinit_lock_release>
 8006168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800616c:	6523      	str	r3, [r4, #80]	; 0x50
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <__sinit+0x68>)
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <__sinit+0x6c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	62a2      	str	r2, [r4, #40]	; 0x28
 8006176:	42a3      	cmp	r3, r4
 8006178:	bf04      	itt	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	61a3      	streq	r3, [r4, #24]
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f820 	bl	80061c4 <__sfp>
 8006184:	6060      	str	r0, [r4, #4]
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f81c 	bl	80061c4 <__sfp>
 800618c:	60a0      	str	r0, [r4, #8]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f818 	bl	80061c4 <__sfp>
 8006194:	2200      	movs	r2, #0
 8006196:	60e0      	str	r0, [r4, #12]
 8006198:	2104      	movs	r1, #4
 800619a:	6860      	ldr	r0, [r4, #4]
 800619c:	f7ff ff82 	bl	80060a4 <std>
 80061a0:	68a0      	ldr	r0, [r4, #8]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2109      	movs	r1, #9
 80061a6:	f7ff ff7d 	bl	80060a4 <std>
 80061aa:	68e0      	ldr	r0, [r4, #12]
 80061ac:	2202      	movs	r2, #2
 80061ae:	2112      	movs	r1, #18
 80061b0:	f7ff ff78 	bl	80060a4 <std>
 80061b4:	2301      	movs	r3, #1
 80061b6:	61a3      	str	r3, [r4, #24]
 80061b8:	e7d2      	b.n	8006160 <__sinit+0xc>
 80061ba:	bf00      	nop
 80061bc:	08007404 	.word	0x08007404
 80061c0:	080060ed 	.word	0x080060ed

080061c4 <__sfp>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	4607      	mov	r7, r0
 80061c8:	f7ff ffac 	bl	8006124 <__sfp_lock_acquire>
 80061cc:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <__sfp+0x84>)
 80061ce:	681e      	ldr	r6, [r3, #0]
 80061d0:	69b3      	ldr	r3, [r6, #24]
 80061d2:	b913      	cbnz	r3, 80061da <__sfp+0x16>
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7ff ffbd 	bl	8006154 <__sinit>
 80061da:	3648      	adds	r6, #72	; 0x48
 80061dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	d503      	bpl.n	80061ec <__sfp+0x28>
 80061e4:	6833      	ldr	r3, [r6, #0]
 80061e6:	b30b      	cbz	r3, 800622c <__sfp+0x68>
 80061e8:	6836      	ldr	r6, [r6, #0]
 80061ea:	e7f7      	b.n	80061dc <__sfp+0x18>
 80061ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061f0:	b9d5      	cbnz	r5, 8006228 <__sfp+0x64>
 80061f2:	4b16      	ldr	r3, [pc, #88]	; (800624c <__sfp+0x88>)
 80061f4:	60e3      	str	r3, [r4, #12]
 80061f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061fa:	6665      	str	r5, [r4, #100]	; 0x64
 80061fc:	f000 f847 	bl	800628e <__retarget_lock_init_recursive>
 8006200:	f7ff ff96 	bl	8006130 <__sfp_lock_release>
 8006204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800620c:	6025      	str	r5, [r4, #0]
 800620e:	61a5      	str	r5, [r4, #24]
 8006210:	2208      	movs	r2, #8
 8006212:	4629      	mov	r1, r5
 8006214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006218:	f7ff fed0 	bl	8005fbc <memset>
 800621c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006224:	4620      	mov	r0, r4
 8006226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006228:	3468      	adds	r4, #104	; 0x68
 800622a:	e7d9      	b.n	80061e0 <__sfp+0x1c>
 800622c:	2104      	movs	r1, #4
 800622e:	4638      	mov	r0, r7
 8006230:	f7ff ff62 	bl	80060f8 <__sfmoreglue>
 8006234:	4604      	mov	r4, r0
 8006236:	6030      	str	r0, [r6, #0]
 8006238:	2800      	cmp	r0, #0
 800623a:	d1d5      	bne.n	80061e8 <__sfp+0x24>
 800623c:	f7ff ff78 	bl	8006130 <__sfp_lock_release>
 8006240:	230c      	movs	r3, #12
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	e7ee      	b.n	8006224 <__sfp+0x60>
 8006246:	bf00      	nop
 8006248:	08007404 	.word	0x08007404
 800624c:	ffff0001 	.word	0xffff0001

08006250 <_fwalk_reent>:
 8006250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006254:	4606      	mov	r6, r0
 8006256:	4688      	mov	r8, r1
 8006258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800625c:	2700      	movs	r7, #0
 800625e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006262:	f1b9 0901 	subs.w	r9, r9, #1
 8006266:	d505      	bpl.n	8006274 <_fwalk_reent+0x24>
 8006268:	6824      	ldr	r4, [r4, #0]
 800626a:	2c00      	cmp	r4, #0
 800626c:	d1f7      	bne.n	800625e <_fwalk_reent+0xe>
 800626e:	4638      	mov	r0, r7
 8006270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006274:	89ab      	ldrh	r3, [r5, #12]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d907      	bls.n	800628a <_fwalk_reent+0x3a>
 800627a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800627e:	3301      	adds	r3, #1
 8006280:	d003      	beq.n	800628a <_fwalk_reent+0x3a>
 8006282:	4629      	mov	r1, r5
 8006284:	4630      	mov	r0, r6
 8006286:	47c0      	blx	r8
 8006288:	4307      	orrs	r7, r0
 800628a:	3568      	adds	r5, #104	; 0x68
 800628c:	e7e9      	b.n	8006262 <_fwalk_reent+0x12>

0800628e <__retarget_lock_init_recursive>:
 800628e:	4770      	bx	lr

08006290 <__retarget_lock_acquire_recursive>:
 8006290:	4770      	bx	lr

08006292 <__retarget_lock_release_recursive>:
 8006292:	4770      	bx	lr

08006294 <sbrk_aligned>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4e0e      	ldr	r6, [pc, #56]	; (80062d0 <sbrk_aligned+0x3c>)
 8006298:	460c      	mov	r4, r1
 800629a:	6831      	ldr	r1, [r6, #0]
 800629c:	4605      	mov	r5, r0
 800629e:	b911      	cbnz	r1, 80062a6 <sbrk_aligned+0x12>
 80062a0:	f000 fcd6 	bl	8006c50 <_sbrk_r>
 80062a4:	6030      	str	r0, [r6, #0]
 80062a6:	4621      	mov	r1, r4
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fcd1 	bl	8006c50 <_sbrk_r>
 80062ae:	1c43      	adds	r3, r0, #1
 80062b0:	d00a      	beq.n	80062c8 <sbrk_aligned+0x34>
 80062b2:	1cc4      	adds	r4, r0, #3
 80062b4:	f024 0403 	bic.w	r4, r4, #3
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d007      	beq.n	80062cc <sbrk_aligned+0x38>
 80062bc:	1a21      	subs	r1, r4, r0
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 fcc6 	bl	8006c50 <_sbrk_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d101      	bne.n	80062cc <sbrk_aligned+0x38>
 80062c8:	f04f 34ff 	mov.w	r4, #4294967295
 80062cc:	4620      	mov	r0, r4
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	200002a4 	.word	0x200002a4

080062d4 <_malloc_r>:
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	1ccd      	adds	r5, r1, #3
 80062da:	f025 0503 	bic.w	r5, r5, #3
 80062de:	3508      	adds	r5, #8
 80062e0:	2d0c      	cmp	r5, #12
 80062e2:	bf38      	it	cc
 80062e4:	250c      	movcc	r5, #12
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	4607      	mov	r7, r0
 80062ea:	db01      	blt.n	80062f0 <_malloc_r+0x1c>
 80062ec:	42a9      	cmp	r1, r5
 80062ee:	d905      	bls.n	80062fc <_malloc_r+0x28>
 80062f0:	230c      	movs	r3, #12
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	2600      	movs	r6, #0
 80062f6:	4630      	mov	r0, r6
 80062f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062fc:	4e2e      	ldr	r6, [pc, #184]	; (80063b8 <_malloc_r+0xe4>)
 80062fe:	f000 ff3f 	bl	8007180 <__malloc_lock>
 8006302:	6833      	ldr	r3, [r6, #0]
 8006304:	461c      	mov	r4, r3
 8006306:	bb34      	cbnz	r4, 8006356 <_malloc_r+0x82>
 8006308:	4629      	mov	r1, r5
 800630a:	4638      	mov	r0, r7
 800630c:	f7ff ffc2 	bl	8006294 <sbrk_aligned>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	4604      	mov	r4, r0
 8006314:	d14d      	bne.n	80063b2 <_malloc_r+0xde>
 8006316:	6834      	ldr	r4, [r6, #0]
 8006318:	4626      	mov	r6, r4
 800631a:	2e00      	cmp	r6, #0
 800631c:	d140      	bne.n	80063a0 <_malloc_r+0xcc>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	4631      	mov	r1, r6
 8006322:	4638      	mov	r0, r7
 8006324:	eb04 0803 	add.w	r8, r4, r3
 8006328:	f000 fc92 	bl	8006c50 <_sbrk_r>
 800632c:	4580      	cmp	r8, r0
 800632e:	d13a      	bne.n	80063a6 <_malloc_r+0xd2>
 8006330:	6821      	ldr	r1, [r4, #0]
 8006332:	3503      	adds	r5, #3
 8006334:	1a6d      	subs	r5, r5, r1
 8006336:	f025 0503 	bic.w	r5, r5, #3
 800633a:	3508      	adds	r5, #8
 800633c:	2d0c      	cmp	r5, #12
 800633e:	bf38      	it	cc
 8006340:	250c      	movcc	r5, #12
 8006342:	4629      	mov	r1, r5
 8006344:	4638      	mov	r0, r7
 8006346:	f7ff ffa5 	bl	8006294 <sbrk_aligned>
 800634a:	3001      	adds	r0, #1
 800634c:	d02b      	beq.n	80063a6 <_malloc_r+0xd2>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	442b      	add	r3, r5
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	e00e      	b.n	8006374 <_malloc_r+0xa0>
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	1b52      	subs	r2, r2, r5
 800635a:	d41e      	bmi.n	800639a <_malloc_r+0xc6>
 800635c:	2a0b      	cmp	r2, #11
 800635e:	d916      	bls.n	800638e <_malloc_r+0xba>
 8006360:	1961      	adds	r1, r4, r5
 8006362:	42a3      	cmp	r3, r4
 8006364:	6025      	str	r5, [r4, #0]
 8006366:	bf18      	it	ne
 8006368:	6059      	strne	r1, [r3, #4]
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	bf08      	it	eq
 800636e:	6031      	streq	r1, [r6, #0]
 8006370:	5162      	str	r2, [r4, r5]
 8006372:	604b      	str	r3, [r1, #4]
 8006374:	4638      	mov	r0, r7
 8006376:	f104 060b 	add.w	r6, r4, #11
 800637a:	f000 ff07 	bl	800718c <__malloc_unlock>
 800637e:	f026 0607 	bic.w	r6, r6, #7
 8006382:	1d23      	adds	r3, r4, #4
 8006384:	1af2      	subs	r2, r6, r3
 8006386:	d0b6      	beq.n	80062f6 <_malloc_r+0x22>
 8006388:	1b9b      	subs	r3, r3, r6
 800638a:	50a3      	str	r3, [r4, r2]
 800638c:	e7b3      	b.n	80062f6 <_malloc_r+0x22>
 800638e:	6862      	ldr	r2, [r4, #4]
 8006390:	42a3      	cmp	r3, r4
 8006392:	bf0c      	ite	eq
 8006394:	6032      	streq	r2, [r6, #0]
 8006396:	605a      	strne	r2, [r3, #4]
 8006398:	e7ec      	b.n	8006374 <_malloc_r+0xa0>
 800639a:	4623      	mov	r3, r4
 800639c:	6864      	ldr	r4, [r4, #4]
 800639e:	e7b2      	b.n	8006306 <_malloc_r+0x32>
 80063a0:	4634      	mov	r4, r6
 80063a2:	6876      	ldr	r6, [r6, #4]
 80063a4:	e7b9      	b.n	800631a <_malloc_r+0x46>
 80063a6:	230c      	movs	r3, #12
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	4638      	mov	r0, r7
 80063ac:	f000 feee 	bl	800718c <__malloc_unlock>
 80063b0:	e7a1      	b.n	80062f6 <_malloc_r+0x22>
 80063b2:	6025      	str	r5, [r4, #0]
 80063b4:	e7de      	b.n	8006374 <_malloc_r+0xa0>
 80063b6:	bf00      	nop
 80063b8:	200002a0 	.word	0x200002a0

080063bc <__ssputs_r>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	688e      	ldr	r6, [r1, #8]
 80063c2:	429e      	cmp	r6, r3
 80063c4:	4682      	mov	sl, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	4690      	mov	r8, r2
 80063ca:	461f      	mov	r7, r3
 80063cc:	d838      	bhi.n	8006440 <__ssputs_r+0x84>
 80063ce:	898a      	ldrh	r2, [r1, #12]
 80063d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063d4:	d032      	beq.n	800643c <__ssputs_r+0x80>
 80063d6:	6825      	ldr	r5, [r4, #0]
 80063d8:	6909      	ldr	r1, [r1, #16]
 80063da:	eba5 0901 	sub.w	r9, r5, r1
 80063de:	6965      	ldr	r5, [r4, #20]
 80063e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063e8:	3301      	adds	r3, #1
 80063ea:	444b      	add	r3, r9
 80063ec:	106d      	asrs	r5, r5, #1
 80063ee:	429d      	cmp	r5, r3
 80063f0:	bf38      	it	cc
 80063f2:	461d      	movcc	r5, r3
 80063f4:	0553      	lsls	r3, r2, #21
 80063f6:	d531      	bpl.n	800645c <__ssputs_r+0xa0>
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7ff ff6b 	bl	80062d4 <_malloc_r>
 80063fe:	4606      	mov	r6, r0
 8006400:	b950      	cbnz	r0, 8006418 <__ssputs_r+0x5c>
 8006402:	230c      	movs	r3, #12
 8006404:	f8ca 3000 	str.w	r3, [sl]
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006418:	6921      	ldr	r1, [r4, #16]
 800641a:	464a      	mov	r2, r9
 800641c:	f000 fe88 	bl	8007130 <memcpy>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	6126      	str	r6, [r4, #16]
 800642e:	6165      	str	r5, [r4, #20]
 8006430:	444e      	add	r6, r9
 8006432:	eba5 0509 	sub.w	r5, r5, r9
 8006436:	6026      	str	r6, [r4, #0]
 8006438:	60a5      	str	r5, [r4, #8]
 800643a:	463e      	mov	r6, r7
 800643c:	42be      	cmp	r6, r7
 800643e:	d900      	bls.n	8006442 <__ssputs_r+0x86>
 8006440:	463e      	mov	r6, r7
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	4632      	mov	r2, r6
 8006446:	4641      	mov	r1, r8
 8006448:	f000 fe80 	bl	800714c <memmove>
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	1b9b      	subs	r3, r3, r6
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	4433      	add	r3, r6
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	2000      	movs	r0, #0
 800645a:	e7db      	b.n	8006414 <__ssputs_r+0x58>
 800645c:	462a      	mov	r2, r5
 800645e:	f000 fee7 	bl	8007230 <_realloc_r>
 8006462:	4606      	mov	r6, r0
 8006464:	2800      	cmp	r0, #0
 8006466:	d1e1      	bne.n	800642c <__ssputs_r+0x70>
 8006468:	6921      	ldr	r1, [r4, #16]
 800646a:	4650      	mov	r0, sl
 800646c:	f000 fe94 	bl	8007198 <_free_r>
 8006470:	e7c7      	b.n	8006402 <__ssputs_r+0x46>
	...

08006474 <_svfiprintf_r>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	4698      	mov	r8, r3
 800647a:	898b      	ldrh	r3, [r1, #12]
 800647c:	061b      	lsls	r3, r3, #24
 800647e:	b09d      	sub	sp, #116	; 0x74
 8006480:	4607      	mov	r7, r0
 8006482:	460d      	mov	r5, r1
 8006484:	4614      	mov	r4, r2
 8006486:	d50e      	bpl.n	80064a6 <_svfiprintf_r+0x32>
 8006488:	690b      	ldr	r3, [r1, #16]
 800648a:	b963      	cbnz	r3, 80064a6 <_svfiprintf_r+0x32>
 800648c:	2140      	movs	r1, #64	; 0x40
 800648e:	f7ff ff21 	bl	80062d4 <_malloc_r>
 8006492:	6028      	str	r0, [r5, #0]
 8006494:	6128      	str	r0, [r5, #16]
 8006496:	b920      	cbnz	r0, 80064a2 <_svfiprintf_r+0x2e>
 8006498:	230c      	movs	r3, #12
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	e0d1      	b.n	8006646 <_svfiprintf_r+0x1d2>
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	616b      	str	r3, [r5, #20]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9309      	str	r3, [sp, #36]	; 0x24
 80064aa:	2320      	movs	r3, #32
 80064ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b4:	2330      	movs	r3, #48	; 0x30
 80064b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006660 <_svfiprintf_r+0x1ec>
 80064ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064be:	f04f 0901 	mov.w	r9, #1
 80064c2:	4623      	mov	r3, r4
 80064c4:	469a      	mov	sl, r3
 80064c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ca:	b10a      	cbz	r2, 80064d0 <_svfiprintf_r+0x5c>
 80064cc:	2a25      	cmp	r2, #37	; 0x25
 80064ce:	d1f9      	bne.n	80064c4 <_svfiprintf_r+0x50>
 80064d0:	ebba 0b04 	subs.w	fp, sl, r4
 80064d4:	d00b      	beq.n	80064ee <_svfiprintf_r+0x7a>
 80064d6:	465b      	mov	r3, fp
 80064d8:	4622      	mov	r2, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ff6d 	bl	80063bc <__ssputs_r>
 80064e2:	3001      	adds	r0, #1
 80064e4:	f000 80aa 	beq.w	800663c <_svfiprintf_r+0x1c8>
 80064e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ea:	445a      	add	r2, fp
 80064ec:	9209      	str	r2, [sp, #36]	; 0x24
 80064ee:	f89a 3000 	ldrb.w	r3, [sl]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80a2 	beq.w	800663c <_svfiprintf_r+0x1c8>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006502:	f10a 0a01 	add.w	sl, sl, #1
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650e:	931a      	str	r3, [sp, #104]	; 0x68
 8006510:	4654      	mov	r4, sl
 8006512:	2205      	movs	r2, #5
 8006514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006518:	4851      	ldr	r0, [pc, #324]	; (8006660 <_svfiprintf_r+0x1ec>)
 800651a:	f7f9 fe71 	bl	8000200 <memchr>
 800651e:	9a04      	ldr	r2, [sp, #16]
 8006520:	b9d8      	cbnz	r0, 800655a <_svfiprintf_r+0xe6>
 8006522:	06d0      	lsls	r0, r2, #27
 8006524:	bf44      	itt	mi
 8006526:	2320      	movmi	r3, #32
 8006528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652c:	0711      	lsls	r1, r2, #28
 800652e:	bf44      	itt	mi
 8006530:	232b      	movmi	r3, #43	; 0x2b
 8006532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006536:	f89a 3000 	ldrb.w	r3, [sl]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d015      	beq.n	800656a <_svfiprintf_r+0xf6>
 800653e:	9a07      	ldr	r2, [sp, #28]
 8006540:	4654      	mov	r4, sl
 8006542:	2000      	movs	r0, #0
 8006544:	f04f 0c0a 	mov.w	ip, #10
 8006548:	4621      	mov	r1, r4
 800654a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654e:	3b30      	subs	r3, #48	; 0x30
 8006550:	2b09      	cmp	r3, #9
 8006552:	d94e      	bls.n	80065f2 <_svfiprintf_r+0x17e>
 8006554:	b1b0      	cbz	r0, 8006584 <_svfiprintf_r+0x110>
 8006556:	9207      	str	r2, [sp, #28]
 8006558:	e014      	b.n	8006584 <_svfiprintf_r+0x110>
 800655a:	eba0 0308 	sub.w	r3, r0, r8
 800655e:	fa09 f303 	lsl.w	r3, r9, r3
 8006562:	4313      	orrs	r3, r2
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	46a2      	mov	sl, r4
 8006568:	e7d2      	b.n	8006510 <_svfiprintf_r+0x9c>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	1d19      	adds	r1, r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	9103      	str	r1, [sp, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	bfbb      	ittet	lt
 8006576:	425b      	neglt	r3, r3
 8006578:	f042 0202 	orrlt.w	r2, r2, #2
 800657c:	9307      	strge	r3, [sp, #28]
 800657e:	9307      	strlt	r3, [sp, #28]
 8006580:	bfb8      	it	lt
 8006582:	9204      	strlt	r2, [sp, #16]
 8006584:	7823      	ldrb	r3, [r4, #0]
 8006586:	2b2e      	cmp	r3, #46	; 0x2e
 8006588:	d10c      	bne.n	80065a4 <_svfiprintf_r+0x130>
 800658a:	7863      	ldrb	r3, [r4, #1]
 800658c:	2b2a      	cmp	r3, #42	; 0x2a
 800658e:	d135      	bne.n	80065fc <_svfiprintf_r+0x188>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	1d1a      	adds	r2, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	9203      	str	r2, [sp, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfb8      	it	lt
 800659c:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a0:	3402      	adds	r4, #2
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006670 <_svfiprintf_r+0x1fc>
 80065a8:	7821      	ldrb	r1, [r4, #0]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4650      	mov	r0, sl
 80065ae:	f7f9 fe27 	bl	8000200 <memchr>
 80065b2:	b140      	cbz	r0, 80065c6 <_svfiprintf_r+0x152>
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	eba0 000a 	sub.w	r0, r0, sl
 80065ba:	fa03 f000 	lsl.w	r0, r3, r0
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	4303      	orrs	r3, r0
 80065c2:	3401      	adds	r4, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ca:	4826      	ldr	r0, [pc, #152]	; (8006664 <_svfiprintf_r+0x1f0>)
 80065cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065d0:	2206      	movs	r2, #6
 80065d2:	f7f9 fe15 	bl	8000200 <memchr>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d038      	beq.n	800664c <_svfiprintf_r+0x1d8>
 80065da:	4b23      	ldr	r3, [pc, #140]	; (8006668 <_svfiprintf_r+0x1f4>)
 80065dc:	bb1b      	cbnz	r3, 8006626 <_svfiprintf_r+0x1b2>
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	3307      	adds	r3, #7
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	3308      	adds	r3, #8
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ec:	4433      	add	r3, r6
 80065ee:	9309      	str	r3, [sp, #36]	; 0x24
 80065f0:	e767      	b.n	80064c2 <_svfiprintf_r+0x4e>
 80065f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f6:	460c      	mov	r4, r1
 80065f8:	2001      	movs	r0, #1
 80065fa:	e7a5      	b.n	8006548 <_svfiprintf_r+0xd4>
 80065fc:	2300      	movs	r3, #0
 80065fe:	3401      	adds	r4, #1
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4620      	mov	r0, r4
 800660a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660e:	3a30      	subs	r2, #48	; 0x30
 8006610:	2a09      	cmp	r2, #9
 8006612:	d903      	bls.n	800661c <_svfiprintf_r+0x1a8>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0c5      	beq.n	80065a4 <_svfiprintf_r+0x130>
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	e7c3      	b.n	80065a4 <_svfiprintf_r+0x130>
 800661c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006620:	4604      	mov	r4, r0
 8006622:	2301      	movs	r3, #1
 8006624:	e7f0      	b.n	8006608 <_svfiprintf_r+0x194>
 8006626:	ab03      	add	r3, sp, #12
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	462a      	mov	r2, r5
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <_svfiprintf_r+0x1f8>)
 800662e:	a904      	add	r1, sp, #16
 8006630:	4638      	mov	r0, r7
 8006632:	f3af 8000 	nop.w
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	4606      	mov	r6, r0
 800663a:	d1d6      	bne.n	80065ea <_svfiprintf_r+0x176>
 800663c:	89ab      	ldrh	r3, [r5, #12]
 800663e:	065b      	lsls	r3, r3, #25
 8006640:	f53f af2c 	bmi.w	800649c <_svfiprintf_r+0x28>
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	b01d      	add	sp, #116	; 0x74
 8006648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <_svfiprintf_r+0x1f8>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4638      	mov	r0, r7
 8006658:	f000 f9d4 	bl	8006a04 <_printf_i>
 800665c:	e7eb      	b.n	8006636 <_svfiprintf_r+0x1c2>
 800665e:	bf00      	nop
 8006660:	08007468 	.word	0x08007468
 8006664:	08007472 	.word	0x08007472
 8006668:	00000000 	.word	0x00000000
 800666c:	080063bd 	.word	0x080063bd
 8006670:	0800746e 	.word	0x0800746e

08006674 <__sfputc_r>:
 8006674:	6893      	ldr	r3, [r2, #8]
 8006676:	3b01      	subs	r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	b410      	push	{r4}
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	da08      	bge.n	8006692 <__sfputc_r+0x1e>
 8006680:	6994      	ldr	r4, [r2, #24]
 8006682:	42a3      	cmp	r3, r4
 8006684:	db01      	blt.n	800668a <__sfputc_r+0x16>
 8006686:	290a      	cmp	r1, #10
 8006688:	d103      	bne.n	8006692 <__sfputc_r+0x1e>
 800668a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668e:	f000 bb33 	b.w	8006cf8 <__swbuf_r>
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	1c58      	adds	r0, r3, #1
 8006696:	6010      	str	r0, [r2, #0]
 8006698:	7019      	strb	r1, [r3, #0]
 800669a:	4608      	mov	r0, r1
 800669c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <__sfputs_r>:
 80066a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	4614      	mov	r4, r2
 80066aa:	18d5      	adds	r5, r2, r3
 80066ac:	42ac      	cmp	r4, r5
 80066ae:	d101      	bne.n	80066b4 <__sfputs_r+0x12>
 80066b0:	2000      	movs	r0, #0
 80066b2:	e007      	b.n	80066c4 <__sfputs_r+0x22>
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	463a      	mov	r2, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff ffda 	bl	8006674 <__sfputc_r>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d1f3      	bne.n	80066ac <__sfputs_r+0xa>
 80066c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066c8 <_vfiprintf_r>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	460d      	mov	r5, r1
 80066ce:	b09d      	sub	sp, #116	; 0x74
 80066d0:	4614      	mov	r4, r2
 80066d2:	4698      	mov	r8, r3
 80066d4:	4606      	mov	r6, r0
 80066d6:	b118      	cbz	r0, 80066e0 <_vfiprintf_r+0x18>
 80066d8:	6983      	ldr	r3, [r0, #24]
 80066da:	b90b      	cbnz	r3, 80066e0 <_vfiprintf_r+0x18>
 80066dc:	f7ff fd3a 	bl	8006154 <__sinit>
 80066e0:	4b89      	ldr	r3, [pc, #548]	; (8006908 <_vfiprintf_r+0x240>)
 80066e2:	429d      	cmp	r5, r3
 80066e4:	d11b      	bne.n	800671e <_vfiprintf_r+0x56>
 80066e6:	6875      	ldr	r5, [r6, #4]
 80066e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ea:	07d9      	lsls	r1, r3, #31
 80066ec:	d405      	bmi.n	80066fa <_vfiprintf_r+0x32>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	059a      	lsls	r2, r3, #22
 80066f2:	d402      	bmi.n	80066fa <_vfiprintf_r+0x32>
 80066f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f6:	f7ff fdcb 	bl	8006290 <__retarget_lock_acquire_recursive>
 80066fa:	89ab      	ldrh	r3, [r5, #12]
 80066fc:	071b      	lsls	r3, r3, #28
 80066fe:	d501      	bpl.n	8006704 <_vfiprintf_r+0x3c>
 8006700:	692b      	ldr	r3, [r5, #16]
 8006702:	b9eb      	cbnz	r3, 8006740 <_vfiprintf_r+0x78>
 8006704:	4629      	mov	r1, r5
 8006706:	4630      	mov	r0, r6
 8006708:	f000 fb5a 	bl	8006dc0 <__swsetup_r>
 800670c:	b1c0      	cbz	r0, 8006740 <_vfiprintf_r+0x78>
 800670e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006710:	07dc      	lsls	r4, r3, #31
 8006712:	d50e      	bpl.n	8006732 <_vfiprintf_r+0x6a>
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	b01d      	add	sp, #116	; 0x74
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	4b7b      	ldr	r3, [pc, #492]	; (800690c <_vfiprintf_r+0x244>)
 8006720:	429d      	cmp	r5, r3
 8006722:	d101      	bne.n	8006728 <_vfiprintf_r+0x60>
 8006724:	68b5      	ldr	r5, [r6, #8]
 8006726:	e7df      	b.n	80066e8 <_vfiprintf_r+0x20>
 8006728:	4b79      	ldr	r3, [pc, #484]	; (8006910 <_vfiprintf_r+0x248>)
 800672a:	429d      	cmp	r5, r3
 800672c:	bf08      	it	eq
 800672e:	68f5      	ldreq	r5, [r6, #12]
 8006730:	e7da      	b.n	80066e8 <_vfiprintf_r+0x20>
 8006732:	89ab      	ldrh	r3, [r5, #12]
 8006734:	0598      	lsls	r0, r3, #22
 8006736:	d4ed      	bmi.n	8006714 <_vfiprintf_r+0x4c>
 8006738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800673a:	f7ff fdaa 	bl	8006292 <__retarget_lock_release_recursive>
 800673e:	e7e9      	b.n	8006714 <_vfiprintf_r+0x4c>
 8006740:	2300      	movs	r3, #0
 8006742:	9309      	str	r3, [sp, #36]	; 0x24
 8006744:	2320      	movs	r3, #32
 8006746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800674a:	f8cd 800c 	str.w	r8, [sp, #12]
 800674e:	2330      	movs	r3, #48	; 0x30
 8006750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006914 <_vfiprintf_r+0x24c>
 8006754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006758:	f04f 0901 	mov.w	r9, #1
 800675c:	4623      	mov	r3, r4
 800675e:	469a      	mov	sl, r3
 8006760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006764:	b10a      	cbz	r2, 800676a <_vfiprintf_r+0xa2>
 8006766:	2a25      	cmp	r2, #37	; 0x25
 8006768:	d1f9      	bne.n	800675e <_vfiprintf_r+0x96>
 800676a:	ebba 0b04 	subs.w	fp, sl, r4
 800676e:	d00b      	beq.n	8006788 <_vfiprintf_r+0xc0>
 8006770:	465b      	mov	r3, fp
 8006772:	4622      	mov	r2, r4
 8006774:	4629      	mov	r1, r5
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff93 	bl	80066a2 <__sfputs_r>
 800677c:	3001      	adds	r0, #1
 800677e:	f000 80aa 	beq.w	80068d6 <_vfiprintf_r+0x20e>
 8006782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006784:	445a      	add	r2, fp
 8006786:	9209      	str	r2, [sp, #36]	; 0x24
 8006788:	f89a 3000 	ldrb.w	r3, [sl]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 80a2 	beq.w	80068d6 <_vfiprintf_r+0x20e>
 8006792:	2300      	movs	r3, #0
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800679c:	f10a 0a01 	add.w	sl, sl, #1
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a8:	931a      	str	r3, [sp, #104]	; 0x68
 80067aa:	4654      	mov	r4, sl
 80067ac:	2205      	movs	r2, #5
 80067ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b2:	4858      	ldr	r0, [pc, #352]	; (8006914 <_vfiprintf_r+0x24c>)
 80067b4:	f7f9 fd24 	bl	8000200 <memchr>
 80067b8:	9a04      	ldr	r2, [sp, #16]
 80067ba:	b9d8      	cbnz	r0, 80067f4 <_vfiprintf_r+0x12c>
 80067bc:	06d1      	lsls	r1, r2, #27
 80067be:	bf44      	itt	mi
 80067c0:	2320      	movmi	r3, #32
 80067c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c6:	0713      	lsls	r3, r2, #28
 80067c8:	bf44      	itt	mi
 80067ca:	232b      	movmi	r3, #43	; 0x2b
 80067cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d0:	f89a 3000 	ldrb.w	r3, [sl]
 80067d4:	2b2a      	cmp	r3, #42	; 0x2a
 80067d6:	d015      	beq.n	8006804 <_vfiprintf_r+0x13c>
 80067d8:	9a07      	ldr	r2, [sp, #28]
 80067da:	4654      	mov	r4, sl
 80067dc:	2000      	movs	r0, #0
 80067de:	f04f 0c0a 	mov.w	ip, #10
 80067e2:	4621      	mov	r1, r4
 80067e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e8:	3b30      	subs	r3, #48	; 0x30
 80067ea:	2b09      	cmp	r3, #9
 80067ec:	d94e      	bls.n	800688c <_vfiprintf_r+0x1c4>
 80067ee:	b1b0      	cbz	r0, 800681e <_vfiprintf_r+0x156>
 80067f0:	9207      	str	r2, [sp, #28]
 80067f2:	e014      	b.n	800681e <_vfiprintf_r+0x156>
 80067f4:	eba0 0308 	sub.w	r3, r0, r8
 80067f8:	fa09 f303 	lsl.w	r3, r9, r3
 80067fc:	4313      	orrs	r3, r2
 80067fe:	9304      	str	r3, [sp, #16]
 8006800:	46a2      	mov	sl, r4
 8006802:	e7d2      	b.n	80067aa <_vfiprintf_r+0xe2>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	1d19      	adds	r1, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	bfbb      	ittet	lt
 8006810:	425b      	neglt	r3, r3
 8006812:	f042 0202 	orrlt.w	r2, r2, #2
 8006816:	9307      	strge	r3, [sp, #28]
 8006818:	9307      	strlt	r3, [sp, #28]
 800681a:	bfb8      	it	lt
 800681c:	9204      	strlt	r2, [sp, #16]
 800681e:	7823      	ldrb	r3, [r4, #0]
 8006820:	2b2e      	cmp	r3, #46	; 0x2e
 8006822:	d10c      	bne.n	800683e <_vfiprintf_r+0x176>
 8006824:	7863      	ldrb	r3, [r4, #1]
 8006826:	2b2a      	cmp	r3, #42	; 0x2a
 8006828:	d135      	bne.n	8006896 <_vfiprintf_r+0x1ce>
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	1d1a      	adds	r2, r3, #4
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	9203      	str	r2, [sp, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	bfb8      	it	lt
 8006836:	f04f 33ff 	movlt.w	r3, #4294967295
 800683a:	3402      	adds	r4, #2
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006924 <_vfiprintf_r+0x25c>
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	2203      	movs	r2, #3
 8006846:	4650      	mov	r0, sl
 8006848:	f7f9 fcda 	bl	8000200 <memchr>
 800684c:	b140      	cbz	r0, 8006860 <_vfiprintf_r+0x198>
 800684e:	2340      	movs	r3, #64	; 0x40
 8006850:	eba0 000a 	sub.w	r0, r0, sl
 8006854:	fa03 f000 	lsl.w	r0, r3, r0
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	4303      	orrs	r3, r0
 800685c:	3401      	adds	r4, #1
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006864:	482c      	ldr	r0, [pc, #176]	; (8006918 <_vfiprintf_r+0x250>)
 8006866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800686a:	2206      	movs	r2, #6
 800686c:	f7f9 fcc8 	bl	8000200 <memchr>
 8006870:	2800      	cmp	r0, #0
 8006872:	d03f      	beq.n	80068f4 <_vfiprintf_r+0x22c>
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <_vfiprintf_r+0x254>)
 8006876:	bb1b      	cbnz	r3, 80068c0 <_vfiprintf_r+0x1f8>
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	3307      	adds	r3, #7
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	443b      	add	r3, r7
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	e767      	b.n	800675c <_vfiprintf_r+0x94>
 800688c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006890:	460c      	mov	r4, r1
 8006892:	2001      	movs	r0, #1
 8006894:	e7a5      	b.n	80067e2 <_vfiprintf_r+0x11a>
 8006896:	2300      	movs	r3, #0
 8006898:	3401      	adds	r4, #1
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	4619      	mov	r1, r3
 800689e:	f04f 0c0a 	mov.w	ip, #10
 80068a2:	4620      	mov	r0, r4
 80068a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a8:	3a30      	subs	r2, #48	; 0x30
 80068aa:	2a09      	cmp	r2, #9
 80068ac:	d903      	bls.n	80068b6 <_vfiprintf_r+0x1ee>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0c5      	beq.n	800683e <_vfiprintf_r+0x176>
 80068b2:	9105      	str	r1, [sp, #20]
 80068b4:	e7c3      	b.n	800683e <_vfiprintf_r+0x176>
 80068b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ba:	4604      	mov	r4, r0
 80068bc:	2301      	movs	r3, #1
 80068be:	e7f0      	b.n	80068a2 <_vfiprintf_r+0x1da>
 80068c0:	ab03      	add	r3, sp, #12
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	462a      	mov	r2, r5
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <_vfiprintf_r+0x258>)
 80068c8:	a904      	add	r1, sp, #16
 80068ca:	4630      	mov	r0, r6
 80068cc:	f3af 8000 	nop.w
 80068d0:	4607      	mov	r7, r0
 80068d2:	1c78      	adds	r0, r7, #1
 80068d4:	d1d6      	bne.n	8006884 <_vfiprintf_r+0x1bc>
 80068d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d8:	07d9      	lsls	r1, r3, #31
 80068da:	d405      	bmi.n	80068e8 <_vfiprintf_r+0x220>
 80068dc:	89ab      	ldrh	r3, [r5, #12]
 80068de:	059a      	lsls	r2, r3, #22
 80068e0:	d402      	bmi.n	80068e8 <_vfiprintf_r+0x220>
 80068e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e4:	f7ff fcd5 	bl	8006292 <__retarget_lock_release_recursive>
 80068e8:	89ab      	ldrh	r3, [r5, #12]
 80068ea:	065b      	lsls	r3, r3, #25
 80068ec:	f53f af12 	bmi.w	8006714 <_vfiprintf_r+0x4c>
 80068f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068f2:	e711      	b.n	8006718 <_vfiprintf_r+0x50>
 80068f4:	ab03      	add	r3, sp, #12
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	462a      	mov	r2, r5
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <_vfiprintf_r+0x258>)
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 f880 	bl	8006a04 <_printf_i>
 8006904:	e7e4      	b.n	80068d0 <_vfiprintf_r+0x208>
 8006906:	bf00      	nop
 8006908:	08007428 	.word	0x08007428
 800690c:	08007448 	.word	0x08007448
 8006910:	08007408 	.word	0x08007408
 8006914:	08007468 	.word	0x08007468
 8006918:	08007472 	.word	0x08007472
 800691c:	00000000 	.word	0x00000000
 8006920:	080066a3 	.word	0x080066a3
 8006924:	0800746e 	.word	0x0800746e

08006928 <_printf_common>:
 8006928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	4616      	mov	r6, r2
 800692e:	4699      	mov	r9, r3
 8006930:	688a      	ldr	r2, [r1, #8]
 8006932:	690b      	ldr	r3, [r1, #16]
 8006934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006938:	4293      	cmp	r3, r2
 800693a:	bfb8      	it	lt
 800693c:	4613      	movlt	r3, r2
 800693e:	6033      	str	r3, [r6, #0]
 8006940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006944:	4607      	mov	r7, r0
 8006946:	460c      	mov	r4, r1
 8006948:	b10a      	cbz	r2, 800694e <_printf_common+0x26>
 800694a:	3301      	adds	r3, #1
 800694c:	6033      	str	r3, [r6, #0]
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	0699      	lsls	r1, r3, #26
 8006952:	bf42      	ittt	mi
 8006954:	6833      	ldrmi	r3, [r6, #0]
 8006956:	3302      	addmi	r3, #2
 8006958:	6033      	strmi	r3, [r6, #0]
 800695a:	6825      	ldr	r5, [r4, #0]
 800695c:	f015 0506 	ands.w	r5, r5, #6
 8006960:	d106      	bne.n	8006970 <_printf_common+0x48>
 8006962:	f104 0a19 	add.w	sl, r4, #25
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	6832      	ldr	r2, [r6, #0]
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	42ab      	cmp	r3, r5
 800696e:	dc26      	bgt.n	80069be <_printf_common+0x96>
 8006970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006974:	1e13      	subs	r3, r2, #0
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	bf18      	it	ne
 800697a:	2301      	movne	r3, #1
 800697c:	0692      	lsls	r2, r2, #26
 800697e:	d42b      	bmi.n	80069d8 <_printf_common+0xb0>
 8006980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006984:	4649      	mov	r1, r9
 8006986:	4638      	mov	r0, r7
 8006988:	47c0      	blx	r8
 800698a:	3001      	adds	r0, #1
 800698c:	d01e      	beq.n	80069cc <_printf_common+0xa4>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	68e5      	ldr	r5, [r4, #12]
 8006992:	6832      	ldr	r2, [r6, #0]
 8006994:	f003 0306 	and.w	r3, r3, #6
 8006998:	2b04      	cmp	r3, #4
 800699a:	bf08      	it	eq
 800699c:	1aad      	subeq	r5, r5, r2
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	6922      	ldr	r2, [r4, #16]
 80069a2:	bf0c      	ite	eq
 80069a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a8:	2500      	movne	r5, #0
 80069aa:	4293      	cmp	r3, r2
 80069ac:	bfc4      	itt	gt
 80069ae:	1a9b      	subgt	r3, r3, r2
 80069b0:	18ed      	addgt	r5, r5, r3
 80069b2:	2600      	movs	r6, #0
 80069b4:	341a      	adds	r4, #26
 80069b6:	42b5      	cmp	r5, r6
 80069b8:	d11a      	bne.n	80069f0 <_printf_common+0xc8>
 80069ba:	2000      	movs	r0, #0
 80069bc:	e008      	b.n	80069d0 <_printf_common+0xa8>
 80069be:	2301      	movs	r3, #1
 80069c0:	4652      	mov	r2, sl
 80069c2:	4649      	mov	r1, r9
 80069c4:	4638      	mov	r0, r7
 80069c6:	47c0      	blx	r8
 80069c8:	3001      	adds	r0, #1
 80069ca:	d103      	bne.n	80069d4 <_printf_common+0xac>
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d4:	3501      	adds	r5, #1
 80069d6:	e7c6      	b.n	8006966 <_printf_common+0x3e>
 80069d8:	18e1      	adds	r1, r4, r3
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	2030      	movs	r0, #48	; 0x30
 80069de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069e2:	4422      	add	r2, r4
 80069e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069ec:	3302      	adds	r3, #2
 80069ee:	e7c7      	b.n	8006980 <_printf_common+0x58>
 80069f0:	2301      	movs	r3, #1
 80069f2:	4622      	mov	r2, r4
 80069f4:	4649      	mov	r1, r9
 80069f6:	4638      	mov	r0, r7
 80069f8:	47c0      	blx	r8
 80069fa:	3001      	adds	r0, #1
 80069fc:	d0e6      	beq.n	80069cc <_printf_common+0xa4>
 80069fe:	3601      	adds	r6, #1
 8006a00:	e7d9      	b.n	80069b6 <_printf_common+0x8e>
	...

08006a04 <_printf_i>:
 8006a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	7e0f      	ldrb	r7, [r1, #24]
 8006a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a0c:	2f78      	cmp	r7, #120	; 0x78
 8006a0e:	4691      	mov	r9, r2
 8006a10:	4680      	mov	r8, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	469a      	mov	sl, r3
 8006a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a1a:	d807      	bhi.n	8006a2c <_printf_i+0x28>
 8006a1c:	2f62      	cmp	r7, #98	; 0x62
 8006a1e:	d80a      	bhi.n	8006a36 <_printf_i+0x32>
 8006a20:	2f00      	cmp	r7, #0
 8006a22:	f000 80d8 	beq.w	8006bd6 <_printf_i+0x1d2>
 8006a26:	2f58      	cmp	r7, #88	; 0x58
 8006a28:	f000 80a3 	beq.w	8006b72 <_printf_i+0x16e>
 8006a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a34:	e03a      	b.n	8006aac <_printf_i+0xa8>
 8006a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a3a:	2b15      	cmp	r3, #21
 8006a3c:	d8f6      	bhi.n	8006a2c <_printf_i+0x28>
 8006a3e:	a101      	add	r1, pc, #4	; (adr r1, 8006a44 <_printf_i+0x40>)
 8006a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a44:	08006a9d 	.word	0x08006a9d
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006a2d 	.word	0x08006a2d
 8006a50:	08006a2d 	.word	0x08006a2d
 8006a54:	08006a2d 	.word	0x08006a2d
 8006a58:	08006a2d 	.word	0x08006a2d
 8006a5c:	08006ab1 	.word	0x08006ab1
 8006a60:	08006a2d 	.word	0x08006a2d
 8006a64:	08006a2d 	.word	0x08006a2d
 8006a68:	08006a2d 	.word	0x08006a2d
 8006a6c:	08006a2d 	.word	0x08006a2d
 8006a70:	08006bbd 	.word	0x08006bbd
 8006a74:	08006ae1 	.word	0x08006ae1
 8006a78:	08006b9f 	.word	0x08006b9f
 8006a7c:	08006a2d 	.word	0x08006a2d
 8006a80:	08006a2d 	.word	0x08006a2d
 8006a84:	08006bdf 	.word	0x08006bdf
 8006a88:	08006a2d 	.word	0x08006a2d
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006a2d 	.word	0x08006a2d
 8006a94:	08006a2d 	.word	0x08006a2d
 8006a98:	08006ba7 	.word	0x08006ba7
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	1d1a      	adds	r2, r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0a3      	b.n	8006bf8 <_printf_i+0x1f4>
 8006ab0:	6820      	ldr	r0, [r4, #0]
 8006ab2:	6829      	ldr	r1, [r5, #0]
 8006ab4:	0606      	lsls	r6, r0, #24
 8006ab6:	f101 0304 	add.w	r3, r1, #4
 8006aba:	d50a      	bpl.n	8006ad2 <_printf_i+0xce>
 8006abc:	680e      	ldr	r6, [r1, #0]
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	da03      	bge.n	8006acc <_printf_i+0xc8>
 8006ac4:	232d      	movs	r3, #45	; 0x2d
 8006ac6:	4276      	negs	r6, r6
 8006ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006acc:	485e      	ldr	r0, [pc, #376]	; (8006c48 <_printf_i+0x244>)
 8006ace:	230a      	movs	r3, #10
 8006ad0:	e019      	b.n	8006b06 <_printf_i+0x102>
 8006ad2:	680e      	ldr	r6, [r1, #0]
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ada:	bf18      	it	ne
 8006adc:	b236      	sxthne	r6, r6
 8006ade:	e7ef      	b.n	8006ac0 <_printf_i+0xbc>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	6820      	ldr	r0, [r4, #0]
 8006ae4:	1d19      	adds	r1, r3, #4
 8006ae6:	6029      	str	r1, [r5, #0]
 8006ae8:	0601      	lsls	r1, r0, #24
 8006aea:	d501      	bpl.n	8006af0 <_printf_i+0xec>
 8006aec:	681e      	ldr	r6, [r3, #0]
 8006aee:	e002      	b.n	8006af6 <_printf_i+0xf2>
 8006af0:	0646      	lsls	r6, r0, #25
 8006af2:	d5fb      	bpl.n	8006aec <_printf_i+0xe8>
 8006af4:	881e      	ldrh	r6, [r3, #0]
 8006af6:	4854      	ldr	r0, [pc, #336]	; (8006c48 <_printf_i+0x244>)
 8006af8:	2f6f      	cmp	r7, #111	; 0x6f
 8006afa:	bf0c      	ite	eq
 8006afc:	2308      	moveq	r3, #8
 8006afe:	230a      	movne	r3, #10
 8006b00:	2100      	movs	r1, #0
 8006b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b06:	6865      	ldr	r5, [r4, #4]
 8006b08:	60a5      	str	r5, [r4, #8]
 8006b0a:	2d00      	cmp	r5, #0
 8006b0c:	bfa2      	ittt	ge
 8006b0e:	6821      	ldrge	r1, [r4, #0]
 8006b10:	f021 0104 	bicge.w	r1, r1, #4
 8006b14:	6021      	strge	r1, [r4, #0]
 8006b16:	b90e      	cbnz	r6, 8006b1c <_printf_i+0x118>
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	d04d      	beq.n	8006bb8 <_printf_i+0x1b4>
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b22:	fb03 6711 	mls	r7, r3, r1, r6
 8006b26:	5dc7      	ldrb	r7, [r0, r7]
 8006b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b2c:	4637      	mov	r7, r6
 8006b2e:	42bb      	cmp	r3, r7
 8006b30:	460e      	mov	r6, r1
 8006b32:	d9f4      	bls.n	8006b1e <_printf_i+0x11a>
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d10b      	bne.n	8006b50 <_printf_i+0x14c>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	07de      	lsls	r6, r3, #31
 8006b3c:	d508      	bpl.n	8006b50 <_printf_i+0x14c>
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	6861      	ldr	r1, [r4, #4]
 8006b42:	4299      	cmp	r1, r3
 8006b44:	bfde      	ittt	le
 8006b46:	2330      	movle	r3, #48	; 0x30
 8006b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b50:	1b52      	subs	r2, r2, r5
 8006b52:	6122      	str	r2, [r4, #16]
 8006b54:	f8cd a000 	str.w	sl, [sp]
 8006b58:	464b      	mov	r3, r9
 8006b5a:	aa03      	add	r2, sp, #12
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4640      	mov	r0, r8
 8006b60:	f7ff fee2 	bl	8006928 <_printf_common>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d14c      	bne.n	8006c02 <_printf_i+0x1fe>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	b004      	add	sp, #16
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b72:	4835      	ldr	r0, [pc, #212]	; (8006c48 <_printf_i+0x244>)
 8006b74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b80:	6029      	str	r1, [r5, #0]
 8006b82:	061d      	lsls	r5, r3, #24
 8006b84:	d514      	bpl.n	8006bb0 <_printf_i+0x1ac>
 8006b86:	07df      	lsls	r7, r3, #31
 8006b88:	bf44      	itt	mi
 8006b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b8e:	6023      	strmi	r3, [r4, #0]
 8006b90:	b91e      	cbnz	r6, 8006b9a <_printf_i+0x196>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f023 0320 	bic.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	2310      	movs	r3, #16
 8006b9c:	e7b0      	b.n	8006b00 <_printf_i+0xfc>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f043 0320 	orr.w	r3, r3, #32
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	2378      	movs	r3, #120	; 0x78
 8006ba8:	4828      	ldr	r0, [pc, #160]	; (8006c4c <_printf_i+0x248>)
 8006baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bae:	e7e3      	b.n	8006b78 <_printf_i+0x174>
 8006bb0:	0659      	lsls	r1, r3, #25
 8006bb2:	bf48      	it	mi
 8006bb4:	b2b6      	uxthmi	r6, r6
 8006bb6:	e7e6      	b.n	8006b86 <_printf_i+0x182>
 8006bb8:	4615      	mov	r5, r2
 8006bba:	e7bb      	b.n	8006b34 <_printf_i+0x130>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	6826      	ldr	r6, [r4, #0]
 8006bc0:	6961      	ldr	r1, [r4, #20]
 8006bc2:	1d18      	adds	r0, r3, #4
 8006bc4:	6028      	str	r0, [r5, #0]
 8006bc6:	0635      	lsls	r5, r6, #24
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	d501      	bpl.n	8006bd0 <_printf_i+0x1cc>
 8006bcc:	6019      	str	r1, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <_printf_i+0x1d2>
 8006bd0:	0670      	lsls	r0, r6, #25
 8006bd2:	d5fb      	bpl.n	8006bcc <_printf_i+0x1c8>
 8006bd4:	8019      	strh	r1, [r3, #0]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6123      	str	r3, [r4, #16]
 8006bda:	4615      	mov	r5, r2
 8006bdc:	e7ba      	b.n	8006b54 <_printf_i+0x150>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	1d1a      	adds	r2, r3, #4
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	681d      	ldr	r5, [r3, #0]
 8006be6:	6862      	ldr	r2, [r4, #4]
 8006be8:	2100      	movs	r1, #0
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7f9 fb08 	bl	8000200 <memchr>
 8006bf0:	b108      	cbz	r0, 8006bf6 <_printf_i+0x1f2>
 8006bf2:	1b40      	subs	r0, r0, r5
 8006bf4:	6060      	str	r0, [r4, #4]
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	6123      	str	r3, [r4, #16]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c00:	e7a8      	b.n	8006b54 <_printf_i+0x150>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	462a      	mov	r2, r5
 8006c06:	4649      	mov	r1, r9
 8006c08:	4640      	mov	r0, r8
 8006c0a:	47d0      	blx	sl
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d0ab      	beq.n	8006b68 <_printf_i+0x164>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	079b      	lsls	r3, r3, #30
 8006c14:	d413      	bmi.n	8006c3e <_printf_i+0x23a>
 8006c16:	68e0      	ldr	r0, [r4, #12]
 8006c18:	9b03      	ldr	r3, [sp, #12]
 8006c1a:	4298      	cmp	r0, r3
 8006c1c:	bfb8      	it	lt
 8006c1e:	4618      	movlt	r0, r3
 8006c20:	e7a4      	b.n	8006b6c <_printf_i+0x168>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4632      	mov	r2, r6
 8006c26:	4649      	mov	r1, r9
 8006c28:	4640      	mov	r0, r8
 8006c2a:	47d0      	blx	sl
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d09b      	beq.n	8006b68 <_printf_i+0x164>
 8006c30:	3501      	adds	r5, #1
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	9903      	ldr	r1, [sp, #12]
 8006c36:	1a5b      	subs	r3, r3, r1
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dcf2      	bgt.n	8006c22 <_printf_i+0x21e>
 8006c3c:	e7eb      	b.n	8006c16 <_printf_i+0x212>
 8006c3e:	2500      	movs	r5, #0
 8006c40:	f104 0619 	add.w	r6, r4, #25
 8006c44:	e7f5      	b.n	8006c32 <_printf_i+0x22e>
 8006c46:	bf00      	nop
 8006c48:	08007479 	.word	0x08007479
 8006c4c:	0800748a 	.word	0x0800748a

08006c50 <_sbrk_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d06      	ldr	r5, [pc, #24]	; (8006c6c <_sbrk_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	602b      	str	r3, [r5, #0]
 8006c5c:	f7fa fcfa 	bl	8001654 <_sbrk>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_sbrk_r+0x1a>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_sbrk_r+0x1a>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	200002a8 	.word	0x200002a8

08006c70 <__sread>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	460c      	mov	r4, r1
 8006c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c78:	f000 fb0a 	bl	8007290 <_read_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	bfab      	itete	ge
 8006c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c82:	89a3      	ldrhlt	r3, [r4, #12]
 8006c84:	181b      	addge	r3, r3, r0
 8006c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c8a:	bfac      	ite	ge
 8006c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c8e:	81a3      	strhlt	r3, [r4, #12]
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <__swrite>:
 8006c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c96:	461f      	mov	r7, r3
 8006c98:	898b      	ldrh	r3, [r1, #12]
 8006c9a:	05db      	lsls	r3, r3, #23
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	4616      	mov	r6, r2
 8006ca2:	d505      	bpl.n	8006cb0 <__swrite+0x1e>
 8006ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca8:	2302      	movs	r3, #2
 8006caa:	2200      	movs	r2, #0
 8006cac:	f000 f9c8 	bl	8007040 <_lseek_r>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	4632      	mov	r2, r6
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	f000 b869 	b.w	8006d9c <_write_r>

08006cca <__sseek>:
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	460c      	mov	r4, r1
 8006cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd2:	f000 f9b5 	bl	8007040 <_lseek_r>
 8006cd6:	1c43      	adds	r3, r0, #1
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	bf15      	itete	ne
 8006cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ce6:	81a3      	strheq	r3, [r4, #12]
 8006ce8:	bf18      	it	ne
 8006cea:	81a3      	strhne	r3, [r4, #12]
 8006cec:	bd10      	pop	{r4, pc}

08006cee <__sclose>:
 8006cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf2:	f000 b8d3 	b.w	8006e9c <_close_r>
	...

08006cf8 <__swbuf_r>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	460e      	mov	r6, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	4605      	mov	r5, r0
 8006d00:	b118      	cbz	r0, 8006d0a <__swbuf_r+0x12>
 8006d02:	6983      	ldr	r3, [r0, #24]
 8006d04:	b90b      	cbnz	r3, 8006d0a <__swbuf_r+0x12>
 8006d06:	f7ff fa25 	bl	8006154 <__sinit>
 8006d0a:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <__swbuf_r+0x98>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d12b      	bne.n	8006d68 <__swbuf_r+0x70>
 8006d10:	686c      	ldr	r4, [r5, #4]
 8006d12:	69a3      	ldr	r3, [r4, #24]
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	071a      	lsls	r2, r3, #28
 8006d1a:	d52f      	bpl.n	8006d7c <__swbuf_r+0x84>
 8006d1c:	6923      	ldr	r3, [r4, #16]
 8006d1e:	b36b      	cbz	r3, 8006d7c <__swbuf_r+0x84>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	6820      	ldr	r0, [r4, #0]
 8006d24:	1ac0      	subs	r0, r0, r3
 8006d26:	6963      	ldr	r3, [r4, #20]
 8006d28:	b2f6      	uxtb	r6, r6
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	4637      	mov	r7, r6
 8006d2e:	dc04      	bgt.n	8006d3a <__swbuf_r+0x42>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f000 f948 	bl	8006fc8 <_fflush_r>
 8006d38:	bb30      	cbnz	r0, 8006d88 <__swbuf_r+0x90>
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	60a3      	str	r3, [r4, #8]
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	6022      	str	r2, [r4, #0]
 8006d46:	701e      	strb	r6, [r3, #0]
 8006d48:	6963      	ldr	r3, [r4, #20]
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	4283      	cmp	r3, r0
 8006d4e:	d004      	beq.n	8006d5a <__swbuf_r+0x62>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	07db      	lsls	r3, r3, #31
 8006d54:	d506      	bpl.n	8006d64 <__swbuf_r+0x6c>
 8006d56:	2e0a      	cmp	r6, #10
 8006d58:	d104      	bne.n	8006d64 <__swbuf_r+0x6c>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 f933 	bl	8006fc8 <_fflush_r>
 8006d62:	b988      	cbnz	r0, 8006d88 <__swbuf_r+0x90>
 8006d64:	4638      	mov	r0, r7
 8006d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d68:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <__swbuf_r+0x9c>)
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	d101      	bne.n	8006d72 <__swbuf_r+0x7a>
 8006d6e:	68ac      	ldr	r4, [r5, #8]
 8006d70:	e7cf      	b.n	8006d12 <__swbuf_r+0x1a>
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <__swbuf_r+0xa0>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	bf08      	it	eq
 8006d78:	68ec      	ldreq	r4, [r5, #12]
 8006d7a:	e7ca      	b.n	8006d12 <__swbuf_r+0x1a>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 f81e 	bl	8006dc0 <__swsetup_r>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d0cb      	beq.n	8006d20 <__swbuf_r+0x28>
 8006d88:	f04f 37ff 	mov.w	r7, #4294967295
 8006d8c:	e7ea      	b.n	8006d64 <__swbuf_r+0x6c>
 8006d8e:	bf00      	nop
 8006d90:	08007428 	.word	0x08007428
 8006d94:	08007448 	.word	0x08007448
 8006d98:	08007408 	.word	0x08007408

08006d9c <_write_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	; (8006dbc <_write_r+0x20>)
 8006da0:	4604      	mov	r4, r0
 8006da2:	4608      	mov	r0, r1
 8006da4:	4611      	mov	r1, r2
 8006da6:	2200      	movs	r2, #0
 8006da8:	602a      	str	r2, [r5, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7f9 fd36 	bl	800081c <_write>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_write_r+0x1e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_write_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	200002a8 	.word	0x200002a8

08006dc0 <__swsetup_r>:
 8006dc0:	4b32      	ldr	r3, [pc, #200]	; (8006e8c <__swsetup_r+0xcc>)
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	681d      	ldr	r5, [r3, #0]
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460c      	mov	r4, r1
 8006dca:	b125      	cbz	r5, 8006dd6 <__swsetup_r+0x16>
 8006dcc:	69ab      	ldr	r3, [r5, #24]
 8006dce:	b913      	cbnz	r3, 8006dd6 <__swsetup_r+0x16>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7ff f9bf 	bl	8006154 <__sinit>
 8006dd6:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <__swsetup_r+0xd0>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d10f      	bne.n	8006dfc <__swsetup_r+0x3c>
 8006ddc:	686c      	ldr	r4, [r5, #4]
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006de4:	0719      	lsls	r1, r3, #28
 8006de6:	d42c      	bmi.n	8006e42 <__swsetup_r+0x82>
 8006de8:	06dd      	lsls	r5, r3, #27
 8006dea:	d411      	bmi.n	8006e10 <__swsetup_r+0x50>
 8006dec:	2309      	movs	r3, #9
 8006dee:	6033      	str	r3, [r6, #0]
 8006df0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	e03e      	b.n	8006e7a <__swsetup_r+0xba>
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <__swsetup_r+0xd4>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d101      	bne.n	8006e06 <__swsetup_r+0x46>
 8006e02:	68ac      	ldr	r4, [r5, #8]
 8006e04:	e7eb      	b.n	8006dde <__swsetup_r+0x1e>
 8006e06:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <__swsetup_r+0xd8>)
 8006e08:	429c      	cmp	r4, r3
 8006e0a:	bf08      	it	eq
 8006e0c:	68ec      	ldreq	r4, [r5, #12]
 8006e0e:	e7e6      	b.n	8006dde <__swsetup_r+0x1e>
 8006e10:	0758      	lsls	r0, r3, #29
 8006e12:	d512      	bpl.n	8006e3a <__swsetup_r+0x7a>
 8006e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e16:	b141      	cbz	r1, 8006e2a <__swsetup_r+0x6a>
 8006e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d002      	beq.n	8006e26 <__swsetup_r+0x66>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f000 f9b9 	bl	8007198 <_free_r>
 8006e26:	2300      	movs	r3, #0
 8006e28:	6363      	str	r3, [r4, #52]	; 0x34
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f043 0308 	orr.w	r3, r3, #8
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	b94b      	cbnz	r3, 8006e5a <__swsetup_r+0x9a>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e50:	d003      	beq.n	8006e5a <__swsetup_r+0x9a>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4630      	mov	r0, r6
 8006e56:	f000 f92b 	bl	80070b0 <__smakebuf_r>
 8006e5a:	89a0      	ldrh	r0, [r4, #12]
 8006e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e60:	f010 0301 	ands.w	r3, r0, #1
 8006e64:	d00a      	beq.n	8006e7c <__swsetup_r+0xbc>
 8006e66:	2300      	movs	r3, #0
 8006e68:	60a3      	str	r3, [r4, #8]
 8006e6a:	6963      	ldr	r3, [r4, #20]
 8006e6c:	425b      	negs	r3, r3
 8006e6e:	61a3      	str	r3, [r4, #24]
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	b943      	cbnz	r3, 8006e86 <__swsetup_r+0xc6>
 8006e74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e78:	d1ba      	bne.n	8006df0 <__swsetup_r+0x30>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	0781      	lsls	r1, r0, #30
 8006e7e:	bf58      	it	pl
 8006e80:	6963      	ldrpl	r3, [r4, #20]
 8006e82:	60a3      	str	r3, [r4, #8]
 8006e84:	e7f4      	b.n	8006e70 <__swsetup_r+0xb0>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e7f7      	b.n	8006e7a <__swsetup_r+0xba>
 8006e8a:	bf00      	nop
 8006e8c:	20000010 	.word	0x20000010
 8006e90:	08007428 	.word	0x08007428
 8006e94:	08007448 	.word	0x08007448
 8006e98:	08007408 	.word	0x08007408

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fba0 	bl	80015ec <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200002a8 	.word	0x200002a8

08006ebc <__sflush_r>:
 8006ebc:	898a      	ldrh	r2, [r1, #12]
 8006ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	0710      	lsls	r0, r2, #28
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	d458      	bmi.n	8006f7c <__sflush_r+0xc0>
 8006eca:	684b      	ldr	r3, [r1, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dc05      	bgt.n	8006edc <__sflush_r+0x20>
 8006ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dc02      	bgt.n	8006edc <__sflush_r+0x20>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	d0f9      	beq.n	8006ed6 <__sflush_r+0x1a>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ee8:	682f      	ldr	r7, [r5, #0]
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	d032      	beq.n	8006f54 <__sflush_r+0x98>
 8006eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	075a      	lsls	r2, r3, #29
 8006ef4:	d505      	bpl.n	8006f02 <__sflush_r+0x46>
 8006ef6:	6863      	ldr	r3, [r4, #4]
 8006ef8:	1ac0      	subs	r0, r0, r3
 8006efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006efc:	b10b      	cbz	r3, 8006f02 <__sflush_r+0x46>
 8006efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f00:	1ac0      	subs	r0, r0, r3
 8006f02:	2300      	movs	r3, #0
 8006f04:	4602      	mov	r2, r0
 8006f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f08:	6a21      	ldr	r1, [r4, #32]
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b0      	blx	r6
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	d106      	bne.n	8006f22 <__sflush_r+0x66>
 8006f14:	6829      	ldr	r1, [r5, #0]
 8006f16:	291d      	cmp	r1, #29
 8006f18:	d82c      	bhi.n	8006f74 <__sflush_r+0xb8>
 8006f1a:	4a2a      	ldr	r2, [pc, #168]	; (8006fc4 <__sflush_r+0x108>)
 8006f1c:	40ca      	lsrs	r2, r1
 8006f1e:	07d6      	lsls	r6, r2, #31
 8006f20:	d528      	bpl.n	8006f74 <__sflush_r+0xb8>
 8006f22:	2200      	movs	r2, #0
 8006f24:	6062      	str	r2, [r4, #4]
 8006f26:	04d9      	lsls	r1, r3, #19
 8006f28:	6922      	ldr	r2, [r4, #16]
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	d504      	bpl.n	8006f38 <__sflush_r+0x7c>
 8006f2e:	1c42      	adds	r2, r0, #1
 8006f30:	d101      	bne.n	8006f36 <__sflush_r+0x7a>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b903      	cbnz	r3, 8006f38 <__sflush_r+0x7c>
 8006f36:	6560      	str	r0, [r4, #84]	; 0x54
 8006f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f3a:	602f      	str	r7, [r5, #0]
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	d0ca      	beq.n	8006ed6 <__sflush_r+0x1a>
 8006f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f44:	4299      	cmp	r1, r3
 8006f46:	d002      	beq.n	8006f4e <__sflush_r+0x92>
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 f925 	bl	8007198 <_free_r>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	6360      	str	r0, [r4, #52]	; 0x34
 8006f52:	e7c1      	b.n	8006ed8 <__sflush_r+0x1c>
 8006f54:	6a21      	ldr	r1, [r4, #32]
 8006f56:	2301      	movs	r3, #1
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b0      	blx	r6
 8006f5c:	1c41      	adds	r1, r0, #1
 8006f5e:	d1c7      	bne.n	8006ef0 <__sflush_r+0x34>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0c4      	beq.n	8006ef0 <__sflush_r+0x34>
 8006f66:	2b1d      	cmp	r3, #29
 8006f68:	d001      	beq.n	8006f6e <__sflush_r+0xb2>
 8006f6a:	2b16      	cmp	r3, #22
 8006f6c:	d101      	bne.n	8006f72 <__sflush_r+0xb6>
 8006f6e:	602f      	str	r7, [r5, #0]
 8006f70:	e7b1      	b.n	8006ed6 <__sflush_r+0x1a>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	e7ad      	b.n	8006ed8 <__sflush_r+0x1c>
 8006f7c:	690f      	ldr	r7, [r1, #16]
 8006f7e:	2f00      	cmp	r7, #0
 8006f80:	d0a9      	beq.n	8006ed6 <__sflush_r+0x1a>
 8006f82:	0793      	lsls	r3, r2, #30
 8006f84:	680e      	ldr	r6, [r1, #0]
 8006f86:	bf08      	it	eq
 8006f88:	694b      	ldreq	r3, [r1, #20]
 8006f8a:	600f      	str	r7, [r1, #0]
 8006f8c:	bf18      	it	ne
 8006f8e:	2300      	movne	r3, #0
 8006f90:	eba6 0807 	sub.w	r8, r6, r7
 8006f94:	608b      	str	r3, [r1, #8]
 8006f96:	f1b8 0f00 	cmp.w	r8, #0
 8006f9a:	dd9c      	ble.n	8006ed6 <__sflush_r+0x1a>
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b0      	blx	r6
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	dc06      	bgt.n	8006fba <__sflush_r+0xfe>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	e78e      	b.n	8006ed8 <__sflush_r+0x1c>
 8006fba:	4407      	add	r7, r0
 8006fbc:	eba8 0800 	sub.w	r8, r8, r0
 8006fc0:	e7e9      	b.n	8006f96 <__sflush_r+0xda>
 8006fc2:	bf00      	nop
 8006fc4:	20400001 	.word	0x20400001

08006fc8 <_fflush_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	690b      	ldr	r3, [r1, #16]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b913      	cbnz	r3, 8006fd8 <_fflush_r+0x10>
 8006fd2:	2500      	movs	r5, #0
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	b118      	cbz	r0, 8006fe2 <_fflush_r+0x1a>
 8006fda:	6983      	ldr	r3, [r0, #24]
 8006fdc:	b90b      	cbnz	r3, 8006fe2 <_fflush_r+0x1a>
 8006fde:	f7ff f8b9 	bl	8006154 <__sinit>
 8006fe2:	4b14      	ldr	r3, [pc, #80]	; (8007034 <_fflush_r+0x6c>)
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d11b      	bne.n	8007020 <_fflush_r+0x58>
 8006fe8:	686c      	ldr	r4, [r5, #4]
 8006fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ef      	beq.n	8006fd2 <_fflush_r+0xa>
 8006ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ff4:	07d0      	lsls	r0, r2, #31
 8006ff6:	d404      	bmi.n	8007002 <_fflush_r+0x3a>
 8006ff8:	0599      	lsls	r1, r3, #22
 8006ffa:	d402      	bmi.n	8007002 <_fflush_r+0x3a>
 8006ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffe:	f7ff f947 	bl	8006290 <__retarget_lock_acquire_recursive>
 8007002:	4628      	mov	r0, r5
 8007004:	4621      	mov	r1, r4
 8007006:	f7ff ff59 	bl	8006ebc <__sflush_r>
 800700a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700c:	07da      	lsls	r2, r3, #31
 800700e:	4605      	mov	r5, r0
 8007010:	d4e0      	bmi.n	8006fd4 <_fflush_r+0xc>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	059b      	lsls	r3, r3, #22
 8007016:	d4dd      	bmi.n	8006fd4 <_fflush_r+0xc>
 8007018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800701a:	f7ff f93a 	bl	8006292 <__retarget_lock_release_recursive>
 800701e:	e7d9      	b.n	8006fd4 <_fflush_r+0xc>
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <_fflush_r+0x70>)
 8007022:	429c      	cmp	r4, r3
 8007024:	d101      	bne.n	800702a <_fflush_r+0x62>
 8007026:	68ac      	ldr	r4, [r5, #8]
 8007028:	e7df      	b.n	8006fea <_fflush_r+0x22>
 800702a:	4b04      	ldr	r3, [pc, #16]	; (800703c <_fflush_r+0x74>)
 800702c:	429c      	cmp	r4, r3
 800702e:	bf08      	it	eq
 8007030:	68ec      	ldreq	r4, [r5, #12]
 8007032:	e7da      	b.n	8006fea <_fflush_r+0x22>
 8007034:	08007428 	.word	0x08007428
 8007038:	08007448 	.word	0x08007448
 800703c:	08007408 	.word	0x08007408

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_lseek_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fa faf3 	bl	800163a <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	200002a8 	.word	0x200002a8

08007064 <__swhatbuf_r>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706c:	2900      	cmp	r1, #0
 800706e:	b096      	sub	sp, #88	; 0x58
 8007070:	4614      	mov	r4, r2
 8007072:	461d      	mov	r5, r3
 8007074:	da08      	bge.n	8007088 <__swhatbuf_r+0x24>
 8007076:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	061a      	lsls	r2, r3, #24
 8007080:	d410      	bmi.n	80070a4 <__swhatbuf_r+0x40>
 8007082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007086:	e00e      	b.n	80070a6 <__swhatbuf_r+0x42>
 8007088:	466a      	mov	r2, sp
 800708a:	f000 f913 	bl	80072b4 <_fstat_r>
 800708e:	2800      	cmp	r0, #0
 8007090:	dbf1      	blt.n	8007076 <__swhatbuf_r+0x12>
 8007092:	9a01      	ldr	r2, [sp, #4]
 8007094:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007098:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800709c:	425a      	negs	r2, r3
 800709e:	415a      	adcs	r2, r3
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	e7ee      	b.n	8007082 <__swhatbuf_r+0x1e>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	2000      	movs	r0, #0
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	b016      	add	sp, #88	; 0x58
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080070b0 <__smakebuf_r>:
 80070b0:	898b      	ldrh	r3, [r1, #12]
 80070b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070b4:	079d      	lsls	r5, r3, #30
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	d507      	bpl.n	80070cc <__smakebuf_r+0x1c>
 80070bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	2301      	movs	r3, #1
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	b002      	add	sp, #8
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	ab01      	add	r3, sp, #4
 80070ce:	466a      	mov	r2, sp
 80070d0:	f7ff ffc8 	bl	8007064 <__swhatbuf_r>
 80070d4:	9900      	ldr	r1, [sp, #0]
 80070d6:	4605      	mov	r5, r0
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff f8fb 	bl	80062d4 <_malloc_r>
 80070de:	b948      	cbnz	r0, 80070f4 <__smakebuf_r+0x44>
 80070e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e4:	059a      	lsls	r2, r3, #22
 80070e6:	d4ef      	bmi.n	80070c8 <__smakebuf_r+0x18>
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	e7e3      	b.n	80070bc <__smakebuf_r+0xc>
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <__smakebuf_r+0x7c>)
 80070f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	6020      	str	r0, [r4, #0]
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	6163      	str	r3, [r4, #20]
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	6120      	str	r0, [r4, #16]
 800710a:	b15b      	cbz	r3, 8007124 <__smakebuf_r+0x74>
 800710c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007110:	4630      	mov	r0, r6
 8007112:	f000 f8e1 	bl	80072d8 <_isatty_r>
 8007116:	b128      	cbz	r0, 8007124 <__smakebuf_r+0x74>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f023 0303 	bic.w	r3, r3, #3
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	81a3      	strh	r3, [r4, #12]
 8007124:	89a0      	ldrh	r0, [r4, #12]
 8007126:	4305      	orrs	r5, r0
 8007128:	81a5      	strh	r5, [r4, #12]
 800712a:	e7cd      	b.n	80070c8 <__smakebuf_r+0x18>
 800712c:	080060ed 	.word	0x080060ed

08007130 <memcpy>:
 8007130:	440a      	add	r2, r1
 8007132:	4291      	cmp	r1, r2
 8007134:	f100 33ff 	add.w	r3, r0, #4294967295
 8007138:	d100      	bne.n	800713c <memcpy+0xc>
 800713a:	4770      	bx	lr
 800713c:	b510      	push	{r4, lr}
 800713e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007146:	4291      	cmp	r1, r2
 8007148:	d1f9      	bne.n	800713e <memcpy+0xe>
 800714a:	bd10      	pop	{r4, pc}

0800714c <memmove>:
 800714c:	4288      	cmp	r0, r1
 800714e:	b510      	push	{r4, lr}
 8007150:	eb01 0402 	add.w	r4, r1, r2
 8007154:	d902      	bls.n	800715c <memmove+0x10>
 8007156:	4284      	cmp	r4, r0
 8007158:	4623      	mov	r3, r4
 800715a:	d807      	bhi.n	800716c <memmove+0x20>
 800715c:	1e43      	subs	r3, r0, #1
 800715e:	42a1      	cmp	r1, r4
 8007160:	d008      	beq.n	8007174 <memmove+0x28>
 8007162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800716a:	e7f8      	b.n	800715e <memmove+0x12>
 800716c:	4402      	add	r2, r0
 800716e:	4601      	mov	r1, r0
 8007170:	428a      	cmp	r2, r1
 8007172:	d100      	bne.n	8007176 <memmove+0x2a>
 8007174:	bd10      	pop	{r4, pc}
 8007176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800717a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800717e:	e7f7      	b.n	8007170 <memmove+0x24>

08007180 <__malloc_lock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_lock+0x8>)
 8007182:	f7ff b885 	b.w	8006290 <__retarget_lock_acquire_recursive>
 8007186:	bf00      	nop
 8007188:	2000029c 	.word	0x2000029c

0800718c <__malloc_unlock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_unlock+0x8>)
 800718e:	f7ff b880 	b.w	8006292 <__retarget_lock_release_recursive>
 8007192:	bf00      	nop
 8007194:	2000029c 	.word	0x2000029c

08007198 <_free_r>:
 8007198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800719a:	2900      	cmp	r1, #0
 800719c:	d044      	beq.n	8007228 <_free_r+0x90>
 800719e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a2:	9001      	str	r0, [sp, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f1a1 0404 	sub.w	r4, r1, #4
 80071aa:	bfb8      	it	lt
 80071ac:	18e4      	addlt	r4, r4, r3
 80071ae:	f7ff ffe7 	bl	8007180 <__malloc_lock>
 80071b2:	4a1e      	ldr	r2, [pc, #120]	; (800722c <_free_r+0x94>)
 80071b4:	9801      	ldr	r0, [sp, #4]
 80071b6:	6813      	ldr	r3, [r2, #0]
 80071b8:	b933      	cbnz	r3, 80071c8 <_free_r+0x30>
 80071ba:	6063      	str	r3, [r4, #4]
 80071bc:	6014      	str	r4, [r2, #0]
 80071be:	b003      	add	sp, #12
 80071c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c4:	f7ff bfe2 	b.w	800718c <__malloc_unlock>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d908      	bls.n	80071de <_free_r+0x46>
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	1961      	adds	r1, r4, r5
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf01      	itttt	eq
 80071d4:	6819      	ldreq	r1, [r3, #0]
 80071d6:	685b      	ldreq	r3, [r3, #4]
 80071d8:	1949      	addeq	r1, r1, r5
 80071da:	6021      	streq	r1, [r4, #0]
 80071dc:	e7ed      	b.n	80071ba <_free_r+0x22>
 80071de:	461a      	mov	r2, r3
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	b10b      	cbz	r3, 80071e8 <_free_r+0x50>
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	d9fa      	bls.n	80071de <_free_r+0x46>
 80071e8:	6811      	ldr	r1, [r2, #0]
 80071ea:	1855      	adds	r5, r2, r1
 80071ec:	42a5      	cmp	r5, r4
 80071ee:	d10b      	bne.n	8007208 <_free_r+0x70>
 80071f0:	6824      	ldr	r4, [r4, #0]
 80071f2:	4421      	add	r1, r4
 80071f4:	1854      	adds	r4, r2, r1
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	6011      	str	r1, [r2, #0]
 80071fa:	d1e0      	bne.n	80071be <_free_r+0x26>
 80071fc:	681c      	ldr	r4, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	6053      	str	r3, [r2, #4]
 8007202:	4421      	add	r1, r4
 8007204:	6011      	str	r1, [r2, #0]
 8007206:	e7da      	b.n	80071be <_free_r+0x26>
 8007208:	d902      	bls.n	8007210 <_free_r+0x78>
 800720a:	230c      	movs	r3, #12
 800720c:	6003      	str	r3, [r0, #0]
 800720e:	e7d6      	b.n	80071be <_free_r+0x26>
 8007210:	6825      	ldr	r5, [r4, #0]
 8007212:	1961      	adds	r1, r4, r5
 8007214:	428b      	cmp	r3, r1
 8007216:	bf04      	itt	eq
 8007218:	6819      	ldreq	r1, [r3, #0]
 800721a:	685b      	ldreq	r3, [r3, #4]
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	bf04      	itt	eq
 8007220:	1949      	addeq	r1, r1, r5
 8007222:	6021      	streq	r1, [r4, #0]
 8007224:	6054      	str	r4, [r2, #4]
 8007226:	e7ca      	b.n	80071be <_free_r+0x26>
 8007228:	b003      	add	sp, #12
 800722a:	bd30      	pop	{r4, r5, pc}
 800722c:	200002a0 	.word	0x200002a0

08007230 <_realloc_r>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	4680      	mov	r8, r0
 8007236:	4614      	mov	r4, r2
 8007238:	460e      	mov	r6, r1
 800723a:	b921      	cbnz	r1, 8007246 <_realloc_r+0x16>
 800723c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	4611      	mov	r1, r2
 8007242:	f7ff b847 	b.w	80062d4 <_malloc_r>
 8007246:	b92a      	cbnz	r2, 8007254 <_realloc_r+0x24>
 8007248:	f7ff ffa6 	bl	8007198 <_free_r>
 800724c:	4625      	mov	r5, r4
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007254:	f000 f850 	bl	80072f8 <_malloc_usable_size_r>
 8007258:	4284      	cmp	r4, r0
 800725a:	4607      	mov	r7, r0
 800725c:	d802      	bhi.n	8007264 <_realloc_r+0x34>
 800725e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007262:	d812      	bhi.n	800728a <_realloc_r+0x5a>
 8007264:	4621      	mov	r1, r4
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff f834 	bl	80062d4 <_malloc_r>
 800726c:	4605      	mov	r5, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	d0ed      	beq.n	800724e <_realloc_r+0x1e>
 8007272:	42bc      	cmp	r4, r7
 8007274:	4622      	mov	r2, r4
 8007276:	4631      	mov	r1, r6
 8007278:	bf28      	it	cs
 800727a:	463a      	movcs	r2, r7
 800727c:	f7ff ff58 	bl	8007130 <memcpy>
 8007280:	4631      	mov	r1, r6
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff ff88 	bl	8007198 <_free_r>
 8007288:	e7e1      	b.n	800724e <_realloc_r+0x1e>
 800728a:	4635      	mov	r5, r6
 800728c:	e7df      	b.n	800724e <_realloc_r+0x1e>
	...

08007290 <_read_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d07      	ldr	r5, [pc, #28]	; (80072b0 <_read_r+0x20>)
 8007294:	4604      	mov	r4, r0
 8007296:	4608      	mov	r0, r1
 8007298:	4611      	mov	r1, r2
 800729a:	2200      	movs	r2, #0
 800729c:	602a      	str	r2, [r5, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f7f9 fad2 	bl	8000848 <_read>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_read_r+0x1e>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_read_r+0x1e>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200002a8 	.word	0x200002a8

080072b4 <_fstat_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d07      	ldr	r5, [pc, #28]	; (80072d4 <_fstat_r+0x20>)
 80072b8:	2300      	movs	r3, #0
 80072ba:	4604      	mov	r4, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	f7fa f99f 	bl	8001604 <_fstat>
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d102      	bne.n	80072d0 <_fstat_r+0x1c>
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	b103      	cbz	r3, 80072d0 <_fstat_r+0x1c>
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	200002a8 	.word	0x200002a8

080072d8 <_isatty_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d06      	ldr	r5, [pc, #24]	; (80072f4 <_isatty_r+0x1c>)
 80072dc:	2300      	movs	r3, #0
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fa f99e 	bl	8001624 <_isatty>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_isatty_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_isatty_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	200002a8 	.word	0x200002a8

080072f8 <_malloc_usable_size_r>:
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f18      	subs	r0, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfbc      	itt	lt
 8007302:	580b      	ldrlt	r3, [r1, r0]
 8007304:	18c0      	addlt	r0, r0, r3
 8007306:	4770      	bx	lr

08007308 <_init>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr

08007314 <_fini>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr
