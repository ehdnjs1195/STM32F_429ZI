
DAC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800492c  0800492c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004934  08004934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000dc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c26a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eca  00000000  00000000  0002c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000938  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e62  00000000  00000000  0002f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3d1  00000000  00000000  00054372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e103e  00000000  00000000  00060743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141781  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ff8  00000000  00000000  001417d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004858 	.word	0x08004858

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004858 	.word	0x08004858

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500); //문자열을 보내는 것. 문자열의 주소를 받아서 문자열의 길이까지 같이 들어옴.
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a8:	68b9      	ldr	r1, [r7, #8]
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_write+0x28>)
 80005ac:	f002 f9cd 	bl	800294a <HAL_UART_Transmit>

	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000e8 	.word	0x200000e8

080005c0 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000); //문자 하나를 보내는 것.
	return ch;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x28>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d106      	bne.n	80005e0 <HAL_ADC_ConvCpltCallback+0x20>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_ADC_ConvCpltCallback+0x2c>)
 80005d4:	f000 fe68 	bl	80012a8 <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40012000 	.word	0x40012000
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	20000130 	.word	0x20000130

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb8e 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f840 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f944 	bl	800088c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000604:	f000 f89c 	bl	8000740 <MX_ADC1_Init>
  MX_DAC_Init();
 8000608:	f000 f8ec 	bl	80007e4 <MX_DAC_Init>
  MX_USART3_UART_Init();
 800060c:	f000 f914 	bl	8000838 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	4815      	ldr	r0, [pc, #84]	; (8000668 <main+0x74>)
 8000614:	f001 f9d5 	bl	80019c2 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //가변저항의 값을 인터럽트로 발생될 때 마다 adc_value를 저장해서 아날로그 값을 12비트로 디지털 값으로 받기.
	  HAL_ADC_Start_IT(&hadc1);
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <main+0x78>)
 800061a:	f000 fc57 	bl	8000ecc <HAL_ADC_Start_IT>


	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adc_value);
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <main+0x7c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <main+0x74>)
 8000628:	f001 fa1d 	bl	8001a66 <HAL_DAC_SetValue>

	  if(dac_value < 4095) //
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <main+0x80>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000634:	4293      	cmp	r3, r2
 8000636:	dc05      	bgt.n	8000644 <main+0x50>
	  {
		  dac_value++;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <main+0x80>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x80>)
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e002      	b.n	800064a <main+0x56>
	  }
	  else
	  {
		  dac_value = 0;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0x80>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800064a:	2110      	movs	r1, #16
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0x84>)
 800064e:	f001 fcbd 	bl	8001fcc <HAL_GPIO_TogglePin>
	  printf("value : %d", adc_value);
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <main+0x7c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <main+0x88>)
 800065a:	f003 f96f 	bl	800393c <iprintf>
	  HAL_Delay(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fbcc 	bl	8000dfc <HAL_Delay>
  {
 8000664:	e7d8      	b.n	8000618 <main+0x24>
 8000666:	bf00      	nop
 8000668:	200000d4 	.word	0x200000d4
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000130 	.word	0x20000130
 8000674:	2000012c 	.word	0x2000012c
 8000678:	40020000 	.word	0x40020000
 800067c:	08004870 	.word	0x08004870

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f94c 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xb8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SystemClock_Config+0xb8>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SystemClock_Config+0xb8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <SystemClock_Config+0xbc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <SystemClock_Config+0xbc>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <SystemClock_Config+0xbc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fc83 	bl	8002000 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000700:	f000 f8fa 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fee6 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800072a:	f000 f8e5 	bl	80008f8 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_ADC1_Init+0x9c>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000780:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_ADC1_Init+0xa0>)
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_ADC1_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_ADC1_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_ADC1_Init+0x98>)
 80007a0:	f000 fb50 	bl	8000e44 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f8a5 	bl	80008f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007ae:	230a      	movs	r3, #10
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_ADC1_Init+0x98>)
 80007c0:	f000 fd94 	bl	80012ec <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007ca:	f000 f895 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	40012000 	.word	0x40012000
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_DAC_Init+0x4c>)
 80007f4:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <MX_DAC_Init+0x50>)
 80007f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_DAC_Init+0x4c>)
 80007fa:	f001 f8c0 	bl	800197e <HAL_DAC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000804:	f000 f878 	bl	80008f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_DAC_Init+0x4c>)
 8000818:	f001 f94a 	bl	8001ab0 <HAL_DAC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000822:	f000 f869 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000d4 	.word	0x200000d4
 8000834:	40007400 	.word	0x40007400

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART3_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000870:	f002 f81e 	bl	80028b0 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f83d 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000e8 	.word	0x200000e8
 8000888:	40004800 	.word	0x40004800

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_GPIO_Init+0x68>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <MX_GPIO_Init+0x68>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_GPIO_Init+0x68>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <HAL_ADC_MspInit+0x8c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12f      	bne.n	80009d6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_ADC_MspInit+0x90>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <HAL_ADC_MspInit+0x94>)
 80009c2:	f001 f957 	bl	8001c74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2012      	movs	r0, #18
 80009cc:	f000 ffa1 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009d0:	2012      	movs	r0, #18
 80009d2:	f000 ffba 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012000 	.word	0x40012000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020800 	.word	0x40020800

080009ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_DAC_MspInit+0x7c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d127      	bne.n	8000a5e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_DAC_MspInit+0x80>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a46:	2310      	movs	r3, #16
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_DAC_MspInit+0x84>)
 8000a5a:	f001 f90b 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40007400 	.word	0x40007400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_UART_MspInit+0x94>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d134      	bne.n	8000b00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_UART_MspInit+0x98>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ace:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_MspInit+0x9c>)
 8000aec:	f001 f8c2 	bl	8001c74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2027      	movs	r0, #39	; 0x27
 8000af6:	f000 ff0c 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000afa:	2027      	movs	r0, #39	; 0x27
 8000afc:	f000 ff25 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f92c 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <ADC_IRQHandler+0x10>)
 8000b6e:	f000 fa8b 	bl	8001088 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART3_IRQHandler+0x10>)
 8000b82:	f001 ff75 	bl	8002a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000e8 	.word	0x200000e8

08000b90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f002 fe38 	bl	80038d8 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20030000 	.word	0x20030000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000134 	.word	0x20000134
 8000c9c:	20000150 	.word	0x20000150

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 fdf7 	bl	80038e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc7d 	bl	80005f4 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d08:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 8000d0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d10:	2000014c 	.word	0x2000014c

08000d14 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <CAN1_RX0_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 fddb 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fdda 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fdf3 	bl	8001966 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 fdbb 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000138 	.word	0x20000138

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000138 	.word	0x20000138

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e033      	b.n	8000ec2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fd76 	bl	8000954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e8a:	f023 0302 	bic.w	r3, r3, #2
 8000e8e:	f043 0202 	orr.w	r2, r3, #2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fb5a 	bl	8001550 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb2:	e001      	b.n	8000eb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Start_IT+0x1a>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e0bd      	b.n	8001062 <HAL_ADC_Start_IT+0x196>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d018      	beq.n	8000f2e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_ADC_Start_IT+0x1a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a58      	ldr	r2, [pc, #352]	; (8001074 <HAL_ADC_Start_IT+0x1a8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9a      	lsrs	r2, r3, #18
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 8085 	bne.w	8001048 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f7c:	d106      	bne.n	8000f8c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f023 0206 	bic.w	r2, r3, #6
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000f9c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d12a      	bne.n	800101e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <HAL_ADC_Start_IT+0x1b0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d015      	beq.n	8000ffe <HAL_ADC_Start_IT+0x132>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_ADC_Start_IT+0x1b4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <HAL_ADC_Start_IT+0x11c>
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00a      	beq.n	8000ffe <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a25      	ldr	r2, [pc, #148]	; (8001084 <HAL_ADC_Start_IT+0x1b8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d136      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d129      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e020      	b.n	8001060 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_ADC_Start_IT+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d11b      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d114      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e00b      	b.n	8001060 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f043 0210 	orr.w	r2, r3, #16
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000000 	.word	0x20000000
 8001074:	431bde83 	.word	0x431bde83
 8001078:	40012300 	.word	0x40012300
 800107c:	40012000 	.word	0x40012000
 8001080:	40012100 	.word	0x40012100
 8001084:	40012200 	.word	0x40012200

08001088 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d049      	beq.n	8001152 <HAL_ADC_IRQHandler+0xca>
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d046      	beq.n	8001152 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d12b      	bne.n	8001142 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d127      	bne.n	8001142 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800110a:	2b00      	cmp	r3, #0
 800110c:	d119      	bne.n	8001142 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0220 	bic.w	r2, r2, #32
 800111c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d105      	bne.n	8001142 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fa3c 	bl	80005c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f06f 0212 	mvn.w	r2, #18
 8001150:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001160:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d057      	beq.n	8001218 <HAL_ADC_IRQHandler+0x190>
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d054      	beq.n	8001218 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d139      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d12b      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d124      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11d      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d119      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fa9d 	bl	8001748 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f06f 020c 	mvn.w	r2, #12
 8001216:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001226:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d017      	beq.n	800125e <HAL_ADC_IRQHandler+0x1d6>
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d014      	beq.n	800125e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10d      	bne.n	800125e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f837 	bl	80012c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0201 	mvn.w	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800126c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d015      	beq.n	80012a0 <HAL_ADC_IRQHandler+0x218>
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d012      	beq.n	80012a0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f043 0202 	orr.w	r2, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f06f 0220 	mvn.w	r2, #32
 800128e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f820 	bl	80012d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f06f 0220 	mvn.w	r2, #32
 800129e:	601a      	str	r2, [r3, #0]
  }
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x1c>
 8001304:	2302      	movs	r3, #2
 8001306:	e113      	b.n	8001530 <HAL_ADC_ConfigChannel+0x244>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d925      	bls.n	8001364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68d9      	ldr	r1, [r3, #12]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	3b1e      	subs	r3, #30
 800132e:	2207      	movs	r2, #7
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43da      	mvns	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	400a      	ands	r2, r1
 800133c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	4603      	mov	r3, r0
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4403      	add	r3, r0
 8001356:	3b1e      	subs	r3, #30
 8001358:	409a      	lsls	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	e022      	b.n	80013aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6919      	ldr	r1, [r3, #16]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	2207      	movs	r2, #7
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	400a      	ands	r2, r1
 8001386:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6919      	ldr	r1, [r3, #16]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	4603      	mov	r3, r0
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4403      	add	r3, r0
 80013a0:	409a      	lsls	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d824      	bhi.n	80013fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b05      	subs	r3, #5
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b05      	subs	r3, #5
 80013ee:	fa00 f203 	lsl.w	r2, r0, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
 80013fa:	e04c      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d824      	bhi.n	800144e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b23      	subs	r3, #35	; 0x23
 8001416:	221f      	movs	r2, #31
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43da      	mvns	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	400a      	ands	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	4618      	mov	r0, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b23      	subs	r3, #35	; 0x23
 8001440:	fa00 f203 	lsl.w	r2, r0, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	631a      	str	r2, [r3, #48]	; 0x30
 800144c:	e023      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3b41      	subs	r3, #65	; 0x41
 8001460:	221f      	movs	r2, #31
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4618      	mov	r0, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3b41      	subs	r3, #65	; 0x41
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_ADC_ConfigChannel+0x250>)
 8001498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a28      	ldr	r2, [pc, #160]	; (8001540 <HAL_ADC_ConfigChannel+0x254>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d10f      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1d8>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d10b      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_ADC_ConfigChannel+0x254>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12b      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x23a>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_ADC_ConfigChannel+0x258>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x1f4>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b11      	cmp	r3, #17
 80014de:	d122      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_ADC_ConfigChannel+0x258>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d111      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_ADC_ConfigChannel+0x25c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_ADC_ConfigChannel+0x260>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	0c9a      	lsrs	r2, r3, #18
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001518:	e002      	b.n	8001520 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3b01      	subs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40012300 	.word	0x40012300
 8001540:	40012000 	.word	0x40012000
 8001544:	10000012 	.word	0x10000012
 8001548:	20000000 	.word	0x20000000
 800154c:	431bde83 	.word	0x431bde83

08001550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001558:	4b79      	ldr	r3, [pc, #484]	; (8001740 <ADC_Init+0x1f0>)
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	431a      	orrs	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	021a      	lsls	r2, r3, #8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	4a58      	ldr	r2, [pc, #352]	; (8001744 <ADC_Init+0x1f4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d022      	beq.n	800162e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e00f      	b.n	800164e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800163c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800164c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0202 	bic.w	r2, r2, #2
 800165c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e1b      	ldrb	r3, [r3, #24]
 8001668:	005a      	lsls	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01b      	beq.n	80016b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800168a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800169a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6859      	ldr	r1, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	3b01      	subs	r3, #1
 80016a8:	035a      	lsls	r2, r3, #13
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	e007      	b.n	80016c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	3b01      	subs	r3, #1
 80016e0:	051a      	lsls	r2, r3, #20
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6899      	ldr	r1, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001706:	025a      	lsls	r2, r3, #9
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	029a      	lsls	r2, r3, #10
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40012300 	.word	0x40012300
 8001744:	0f000001 	.word	0x0f000001

08001748 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e014      	b.n	80019ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f823 	bl	80009ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	795b      	ldrb	r3, [r3, #5]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_DAC_Start+0x16>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e040      	b.n	8001a5a <HAL_DAC_Start+0x98>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2201      	movs	r2, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001a0c:	2b3c      	cmp	r3, #60	; 0x3c
 8001a0e:	d11d      	bne.n	8001a4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	e014      	b.n	8001a4c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	213c      	movs	r1, #60	; 0x3c
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0202 	orr.w	r2, r2, #2
 8001a4a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b087      	sub	sp, #28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e004      	b.n	8001a9a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	3314      	adds	r3, #20
 8001a98:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DAC_ConfigChannel+0x18>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e03c      	b.n	8001b42 <HAL_DAC_ConfigChannel+0x92>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4013      	ands	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	22c0      	movs	r2, #192	; 0xc0
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff f942 	bl	8000de4 <HAL_GetTick>
 8001b60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d008      	beq.n	8001b80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e052      	b.n	8001c26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0216 	bic.w	r2, r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d103      	bne.n	8001bb0 <HAL_DMA_Abort+0x62>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0208 	bic.w	r2, r2, #8
 8001bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd0:	e013      	b.n	8001bfa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bd2:	f7ff f907 	bl	8000de4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d90c      	bls.n	8001bfa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e015      	b.n	8001c26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e4      	bne.n	8001bd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d004      	beq.n	8001c4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e00c      	b.n	8001c66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2205      	movs	r2, #5
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e177      	b.n	8001f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8166 	bne.w	8001f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80c0 	beq.w	8001f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a61      	ldr	r2, [pc, #388]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d037      	beq.n	8001eb2 <HAL_GPIO_Init+0x23e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_GPIO_Init+0x23a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_GPIO_Init+0x334>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <HAL_GPIO_Init+0x236>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <HAL_GPIO_Init+0x338>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x232>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a54      	ldr	r2, [pc, #336]	; (8001fb0 <HAL_GPIO_Init+0x33c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x22e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <HAL_GPIO_Init+0x340>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x22a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x344>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x348>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_GPIO_Init+0x34c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x350>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	e012      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e8e:	230a      	movs	r3, #10
 8001e90:	e010      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e92:	2308      	movs	r3, #8
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x240>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x328>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_GPIO_Init+0x354>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae84 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40013c00 	.word	0x40013c00

08001fcc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43d9      	mvns	r1, r3
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	400b      	ands	r3, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e267      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e242      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6f      	ldr	r2, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a68      	ldr	r2, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe94 	bl	8000de4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fe90 	bl	8000de4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e207      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fe80 	bl	8000de4 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fe7c 	bl	8000de4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f3      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c7      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fe35 	bl	8000de4 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe fe31 	bl	8000de4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a8      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe14 	bl	8000de4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe fe10 	bl	8000de4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e187      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fdf4 	bl	8000de4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe fdf0 	bl	8000de4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e167      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fddd 	bl	8000de4 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe fdd9 	bl	8000de4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e150      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b74      	ldr	r3, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a73      	ldr	r2, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe fd99 	bl	8000de4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe fd95 	bl	8000de4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e10c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x2ea>
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x30c>
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fd5a 	bl	8000de4 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe fd56 	bl	8000de4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0cb      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x334>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe fd44 	bl	8000de4 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fd40 	bl	8000de4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0b5      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a1 	beq.w	80024e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d05c      	beq.n	8002464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d141      	bne.n	8002436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fd14 	bl	8000de4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fd10 	bl	8000de4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fce9 	bl	8000de4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fce5 	bl	8000de4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e05c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x416>
 8002434:	e054      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fcd2 	bl	8000de4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fcce 	bl	8000de4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e045      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x444>
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e038      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000
 8002478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d028      	beq.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d121      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fc00 	bl	8000de4 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fbfc 	bl	8000de4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fb60 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	0800487c 	.word	0x0800487c
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
 80026c8:	2300      	movs	r3, #0
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80a1 	bhi.w	8002828 <HAL_RCC_GetSysClockFreq+0x16c>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e09b      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_GetSysClockFreq+0x184>)
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026f4:	e09b      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026fa:	e098      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	627a      	str	r2, [r7, #36]	; 0x24
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002724:	2100      	movs	r1, #0
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 8002728:	fb03 f201 	mul.w	r2, r3, r1
 800272c:	2300      	movs	r3, #0
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	4413      	add	r3, r2
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 8002736:	fba0 1202 	umull	r1, r2, r0, r2
 800273a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800273c:	460a      	mov	r2, r1
 800273e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	4413      	add	r3, r2
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	2200      	movs	r2, #0
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	61fa      	str	r2, [r7, #28]
 800274e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002756:	f7fd fd9b 	bl	8000290 <__aeabi_uldivmod>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4613      	mov	r3, r2
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002762:	e053      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	2200      	movs	r2, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	617a      	str	r2, [r7, #20]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002776:	f04f 0b00 	mov.w	fp, #0
 800277a:	4652      	mov	r2, sl
 800277c:	465b      	mov	r3, fp
 800277e:	f04f 0000 	mov.w	r0, #0
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	0159      	lsls	r1, r3, #5
 8002788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278c:	0150      	lsls	r0, r2, #5
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	ebb2 080a 	subs.w	r8, r2, sl
 8002796:	eb63 090b 	sbc.w	r9, r3, fp
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ae:	ebb2 0408 	subs.w	r4, r2, r8
 80027b2:	eb63 0509 	sbc.w	r5, r3, r9
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	00eb      	lsls	r3, r5, #3
 80027c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c4:	00e2      	lsls	r2, r4, #3
 80027c6:	4614      	mov	r4, r2
 80027c8:	461d      	mov	r5, r3
 80027ca:	eb14 030a 	adds.w	r3, r4, sl
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	eb45 030b 	adc.w	r3, r5, fp
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e2:	4629      	mov	r1, r5
 80027e4:	028b      	lsls	r3, r1, #10
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ec:	4621      	mov	r1, r4
 80027ee:	028a      	lsls	r2, r1, #10
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f6:	2200      	movs	r2, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002800:	f7fd fd46 	bl	8000290 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800281c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetSysClockFreq+0x184>)
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002830:	4618      	mov	r0, r3
 8002832:	3740      	adds	r7, #64	; 0x40
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400
 8002844:	017d7840 	.word	0x017d7840

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	0800488c 	.word	0x0800488c

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffdc 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0b5b      	lsrs	r3, r3, #13
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	0800488c 	.word	0x0800488c

080028b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e03f      	b.n	8002942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe f8cc 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fd7b 	bl	80033f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b08a      	sub	sp, #40	; 0x28
 800294e:	af02      	add	r7, sp, #8
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b20      	cmp	r3, #32
 8002968:	d17c      	bne.n	8002a64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_UART_Transmit+0x2c>
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e075      	b.n	8002a66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_UART_Transmit+0x3e>
 8002984:	2302      	movs	r3, #2
 8002986:	e06e      	b.n	8002a66 <HAL_UART_Transmit+0x11c>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2221      	movs	r2, #33	; 0x21
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe fa21 	bl	8000de4 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	d108      	bne.n	80029cc <HAL_UART_Transmit+0x82>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	e003      	b.n	80029d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029dc:	e02a      	b.n	8002a34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 faf9 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e036      	b.n	8002a66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3302      	adds	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	e007      	b.n	8002a26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1cf      	bne.n	80029de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2140      	movs	r1, #64	; 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fac9 	bl	8002fe0 <UART_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e006      	b.n	8002a66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0ba      	sub	sp, #232	; 0xe8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x66>
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fbd3 	bl	800327a <UART_Receive_IT>
      return;
 8002ad4:	e256      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80de 	beq.w	8002c9c <HAL_UART_IRQHandler+0x22c>
 8002ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80d1 	beq.w	8002c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_UART_IRQHandler+0xae>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xd2>
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_UART_IRQHandler+0xf6>
 8002b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <HAL_UART_IRQHandler+0x126>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 81ed 	beq.w	8002f7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_UART_IRQHandler+0x14e>
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fb5e 	bl	800327a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_UART_IRQHandler+0x17a>
 8002be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04f      	beq.n	8002c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa66 	bl	80030bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d141      	bne.n	8002c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1d9      	bne.n	8002bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_UART_IRQHandler+0x3dc>)
 8002c58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe ffe5 	bl	8001c2e <HAL_DMA_Abort_IT>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c74:	4610      	mov	r0, r2
 8002c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	e00e      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f99a 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	e00a      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f996 	bl	8002fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e006      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f992 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c96:	e170      	b.n	8002f7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	bf00      	nop
    return;
 8002c9a:	e16e      	b.n	8002f7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 814a 	bne.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8143 	beq.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 813c 	beq.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	f040 80b4 	bne.w	8002e50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8140 	beq.w	8002f7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f080 8139 	bcs.w	8002f7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	f000 8088 	beq.w	8002e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1d9      	bne.n	8002d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e1      	bne.n	8002d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e3      	bne.n	8002daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e02:	f023 0310 	bic.w	r3, r3, #16
 8002e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe8e 	bl	8001b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8c0 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e48:	e099      	b.n	8002f7e <HAL_UART_IRQHandler+0x50e>
 8002e4a:	bf00      	nop
 8002e4c:	08003183 	.word	0x08003183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 808b 	beq.w	8002f82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8086 	beq.w	8002f82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e3      	bne.n	8002e76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f18:	61fa      	str	r2, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	617b      	str	r3, [r7, #20]
   return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e3      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f848 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f38:	e023      	b.n	8002f82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_UART_IRQHandler+0x4ea>
 8002f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f929 	bl	80031aa <UART_Transmit_IT>
    return;
 8002f58:	e014      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <HAL_UART_IRQHandler+0x514>
 8002f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f969 	bl	800324a <UART_EndTransmit_IT>
    return;
 8002f78:	e004      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
    return;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
      return;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
      return;
 8002f82:	bf00      	nop
  }
}
 8002f84:	37e8      	adds	r7, #232	; 0xe8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b090      	sub	sp, #64	; 0x40
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff0:	e050      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d04c      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <UART_WaitOnFlagUntilTimeout+0x30>
 8003000:	f7fd fef0 	bl	8000de4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800300c:	429a      	cmp	r2, r3
 800300e:	d241      	bcs.n	8003094 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003030:	637a      	str	r2, [r7, #52]	; 0x34
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e5      	bne.n	8003010 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	613b      	str	r3, [r7, #16]
   return(result);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	63bb      	str	r3, [r7, #56]	; 0x38
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003064:	623a      	str	r2, [r7, #32]
 8003066:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	69f9      	ldr	r1, [r7, #28]
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	61bb      	str	r3, [r7, #24]
   return(result);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e00f      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d09f      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3740      	adds	r7, #64	; 0x40
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b095      	sub	sp, #84	; 0x54
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030e4:	643a      	str	r2, [r7, #64]	; 0x40
 80030e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e5      	bne.n	80030c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	61fb      	str	r3, [r7, #28]
   return(result);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003120:	e841 2300 	strex	r3, r2, [r1]
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	2b01      	cmp	r3, #1
 8003132:	d119      	bne.n	8003168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	60bb      	str	r3, [r7, #8]
   return(result);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	647b      	str	r3, [r7, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003154:	61ba      	str	r2, [r7, #24]
 8003156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	613b      	str	r3, [r7, #16]
   return(result);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003176:	bf00      	nop
 8003178:	3754      	adds	r7, #84	; 0x54
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7ff ff09 	bl	8002fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b21      	cmp	r3, #33	; 0x21
 80031bc:	d13e      	bne.n	800323c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	d114      	bne.n	80031f2 <UART_Transmit_IT+0x48>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d110      	bne.n	80031f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	621a      	str	r2, [r3, #32]
 80031f0:	e008      	b.n	8003204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6211      	str	r1, [r2, #32]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29b      	uxth	r3, r3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4619      	mov	r1, r3
 8003212:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fe8e 	bl	8002f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08c      	sub	sp, #48	; 0x30
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b22      	cmp	r3, #34	; 0x22
 800328c:	f040 80ab 	bne.w	80033e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d117      	bne.n	80032ca <UART_Receive_IT+0x50>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d113      	bne.n	80032ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
 80032c8:	e026      	b.n	8003318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d007      	beq.n	80032ee <UART_Receive_IT+0x74>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <UART_Receive_IT+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e008      	b.n	800330e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003308:	b2da      	uxtb	r2, r3
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29b      	uxth	r3, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15a      	bne.n	80033e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0220 	bic.w	r2, r2, #32
 800333a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800334a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	d135      	bne.n	80033d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	613b      	str	r3, [r7, #16]
   return(result);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f023 0310 	bic.w	r3, r3, #16
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003392:	623a      	str	r2, [r7, #32]
 8003394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	69f9      	ldr	r1, [r7, #28]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e5      	bne.n	8003372 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d10a      	bne.n	80033ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fdf9 	bl	8002fc8 <HAL_UARTEx_RxEventCallback>
 80033d6:	e002      	b.n	80033de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fde1 	bl	8002fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e002      	b.n	80033e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b0c0      	sub	sp, #256	; 0x100
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	ea40 0301 	orr.w	r3, r0, r1
 8003418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	431a      	orrs	r2, r3
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	431a      	orrs	r2, r3
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003448:	f021 010c 	bic.w	r1, r1, #12
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003456:	430b      	orrs	r3, r1
 8003458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	6999      	ldr	r1, [r3, #24]
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	ea40 0301 	orr.w	r3, r0, r1
 8003476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <UART_SetConfig+0x2cc>)
 8003480:	429a      	cmp	r2, r3
 8003482:	d005      	beq.n	8003490 <UART_SetConfig+0xa0>
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b8d      	ldr	r3, [pc, #564]	; (80036c0 <UART_SetConfig+0x2d0>)
 800348c:	429a      	cmp	r2, r3
 800348e:	d104      	bne.n	800349a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7ff f9fa 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8003494:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003498:	e003      	b.n	80034a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800349a:	f7ff f9e1 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 800349e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ac:	f040 810c 	bne.w	80036c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034c2:	4622      	mov	r2, r4
 80034c4:	462b      	mov	r3, r5
 80034c6:	1891      	adds	r1, r2, r2
 80034c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80034ca:	415b      	adcs	r3, r3
 80034cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034d2:	4621      	mov	r1, r4
 80034d4:	eb12 0801 	adds.w	r8, r2, r1
 80034d8:	4629      	mov	r1, r5
 80034da:	eb43 0901 	adc.w	r9, r3, r1
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	eb18 0303 	adds.w	r3, r8, r3
 80034fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003500:	462b      	mov	r3, r5
 8003502:	eb49 0303 	adc.w	r3, r9, r3
 8003506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003516:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800351a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800351e:	460b      	mov	r3, r1
 8003520:	18db      	adds	r3, r3, r3
 8003522:	653b      	str	r3, [r7, #80]	; 0x50
 8003524:	4613      	mov	r3, r2
 8003526:	eb42 0303 	adc.w	r3, r2, r3
 800352a:	657b      	str	r3, [r7, #84]	; 0x54
 800352c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003534:	f7fc feac 	bl	8000290 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <UART_SetConfig+0x2d4>)
 800353e:	fba3 2302 	umull	r2, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	011c      	lsls	r4, r3, #4
 8003546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003550:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	1891      	adds	r1, r2, r2
 800355e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003560:	415b      	adcs	r3, r3
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003568:	4641      	mov	r1, r8
 800356a:	eb12 0a01 	adds.w	sl, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb43 0b01 	adc.w	fp, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003588:	4692      	mov	sl, r2
 800358a:	469b      	mov	fp, r3
 800358c:	4643      	mov	r3, r8
 800358e:	eb1a 0303 	adds.w	r3, sl, r3
 8003592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003596:	464b      	mov	r3, r9
 8003598:	eb4b 0303 	adc.w	r3, fp, r3
 800359c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035b4:	460b      	mov	r3, r1
 80035b6:	18db      	adds	r3, r3, r3
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ba:	4613      	mov	r3, r2
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	647b      	str	r3, [r7, #68]	; 0x44
 80035c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035ca:	f7fc fe61 	bl	8000290 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <UART_SetConfig+0x2d4>)
 80035d6:	fba3 2301 	umull	r2, r3, r3, r1
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2264      	movs	r2, #100	; 0x64
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	1acb      	subs	r3, r1, r3
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <UART_SetConfig+0x2d4>)
 80035ec:	fba3 2302 	umull	r2, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035f8:	441c      	add	r4, r3
 80035fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003604:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800360c:	4642      	mov	r2, r8
 800360e:	464b      	mov	r3, r9
 8003610:	1891      	adds	r1, r2, r2
 8003612:	63b9      	str	r1, [r7, #56]	; 0x38
 8003614:	415b      	adcs	r3, r3
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800361c:	4641      	mov	r1, r8
 800361e:	1851      	adds	r1, r2, r1
 8003620:	6339      	str	r1, [r7, #48]	; 0x30
 8003622:	4649      	mov	r1, r9
 8003624:	414b      	adcs	r3, r1
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003634:	4659      	mov	r1, fp
 8003636:	00cb      	lsls	r3, r1, #3
 8003638:	4651      	mov	r1, sl
 800363a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800363e:	4651      	mov	r1, sl
 8003640:	00ca      	lsls	r2, r1, #3
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	4603      	mov	r3, r0
 8003648:	4642      	mov	r2, r8
 800364a:	189b      	adds	r3, r3, r2
 800364c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003650:	464b      	mov	r3, r9
 8003652:	460a      	mov	r2, r1
 8003654:	eb42 0303 	adc.w	r3, r2, r3
 8003658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003668:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800366c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003670:	460b      	mov	r3, r1
 8003672:	18db      	adds	r3, r3, r3
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
 8003676:	4613      	mov	r3, r2
 8003678:	eb42 0303 	adc.w	r3, r2, r3
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003686:	f7fc fe03 	bl	8000290 <__aeabi_uldivmod>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <UART_SetConfig+0x2d4>)
 8003690:	fba3 1302 	umull	r1, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	2164      	movs	r1, #100	; 0x64
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	3332      	adds	r3, #50	; 0x32
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <UART_SetConfig+0x2d4>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	f003 0207 	and.w	r2, r3, #7
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4422      	add	r2, r4
 80036b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036b8:	e105      	b.n	80038c6 <UART_SetConfig+0x4d6>
 80036ba:	bf00      	nop
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036da:	4642      	mov	r2, r8
 80036dc:	464b      	mov	r3, r9
 80036de:	1891      	adds	r1, r2, r2
 80036e0:	6239      	str	r1, [r7, #32]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ea:	4641      	mov	r1, r8
 80036ec:	1854      	adds	r4, r2, r1
 80036ee:	4649      	mov	r1, r9
 80036f0:	eb43 0501 	adc.w	r5, r3, r1
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	00eb      	lsls	r3, r5, #3
 80036fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003702:	00e2      	lsls	r2, r4, #3
 8003704:	4614      	mov	r4, r2
 8003706:	461d      	mov	r5, r3
 8003708:	4643      	mov	r3, r8
 800370a:	18e3      	adds	r3, r4, r3
 800370c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003710:	464b      	mov	r3, r9
 8003712:	eb45 0303 	adc.w	r3, r5, r3
 8003716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003726:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003736:	4629      	mov	r1, r5
 8003738:	008b      	lsls	r3, r1, #2
 800373a:	4621      	mov	r1, r4
 800373c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003740:	4621      	mov	r1, r4
 8003742:	008a      	lsls	r2, r1, #2
 8003744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003748:	f7fc fda2 	bl	8000290 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4b60      	ldr	r3, [pc, #384]	; (80038d4 <UART_SetConfig+0x4e4>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011c      	lsls	r4, r3, #4
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	61b9      	str	r1, [r7, #24]
 8003774:	415b      	adcs	r3, r3
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800377c:	4641      	mov	r1, r8
 800377e:	1851      	adds	r1, r2, r1
 8003780:	6139      	str	r1, [r7, #16]
 8003782:	4649      	mov	r1, r9
 8003784:	414b      	adcs	r3, r1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003794:	4659      	mov	r1, fp
 8003796:	00cb      	lsls	r3, r1, #3
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379e:	4651      	mov	r1, sl
 80037a0:	00ca      	lsls	r2, r1, #3
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	4642      	mov	r2, r8
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037b0:	464b      	mov	r3, r9
 80037b2:	460a      	mov	r2, r1
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037d4:	4649      	mov	r1, r9
 80037d6:	008b      	lsls	r3, r1, #2
 80037d8:	4641      	mov	r1, r8
 80037da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037de:	4641      	mov	r1, r8
 80037e0:	008a      	lsls	r2, r1, #2
 80037e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037e6:	f7fc fd53 	bl	8000290 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <UART_SetConfig+0x4e4>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2164      	movs	r1, #100	; 0x64
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	3332      	adds	r3, #50	; 0x32
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <UART_SetConfig+0x4e4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380e:	441c      	add	r4, r3
 8003810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003814:	2200      	movs	r2, #0
 8003816:	673b      	str	r3, [r7, #112]	; 0x70
 8003818:	677a      	str	r2, [r7, #116]	; 0x74
 800381a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800381e:	4642      	mov	r2, r8
 8003820:	464b      	mov	r3, r9
 8003822:	1891      	adds	r1, r2, r2
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	415b      	adcs	r3, r3
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800382e:	4641      	mov	r1, r8
 8003830:	1851      	adds	r1, r2, r1
 8003832:	6039      	str	r1, [r7, #0]
 8003834:	4649      	mov	r1, r9
 8003836:	414b      	adcs	r3, r1
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003846:	4659      	mov	r1, fp
 8003848:	00cb      	lsls	r3, r1, #3
 800384a:	4651      	mov	r1, sl
 800384c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003850:	4651      	mov	r1, sl
 8003852:	00ca      	lsls	r2, r1, #3
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	4603      	mov	r3, r0
 800385a:	4642      	mov	r2, r8
 800385c:	189b      	adds	r3, r3, r2
 800385e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003860:	464b      	mov	r3, r9
 8003862:	460a      	mov	r2, r1
 8003864:	eb42 0303 	adc.w	r3, r2, r3
 8003868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	663b      	str	r3, [r7, #96]	; 0x60
 8003874:	667a      	str	r2, [r7, #100]	; 0x64
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003882:	4649      	mov	r1, r9
 8003884:	008b      	lsls	r3, r1, #2
 8003886:	4641      	mov	r1, r8
 8003888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800388c:	4641      	mov	r1, r8
 800388e:	008a      	lsls	r2, r1, #2
 8003890:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003894:	f7fc fcfc 	bl	8000290 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <UART_SetConfig+0x4e4>)
 800389e:	fba3 1302 	umull	r1, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2164      	movs	r1, #100	; 0x64
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <UART_SetConfig+0x4e4>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4422      	add	r2, r4
 80038c4:	609a      	str	r2, [r3, #8]
}
 80038c6:	bf00      	nop
 80038c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	51eb851f 	.word	0x51eb851f

080038d8 <__errno>:
 80038d8:	4b01      	ldr	r3, [pc, #4]	; (80038e0 <__errno+0x8>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	2000000c 	.word	0x2000000c

080038e4 <__libc_init_array>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4d0d      	ldr	r5, [pc, #52]	; (800391c <__libc_init_array+0x38>)
 80038e8:	4c0d      	ldr	r4, [pc, #52]	; (8003920 <__libc_init_array+0x3c>)
 80038ea:	1b64      	subs	r4, r4, r5
 80038ec:	10a4      	asrs	r4, r4, #2
 80038ee:	2600      	movs	r6, #0
 80038f0:	42a6      	cmp	r6, r4
 80038f2:	d109      	bne.n	8003908 <__libc_init_array+0x24>
 80038f4:	4d0b      	ldr	r5, [pc, #44]	; (8003924 <__libc_init_array+0x40>)
 80038f6:	4c0c      	ldr	r4, [pc, #48]	; (8003928 <__libc_init_array+0x44>)
 80038f8:	f000 ffae 	bl	8004858 <_init>
 80038fc:	1b64      	subs	r4, r4, r5
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	2600      	movs	r6, #0
 8003902:	42a6      	cmp	r6, r4
 8003904:	d105      	bne.n	8003912 <__libc_init_array+0x2e>
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	f855 3b04 	ldr.w	r3, [r5], #4
 800390c:	4798      	blx	r3
 800390e:	3601      	adds	r6, #1
 8003910:	e7ee      	b.n	80038f0 <__libc_init_array+0xc>
 8003912:	f855 3b04 	ldr.w	r3, [r5], #4
 8003916:	4798      	blx	r3
 8003918:	3601      	adds	r6, #1
 800391a:	e7f2      	b.n	8003902 <__libc_init_array+0x1e>
 800391c:	08004934 	.word	0x08004934
 8003920:	08004934 	.word	0x08004934
 8003924:	08004934 	.word	0x08004934
 8003928:	08004938 	.word	0x08004938

0800392c <memset>:
 800392c:	4402      	add	r2, r0
 800392e:	4603      	mov	r3, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	f803 1b01 	strb.w	r1, [r3], #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <iprintf>:
 800393c:	b40f      	push	{r0, r1, r2, r3}
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <iprintf+0x2c>)
 8003940:	b513      	push	{r0, r1, r4, lr}
 8003942:	681c      	ldr	r4, [r3, #0]
 8003944:	b124      	cbz	r4, 8003950 <iprintf+0x14>
 8003946:	69a3      	ldr	r3, [r4, #24]
 8003948:	b913      	cbnz	r3, 8003950 <iprintf+0x14>
 800394a:	4620      	mov	r0, r4
 800394c:	f000 f866 	bl	8003a1c <__sinit>
 8003950:	ab05      	add	r3, sp, #20
 8003952:	9a04      	ldr	r2, [sp, #16]
 8003954:	68a1      	ldr	r1, [r4, #8]
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	4620      	mov	r0, r4
 800395a:	f000 f9bd 	bl	8003cd8 <_vfiprintf_r>
 800395e:	b002      	add	sp, #8
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003964:	b004      	add	sp, #16
 8003966:	4770      	bx	lr
 8003968:	2000000c 	.word	0x2000000c

0800396c <std>:
 800396c:	2300      	movs	r3, #0
 800396e:	b510      	push	{r4, lr}
 8003970:	4604      	mov	r4, r0
 8003972:	e9c0 3300 	strd	r3, r3, [r0]
 8003976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800397a:	6083      	str	r3, [r0, #8]
 800397c:	8181      	strh	r1, [r0, #12]
 800397e:	6643      	str	r3, [r0, #100]	; 0x64
 8003980:	81c2      	strh	r2, [r0, #14]
 8003982:	6183      	str	r3, [r0, #24]
 8003984:	4619      	mov	r1, r3
 8003986:	2208      	movs	r2, #8
 8003988:	305c      	adds	r0, #92	; 0x5c
 800398a:	f7ff ffcf 	bl	800392c <memset>
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <std+0x38>)
 8003990:	6263      	str	r3, [r4, #36]	; 0x24
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <std+0x3c>)
 8003994:	62a3      	str	r3, [r4, #40]	; 0x28
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <std+0x40>)
 8003998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <std+0x44>)
 800399c:	6224      	str	r4, [r4, #32]
 800399e:	6323      	str	r3, [r4, #48]	; 0x30
 80039a0:	bd10      	pop	{r4, pc}
 80039a2:	bf00      	nop
 80039a4:	08004281 	.word	0x08004281
 80039a8:	080042a3 	.word	0x080042a3
 80039ac:	080042db 	.word	0x080042db
 80039b0:	080042ff 	.word	0x080042ff

080039b4 <_cleanup_r>:
 80039b4:	4901      	ldr	r1, [pc, #4]	; (80039bc <_cleanup_r+0x8>)
 80039b6:	f000 b8af 	b.w	8003b18 <_fwalk_reent>
 80039ba:	bf00      	nop
 80039bc:	080045d9 	.word	0x080045d9

080039c0 <__sfmoreglue>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	2268      	movs	r2, #104	; 0x68
 80039c4:	1e4d      	subs	r5, r1, #1
 80039c6:	4355      	muls	r5, r2
 80039c8:	460e      	mov	r6, r1
 80039ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039ce:	f000 f8e5 	bl	8003b9c <_malloc_r>
 80039d2:	4604      	mov	r4, r0
 80039d4:	b140      	cbz	r0, 80039e8 <__sfmoreglue+0x28>
 80039d6:	2100      	movs	r1, #0
 80039d8:	e9c0 1600 	strd	r1, r6, [r0]
 80039dc:	300c      	adds	r0, #12
 80039de:	60a0      	str	r0, [r4, #8]
 80039e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039e4:	f7ff ffa2 	bl	800392c <memset>
 80039e8:	4620      	mov	r0, r4
 80039ea:	bd70      	pop	{r4, r5, r6, pc}

080039ec <__sfp_lock_acquire>:
 80039ec:	4801      	ldr	r0, [pc, #4]	; (80039f4 <__sfp_lock_acquire+0x8>)
 80039ee:	f000 b8b3 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 80039f2:	bf00      	nop
 80039f4:	2000013d 	.word	0x2000013d

080039f8 <__sfp_lock_release>:
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <__sfp_lock_release+0x8>)
 80039fa:	f000 b8ae 	b.w	8003b5a <__retarget_lock_release_recursive>
 80039fe:	bf00      	nop
 8003a00:	2000013d 	.word	0x2000013d

08003a04 <__sinit_lock_acquire>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__sinit_lock_acquire+0x8>)
 8003a06:	f000 b8a7 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	2000013e 	.word	0x2000013e

08003a10 <__sinit_lock_release>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__sinit_lock_release+0x8>)
 8003a12:	f000 b8a2 	b.w	8003b5a <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	2000013e 	.word	0x2000013e

08003a1c <__sinit>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4604      	mov	r4, r0
 8003a20:	f7ff fff0 	bl	8003a04 <__sinit_lock_acquire>
 8003a24:	69a3      	ldr	r3, [r4, #24]
 8003a26:	b11b      	cbz	r3, 8003a30 <__sinit+0x14>
 8003a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a2c:	f7ff bff0 	b.w	8003a10 <__sinit_lock_release>
 8003a30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a34:	6523      	str	r3, [r4, #80]	; 0x50
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <__sinit+0x68>)
 8003a38:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <__sinit+0x6c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	bf04      	itt	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	61a3      	streq	r3, [r4, #24]
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 f820 	bl	8003a8c <__sfp>
 8003a4c:	6060      	str	r0, [r4, #4]
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f000 f81c 	bl	8003a8c <__sfp>
 8003a54:	60a0      	str	r0, [r4, #8]
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 f818 	bl	8003a8c <__sfp>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	60e0      	str	r0, [r4, #12]
 8003a60:	2104      	movs	r1, #4
 8003a62:	6860      	ldr	r0, [r4, #4]
 8003a64:	f7ff ff82 	bl	800396c <std>
 8003a68:	68a0      	ldr	r0, [r4, #8]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2109      	movs	r1, #9
 8003a6e:	f7ff ff7d 	bl	800396c <std>
 8003a72:	68e0      	ldr	r0, [r4, #12]
 8003a74:	2202      	movs	r2, #2
 8003a76:	2112      	movs	r1, #18
 8003a78:	f7ff ff78 	bl	800396c <std>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	61a3      	str	r3, [r4, #24]
 8003a80:	e7d2      	b.n	8003a28 <__sinit+0xc>
 8003a82:	bf00      	nop
 8003a84:	08004894 	.word	0x08004894
 8003a88:	080039b5 	.word	0x080039b5

08003a8c <__sfp>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	4607      	mov	r7, r0
 8003a90:	f7ff ffac 	bl	80039ec <__sfp_lock_acquire>
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <__sfp+0x84>)
 8003a96:	681e      	ldr	r6, [r3, #0]
 8003a98:	69b3      	ldr	r3, [r6, #24]
 8003a9a:	b913      	cbnz	r3, 8003aa2 <__sfp+0x16>
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f7ff ffbd 	bl	8003a1c <__sinit>
 8003aa2:	3648      	adds	r6, #72	; 0x48
 8003aa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	d503      	bpl.n	8003ab4 <__sfp+0x28>
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	b30b      	cbz	r3, 8003af4 <__sfp+0x68>
 8003ab0:	6836      	ldr	r6, [r6, #0]
 8003ab2:	e7f7      	b.n	8003aa4 <__sfp+0x18>
 8003ab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ab8:	b9d5      	cbnz	r5, 8003af0 <__sfp+0x64>
 8003aba:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <__sfp+0x88>)
 8003abc:	60e3      	str	r3, [r4, #12]
 8003abe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ac2:	6665      	str	r5, [r4, #100]	; 0x64
 8003ac4:	f000 f847 	bl	8003b56 <__retarget_lock_init_recursive>
 8003ac8:	f7ff ff96 	bl	80039f8 <__sfp_lock_release>
 8003acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ad4:	6025      	str	r5, [r4, #0]
 8003ad6:	61a5      	str	r5, [r4, #24]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4629      	mov	r1, r5
 8003adc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ae0:	f7ff ff24 	bl	800392c <memset>
 8003ae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003aec:	4620      	mov	r0, r4
 8003aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af0:	3468      	adds	r4, #104	; 0x68
 8003af2:	e7d9      	b.n	8003aa8 <__sfp+0x1c>
 8003af4:	2104      	movs	r1, #4
 8003af6:	4638      	mov	r0, r7
 8003af8:	f7ff ff62 	bl	80039c0 <__sfmoreglue>
 8003afc:	4604      	mov	r4, r0
 8003afe:	6030      	str	r0, [r6, #0]
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1d5      	bne.n	8003ab0 <__sfp+0x24>
 8003b04:	f7ff ff78 	bl	80039f8 <__sfp_lock_release>
 8003b08:	230c      	movs	r3, #12
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	e7ee      	b.n	8003aec <__sfp+0x60>
 8003b0e:	bf00      	nop
 8003b10:	08004894 	.word	0x08004894
 8003b14:	ffff0001 	.word	0xffff0001

08003b18 <_fwalk_reent>:
 8003b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b1c:	4606      	mov	r6, r0
 8003b1e:	4688      	mov	r8, r1
 8003b20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b24:	2700      	movs	r7, #0
 8003b26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b2a:	f1b9 0901 	subs.w	r9, r9, #1
 8003b2e:	d505      	bpl.n	8003b3c <_fwalk_reent+0x24>
 8003b30:	6824      	ldr	r4, [r4, #0]
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	d1f7      	bne.n	8003b26 <_fwalk_reent+0xe>
 8003b36:	4638      	mov	r0, r7
 8003b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b3c:	89ab      	ldrh	r3, [r5, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d907      	bls.n	8003b52 <_fwalk_reent+0x3a>
 8003b42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b46:	3301      	adds	r3, #1
 8003b48:	d003      	beq.n	8003b52 <_fwalk_reent+0x3a>
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	47c0      	blx	r8
 8003b50:	4307      	orrs	r7, r0
 8003b52:	3568      	adds	r5, #104	; 0x68
 8003b54:	e7e9      	b.n	8003b2a <_fwalk_reent+0x12>

08003b56 <__retarget_lock_init_recursive>:
 8003b56:	4770      	bx	lr

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <sbrk_aligned>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4e0e      	ldr	r6, [pc, #56]	; (8003b98 <sbrk_aligned+0x3c>)
 8003b60:	460c      	mov	r4, r1
 8003b62:	6831      	ldr	r1, [r6, #0]
 8003b64:	4605      	mov	r5, r0
 8003b66:	b911      	cbnz	r1, 8003b6e <sbrk_aligned+0x12>
 8003b68:	f000 fb7a 	bl	8004260 <_sbrk_r>
 8003b6c:	6030      	str	r0, [r6, #0]
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 fb75 	bl	8004260 <_sbrk_r>
 8003b76:	1c43      	adds	r3, r0, #1
 8003b78:	d00a      	beq.n	8003b90 <sbrk_aligned+0x34>
 8003b7a:	1cc4      	adds	r4, r0, #3
 8003b7c:	f024 0403 	bic.w	r4, r4, #3
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d007      	beq.n	8003b94 <sbrk_aligned+0x38>
 8003b84:	1a21      	subs	r1, r4, r0
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 fb6a 	bl	8004260 <_sbrk_r>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d101      	bne.n	8003b94 <sbrk_aligned+0x38>
 8003b90:	f04f 34ff 	mov.w	r4, #4294967295
 8003b94:	4620      	mov	r0, r4
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	20000144 	.word	0x20000144

08003b9c <_malloc_r>:
 8003b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba0:	1ccd      	adds	r5, r1, #3
 8003ba2:	f025 0503 	bic.w	r5, r5, #3
 8003ba6:	3508      	adds	r5, #8
 8003ba8:	2d0c      	cmp	r5, #12
 8003baa:	bf38      	it	cc
 8003bac:	250c      	movcc	r5, #12
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	db01      	blt.n	8003bb8 <_malloc_r+0x1c>
 8003bb4:	42a9      	cmp	r1, r5
 8003bb6:	d905      	bls.n	8003bc4 <_malloc_r+0x28>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	2600      	movs	r6, #0
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc4:	4e2e      	ldr	r6, [pc, #184]	; (8003c80 <_malloc_r+0xe4>)
 8003bc6:	f000 fdbb 	bl	8004740 <__malloc_lock>
 8003bca:	6833      	ldr	r3, [r6, #0]
 8003bcc:	461c      	mov	r4, r3
 8003bce:	bb34      	cbnz	r4, 8003c1e <_malloc_r+0x82>
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f7ff ffc2 	bl	8003b5c <sbrk_aligned>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	4604      	mov	r4, r0
 8003bdc:	d14d      	bne.n	8003c7a <_malloc_r+0xde>
 8003bde:	6834      	ldr	r4, [r6, #0]
 8003be0:	4626      	mov	r6, r4
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	d140      	bne.n	8003c68 <_malloc_r+0xcc>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	4631      	mov	r1, r6
 8003bea:	4638      	mov	r0, r7
 8003bec:	eb04 0803 	add.w	r8, r4, r3
 8003bf0:	f000 fb36 	bl	8004260 <_sbrk_r>
 8003bf4:	4580      	cmp	r8, r0
 8003bf6:	d13a      	bne.n	8003c6e <_malloc_r+0xd2>
 8003bf8:	6821      	ldr	r1, [r4, #0]
 8003bfa:	3503      	adds	r5, #3
 8003bfc:	1a6d      	subs	r5, r5, r1
 8003bfe:	f025 0503 	bic.w	r5, r5, #3
 8003c02:	3508      	adds	r5, #8
 8003c04:	2d0c      	cmp	r5, #12
 8003c06:	bf38      	it	cc
 8003c08:	250c      	movcc	r5, #12
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	f7ff ffa5 	bl	8003b5c <sbrk_aligned>
 8003c12:	3001      	adds	r0, #1
 8003c14:	d02b      	beq.n	8003c6e <_malloc_r+0xd2>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	442b      	add	r3, r5
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	e00e      	b.n	8003c3c <_malloc_r+0xa0>
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	1b52      	subs	r2, r2, r5
 8003c22:	d41e      	bmi.n	8003c62 <_malloc_r+0xc6>
 8003c24:	2a0b      	cmp	r2, #11
 8003c26:	d916      	bls.n	8003c56 <_malloc_r+0xba>
 8003c28:	1961      	adds	r1, r4, r5
 8003c2a:	42a3      	cmp	r3, r4
 8003c2c:	6025      	str	r5, [r4, #0]
 8003c2e:	bf18      	it	ne
 8003c30:	6059      	strne	r1, [r3, #4]
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	bf08      	it	eq
 8003c36:	6031      	streq	r1, [r6, #0]
 8003c38:	5162      	str	r2, [r4, r5]
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f104 060b 	add.w	r6, r4, #11
 8003c42:	f000 fd83 	bl	800474c <__malloc_unlock>
 8003c46:	f026 0607 	bic.w	r6, r6, #7
 8003c4a:	1d23      	adds	r3, r4, #4
 8003c4c:	1af2      	subs	r2, r6, r3
 8003c4e:	d0b6      	beq.n	8003bbe <_malloc_r+0x22>
 8003c50:	1b9b      	subs	r3, r3, r6
 8003c52:	50a3      	str	r3, [r4, r2]
 8003c54:	e7b3      	b.n	8003bbe <_malloc_r+0x22>
 8003c56:	6862      	ldr	r2, [r4, #4]
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	bf0c      	ite	eq
 8003c5c:	6032      	streq	r2, [r6, #0]
 8003c5e:	605a      	strne	r2, [r3, #4]
 8003c60:	e7ec      	b.n	8003c3c <_malloc_r+0xa0>
 8003c62:	4623      	mov	r3, r4
 8003c64:	6864      	ldr	r4, [r4, #4]
 8003c66:	e7b2      	b.n	8003bce <_malloc_r+0x32>
 8003c68:	4634      	mov	r4, r6
 8003c6a:	6876      	ldr	r6, [r6, #4]
 8003c6c:	e7b9      	b.n	8003be2 <_malloc_r+0x46>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	4638      	mov	r0, r7
 8003c74:	f000 fd6a 	bl	800474c <__malloc_unlock>
 8003c78:	e7a1      	b.n	8003bbe <_malloc_r+0x22>
 8003c7a:	6025      	str	r5, [r4, #0]
 8003c7c:	e7de      	b.n	8003c3c <_malloc_r+0xa0>
 8003c7e:	bf00      	nop
 8003c80:	20000140 	.word	0x20000140

08003c84 <__sfputc_r>:
 8003c84:	6893      	ldr	r3, [r2, #8]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	b410      	push	{r4}
 8003c8c:	6093      	str	r3, [r2, #8]
 8003c8e:	da08      	bge.n	8003ca2 <__sfputc_r+0x1e>
 8003c90:	6994      	ldr	r4, [r2, #24]
 8003c92:	42a3      	cmp	r3, r4
 8003c94:	db01      	blt.n	8003c9a <__sfputc_r+0x16>
 8003c96:	290a      	cmp	r1, #10
 8003c98:	d103      	bne.n	8003ca2 <__sfputc_r+0x1e>
 8003c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c9e:	f000 bb33 	b.w	8004308 <__swbuf_r>
 8003ca2:	6813      	ldr	r3, [r2, #0]
 8003ca4:	1c58      	adds	r0, r3, #1
 8003ca6:	6010      	str	r0, [r2, #0]
 8003ca8:	7019      	strb	r1, [r3, #0]
 8003caa:	4608      	mov	r0, r1
 8003cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <__sfputs_r>:
 8003cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	460f      	mov	r7, r1
 8003cb8:	4614      	mov	r4, r2
 8003cba:	18d5      	adds	r5, r2, r3
 8003cbc:	42ac      	cmp	r4, r5
 8003cbe:	d101      	bne.n	8003cc4 <__sfputs_r+0x12>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	e007      	b.n	8003cd4 <__sfputs_r+0x22>
 8003cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc8:	463a      	mov	r2, r7
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f7ff ffda 	bl	8003c84 <__sfputc_r>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d1f3      	bne.n	8003cbc <__sfputs_r+0xa>
 8003cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cd8 <_vfiprintf_r>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	460d      	mov	r5, r1
 8003cde:	b09d      	sub	sp, #116	; 0x74
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	4698      	mov	r8, r3
 8003ce4:	4606      	mov	r6, r0
 8003ce6:	b118      	cbz	r0, 8003cf0 <_vfiprintf_r+0x18>
 8003ce8:	6983      	ldr	r3, [r0, #24]
 8003cea:	b90b      	cbnz	r3, 8003cf0 <_vfiprintf_r+0x18>
 8003cec:	f7ff fe96 	bl	8003a1c <__sinit>
 8003cf0:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <_vfiprintf_r+0x240>)
 8003cf2:	429d      	cmp	r5, r3
 8003cf4:	d11b      	bne.n	8003d2e <_vfiprintf_r+0x56>
 8003cf6:	6875      	ldr	r5, [r6, #4]
 8003cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cfa:	07d9      	lsls	r1, r3, #31
 8003cfc:	d405      	bmi.n	8003d0a <_vfiprintf_r+0x32>
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	059a      	lsls	r2, r3, #22
 8003d02:	d402      	bmi.n	8003d0a <_vfiprintf_r+0x32>
 8003d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d06:	f7ff ff27 	bl	8003b58 <__retarget_lock_acquire_recursive>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	071b      	lsls	r3, r3, #28
 8003d0e:	d501      	bpl.n	8003d14 <_vfiprintf_r+0x3c>
 8003d10:	692b      	ldr	r3, [r5, #16]
 8003d12:	b9eb      	cbnz	r3, 8003d50 <_vfiprintf_r+0x78>
 8003d14:	4629      	mov	r1, r5
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 fb5a 	bl	80043d0 <__swsetup_r>
 8003d1c:	b1c0      	cbz	r0, 8003d50 <_vfiprintf_r+0x78>
 8003d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d20:	07dc      	lsls	r4, r3, #31
 8003d22:	d50e      	bpl.n	8003d42 <_vfiprintf_r+0x6a>
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	b01d      	add	sp, #116	; 0x74
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	4b7b      	ldr	r3, [pc, #492]	; (8003f1c <_vfiprintf_r+0x244>)
 8003d30:	429d      	cmp	r5, r3
 8003d32:	d101      	bne.n	8003d38 <_vfiprintf_r+0x60>
 8003d34:	68b5      	ldr	r5, [r6, #8]
 8003d36:	e7df      	b.n	8003cf8 <_vfiprintf_r+0x20>
 8003d38:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <_vfiprintf_r+0x248>)
 8003d3a:	429d      	cmp	r5, r3
 8003d3c:	bf08      	it	eq
 8003d3e:	68f5      	ldreq	r5, [r6, #12]
 8003d40:	e7da      	b.n	8003cf8 <_vfiprintf_r+0x20>
 8003d42:	89ab      	ldrh	r3, [r5, #12]
 8003d44:	0598      	lsls	r0, r3, #22
 8003d46:	d4ed      	bmi.n	8003d24 <_vfiprintf_r+0x4c>
 8003d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d4a:	f7ff ff06 	bl	8003b5a <__retarget_lock_release_recursive>
 8003d4e:	e7e9      	b.n	8003d24 <_vfiprintf_r+0x4c>
 8003d50:	2300      	movs	r3, #0
 8003d52:	9309      	str	r3, [sp, #36]	; 0x24
 8003d54:	2320      	movs	r3, #32
 8003d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d5e:	2330      	movs	r3, #48	; 0x30
 8003d60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f24 <_vfiprintf_r+0x24c>
 8003d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d68:	f04f 0901 	mov.w	r9, #1
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	469a      	mov	sl, r3
 8003d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d74:	b10a      	cbz	r2, 8003d7a <_vfiprintf_r+0xa2>
 8003d76:	2a25      	cmp	r2, #37	; 0x25
 8003d78:	d1f9      	bne.n	8003d6e <_vfiprintf_r+0x96>
 8003d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d7e:	d00b      	beq.n	8003d98 <_vfiprintf_r+0xc0>
 8003d80:	465b      	mov	r3, fp
 8003d82:	4622      	mov	r2, r4
 8003d84:	4629      	mov	r1, r5
 8003d86:	4630      	mov	r0, r6
 8003d88:	f7ff ff93 	bl	8003cb2 <__sfputs_r>
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	f000 80aa 	beq.w	8003ee6 <_vfiprintf_r+0x20e>
 8003d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d94:	445a      	add	r2, fp
 8003d96:	9209      	str	r2, [sp, #36]	; 0x24
 8003d98:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a2 	beq.w	8003ee6 <_vfiprintf_r+0x20e>
 8003da2:	2300      	movs	r3, #0
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
 8003da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dac:	f10a 0a01 	add.w	sl, sl, #1
 8003db0:	9304      	str	r3, [sp, #16]
 8003db2:	9307      	str	r3, [sp, #28]
 8003db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003db8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dba:	4654      	mov	r4, sl
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc2:	4858      	ldr	r0, [pc, #352]	; (8003f24 <_vfiprintf_r+0x24c>)
 8003dc4:	f7fc fa14 	bl	80001f0 <memchr>
 8003dc8:	9a04      	ldr	r2, [sp, #16]
 8003dca:	b9d8      	cbnz	r0, 8003e04 <_vfiprintf_r+0x12c>
 8003dcc:	06d1      	lsls	r1, r2, #27
 8003dce:	bf44      	itt	mi
 8003dd0:	2320      	movmi	r3, #32
 8003dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd6:	0713      	lsls	r3, r2, #28
 8003dd8:	bf44      	itt	mi
 8003dda:	232b      	movmi	r3, #43	; 0x2b
 8003ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de0:	f89a 3000 	ldrb.w	r3, [sl]
 8003de4:	2b2a      	cmp	r3, #42	; 0x2a
 8003de6:	d015      	beq.n	8003e14 <_vfiprintf_r+0x13c>
 8003de8:	9a07      	ldr	r2, [sp, #28]
 8003dea:	4654      	mov	r4, sl
 8003dec:	2000      	movs	r0, #0
 8003dee:	f04f 0c0a 	mov.w	ip, #10
 8003df2:	4621      	mov	r1, r4
 8003df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df8:	3b30      	subs	r3, #48	; 0x30
 8003dfa:	2b09      	cmp	r3, #9
 8003dfc:	d94e      	bls.n	8003e9c <_vfiprintf_r+0x1c4>
 8003dfe:	b1b0      	cbz	r0, 8003e2e <_vfiprintf_r+0x156>
 8003e00:	9207      	str	r2, [sp, #28]
 8003e02:	e014      	b.n	8003e2e <_vfiprintf_r+0x156>
 8003e04:	eba0 0308 	sub.w	r3, r0, r8
 8003e08:	fa09 f303 	lsl.w	r3, r9, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	9304      	str	r3, [sp, #16]
 8003e10:	46a2      	mov	sl, r4
 8003e12:	e7d2      	b.n	8003dba <_vfiprintf_r+0xe2>
 8003e14:	9b03      	ldr	r3, [sp, #12]
 8003e16:	1d19      	adds	r1, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	9103      	str	r1, [sp, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfbb      	ittet	lt
 8003e20:	425b      	neglt	r3, r3
 8003e22:	f042 0202 	orrlt.w	r2, r2, #2
 8003e26:	9307      	strge	r3, [sp, #28]
 8003e28:	9307      	strlt	r3, [sp, #28]
 8003e2a:	bfb8      	it	lt
 8003e2c:	9204      	strlt	r2, [sp, #16]
 8003e2e:	7823      	ldrb	r3, [r4, #0]
 8003e30:	2b2e      	cmp	r3, #46	; 0x2e
 8003e32:	d10c      	bne.n	8003e4e <_vfiprintf_r+0x176>
 8003e34:	7863      	ldrb	r3, [r4, #1]
 8003e36:	2b2a      	cmp	r3, #42	; 0x2a
 8003e38:	d135      	bne.n	8003ea6 <_vfiprintf_r+0x1ce>
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	1d1a      	adds	r2, r3, #4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	9203      	str	r2, [sp, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bfb8      	it	lt
 8003e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e4a:	3402      	adds	r4, #2
 8003e4c:	9305      	str	r3, [sp, #20]
 8003e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f34 <_vfiprintf_r+0x25c>
 8003e52:	7821      	ldrb	r1, [r4, #0]
 8003e54:	2203      	movs	r2, #3
 8003e56:	4650      	mov	r0, sl
 8003e58:	f7fc f9ca 	bl	80001f0 <memchr>
 8003e5c:	b140      	cbz	r0, 8003e70 <_vfiprintf_r+0x198>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	eba0 000a 	sub.w	r0, r0, sl
 8003e64:	fa03 f000 	lsl.w	r0, r3, r0
 8003e68:	9b04      	ldr	r3, [sp, #16]
 8003e6a:	4303      	orrs	r3, r0
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e74:	482c      	ldr	r0, [pc, #176]	; (8003f28 <_vfiprintf_r+0x250>)
 8003e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7a:	2206      	movs	r2, #6
 8003e7c:	f7fc f9b8 	bl	80001f0 <memchr>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d03f      	beq.n	8003f04 <_vfiprintf_r+0x22c>
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <_vfiprintf_r+0x254>)
 8003e86:	bb1b      	cbnz	r3, 8003ed0 <_vfiprintf_r+0x1f8>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	f023 0307 	bic.w	r3, r3, #7
 8003e90:	3308      	adds	r3, #8
 8003e92:	9303      	str	r3, [sp, #12]
 8003e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e96:	443b      	add	r3, r7
 8003e98:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9a:	e767      	b.n	8003d6c <_vfiprintf_r+0x94>
 8003e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e7a5      	b.n	8003df2 <_vfiprintf_r+0x11a>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	3401      	adds	r4, #1
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f04f 0c0a 	mov.w	ip, #10
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb8:	3a30      	subs	r2, #48	; 0x30
 8003eba:	2a09      	cmp	r2, #9
 8003ebc:	d903      	bls.n	8003ec6 <_vfiprintf_r+0x1ee>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0c5      	beq.n	8003e4e <_vfiprintf_r+0x176>
 8003ec2:	9105      	str	r1, [sp, #20]
 8003ec4:	e7c3      	b.n	8003e4e <_vfiprintf_r+0x176>
 8003ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eca:	4604      	mov	r4, r0
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e7f0      	b.n	8003eb2 <_vfiprintf_r+0x1da>
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	462a      	mov	r2, r5
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <_vfiprintf_r+0x258>)
 8003ed8:	a904      	add	r1, sp, #16
 8003eda:	4630      	mov	r0, r6
 8003edc:	f3af 8000 	nop.w
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	1c78      	adds	r0, r7, #1
 8003ee4:	d1d6      	bne.n	8003e94 <_vfiprintf_r+0x1bc>
 8003ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee8:	07d9      	lsls	r1, r3, #31
 8003eea:	d405      	bmi.n	8003ef8 <_vfiprintf_r+0x220>
 8003eec:	89ab      	ldrh	r3, [r5, #12]
 8003eee:	059a      	lsls	r2, r3, #22
 8003ef0:	d402      	bmi.n	8003ef8 <_vfiprintf_r+0x220>
 8003ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ef4:	f7ff fe31 	bl	8003b5a <__retarget_lock_release_recursive>
 8003ef8:	89ab      	ldrh	r3, [r5, #12]
 8003efa:	065b      	lsls	r3, r3, #25
 8003efc:	f53f af12 	bmi.w	8003d24 <_vfiprintf_r+0x4c>
 8003f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f02:	e711      	b.n	8003d28 <_vfiprintf_r+0x50>
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	462a      	mov	r2, r5
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <_vfiprintf_r+0x258>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f000 f880 	bl	8004014 <_printf_i>
 8003f14:	e7e4      	b.n	8003ee0 <_vfiprintf_r+0x208>
 8003f16:	bf00      	nop
 8003f18:	080048b8 	.word	0x080048b8
 8003f1c:	080048d8 	.word	0x080048d8
 8003f20:	08004898 	.word	0x08004898
 8003f24:	080048f8 	.word	0x080048f8
 8003f28:	08004902 	.word	0x08004902
 8003f2c:	00000000 	.word	0x00000000
 8003f30:	08003cb3 	.word	0x08003cb3
 8003f34:	080048fe 	.word	0x080048fe

08003f38 <_printf_common>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	4699      	mov	r9, r3
 8003f40:	688a      	ldr	r2, [r1, #8]
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bfb8      	it	lt
 8003f4c:	4613      	movlt	r3, r2
 8003f4e:	6033      	str	r3, [r6, #0]
 8003f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f54:	4607      	mov	r7, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	b10a      	cbz	r2, 8003f5e <_printf_common+0x26>
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	6033      	str	r3, [r6, #0]
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	0699      	lsls	r1, r3, #26
 8003f62:	bf42      	ittt	mi
 8003f64:	6833      	ldrmi	r3, [r6, #0]
 8003f66:	3302      	addmi	r3, #2
 8003f68:	6033      	strmi	r3, [r6, #0]
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	f015 0506 	ands.w	r5, r5, #6
 8003f70:	d106      	bne.n	8003f80 <_printf_common+0x48>
 8003f72:	f104 0a19 	add.w	sl, r4, #25
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	6832      	ldr	r2, [r6, #0]
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	42ab      	cmp	r3, r5
 8003f7e:	dc26      	bgt.n	8003fce <_printf_common+0x96>
 8003f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f84:	1e13      	subs	r3, r2, #0
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	bf18      	it	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	0692      	lsls	r2, r2, #26
 8003f8e:	d42b      	bmi.n	8003fe8 <_printf_common+0xb0>
 8003f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d01e      	beq.n	8003fdc <_printf_common+0xa4>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	68e5      	ldr	r5, [r4, #12]
 8003fa2:	6832      	ldr	r2, [r6, #0]
 8003fa4:	f003 0306 	and.w	r3, r3, #6
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	bf08      	it	eq
 8003fac:	1aad      	subeq	r5, r5, r2
 8003fae:	68a3      	ldr	r3, [r4, #8]
 8003fb0:	6922      	ldr	r2, [r4, #16]
 8003fb2:	bf0c      	ite	eq
 8003fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fb8:	2500      	movne	r5, #0
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bfc4      	itt	gt
 8003fbe:	1a9b      	subgt	r3, r3, r2
 8003fc0:	18ed      	addgt	r5, r5, r3
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	341a      	adds	r4, #26
 8003fc6:	42b5      	cmp	r5, r6
 8003fc8:	d11a      	bne.n	8004000 <_printf_common+0xc8>
 8003fca:	2000      	movs	r0, #0
 8003fcc:	e008      	b.n	8003fe0 <_printf_common+0xa8>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4652      	mov	r2, sl
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	47c0      	blx	r8
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d103      	bne.n	8003fe4 <_printf_common+0xac>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	e7c6      	b.n	8003f76 <_printf_common+0x3e>
 8003fe8:	18e1      	adds	r1, r4, r3
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	2030      	movs	r0, #48	; 0x30
 8003fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff2:	4422      	add	r2, r4
 8003ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	e7c7      	b.n	8003f90 <_printf_common+0x58>
 8004000:	2301      	movs	r3, #1
 8004002:	4622      	mov	r2, r4
 8004004:	4649      	mov	r1, r9
 8004006:	4638      	mov	r0, r7
 8004008:	47c0      	blx	r8
 800400a:	3001      	adds	r0, #1
 800400c:	d0e6      	beq.n	8003fdc <_printf_common+0xa4>
 800400e:	3601      	adds	r6, #1
 8004010:	e7d9      	b.n	8003fc6 <_printf_common+0x8e>
	...

08004014 <_printf_i>:
 8004014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	7e0f      	ldrb	r7, [r1, #24]
 800401a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800401c:	2f78      	cmp	r7, #120	; 0x78
 800401e:	4691      	mov	r9, r2
 8004020:	4680      	mov	r8, r0
 8004022:	460c      	mov	r4, r1
 8004024:	469a      	mov	sl, r3
 8004026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800402a:	d807      	bhi.n	800403c <_printf_i+0x28>
 800402c:	2f62      	cmp	r7, #98	; 0x62
 800402e:	d80a      	bhi.n	8004046 <_printf_i+0x32>
 8004030:	2f00      	cmp	r7, #0
 8004032:	f000 80d8 	beq.w	80041e6 <_printf_i+0x1d2>
 8004036:	2f58      	cmp	r7, #88	; 0x58
 8004038:	f000 80a3 	beq.w	8004182 <_printf_i+0x16e>
 800403c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004044:	e03a      	b.n	80040bc <_printf_i+0xa8>
 8004046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800404a:	2b15      	cmp	r3, #21
 800404c:	d8f6      	bhi.n	800403c <_printf_i+0x28>
 800404e:	a101      	add	r1, pc, #4	; (adr r1, 8004054 <_printf_i+0x40>)
 8004050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040c1 	.word	0x080040c1
 800405c:	0800403d 	.word	0x0800403d
 8004060:	0800403d 	.word	0x0800403d
 8004064:	0800403d 	.word	0x0800403d
 8004068:	0800403d 	.word	0x0800403d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800403d 	.word	0x0800403d
 8004074:	0800403d 	.word	0x0800403d
 8004078:	0800403d 	.word	0x0800403d
 800407c:	0800403d 	.word	0x0800403d
 8004080:	080041cd 	.word	0x080041cd
 8004084:	080040f1 	.word	0x080040f1
 8004088:	080041af 	.word	0x080041af
 800408c:	0800403d 	.word	0x0800403d
 8004090:	0800403d 	.word	0x0800403d
 8004094:	080041ef 	.word	0x080041ef
 8004098:	0800403d 	.word	0x0800403d
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	0800403d 	.word	0x0800403d
 80040a4:	0800403d 	.word	0x0800403d
 80040a8:	080041b7 	.word	0x080041b7
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	1d1a      	adds	r2, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	602a      	str	r2, [r5, #0]
 80040b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040bc:	2301      	movs	r3, #1
 80040be:	e0a3      	b.n	8004208 <_printf_i+0x1f4>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	6829      	ldr	r1, [r5, #0]
 80040c4:	0606      	lsls	r6, r0, #24
 80040c6:	f101 0304 	add.w	r3, r1, #4
 80040ca:	d50a      	bpl.n	80040e2 <_printf_i+0xce>
 80040cc:	680e      	ldr	r6, [r1, #0]
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	2e00      	cmp	r6, #0
 80040d2:	da03      	bge.n	80040dc <_printf_i+0xc8>
 80040d4:	232d      	movs	r3, #45	; 0x2d
 80040d6:	4276      	negs	r6, r6
 80040d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040dc:	485e      	ldr	r0, [pc, #376]	; (8004258 <_printf_i+0x244>)
 80040de:	230a      	movs	r3, #10
 80040e0:	e019      	b.n	8004116 <_printf_i+0x102>
 80040e2:	680e      	ldr	r6, [r1, #0]
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ea:	bf18      	it	ne
 80040ec:	b236      	sxthne	r6, r6
 80040ee:	e7ef      	b.n	80040d0 <_printf_i+0xbc>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	6029      	str	r1, [r5, #0]
 80040f8:	0601      	lsls	r1, r0, #24
 80040fa:	d501      	bpl.n	8004100 <_printf_i+0xec>
 80040fc:	681e      	ldr	r6, [r3, #0]
 80040fe:	e002      	b.n	8004106 <_printf_i+0xf2>
 8004100:	0646      	lsls	r6, r0, #25
 8004102:	d5fb      	bpl.n	80040fc <_printf_i+0xe8>
 8004104:	881e      	ldrh	r6, [r3, #0]
 8004106:	4854      	ldr	r0, [pc, #336]	; (8004258 <_printf_i+0x244>)
 8004108:	2f6f      	cmp	r7, #111	; 0x6f
 800410a:	bf0c      	ite	eq
 800410c:	2308      	moveq	r3, #8
 800410e:	230a      	movne	r3, #10
 8004110:	2100      	movs	r1, #0
 8004112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004116:	6865      	ldr	r5, [r4, #4]
 8004118:	60a5      	str	r5, [r4, #8]
 800411a:	2d00      	cmp	r5, #0
 800411c:	bfa2      	ittt	ge
 800411e:	6821      	ldrge	r1, [r4, #0]
 8004120:	f021 0104 	bicge.w	r1, r1, #4
 8004124:	6021      	strge	r1, [r4, #0]
 8004126:	b90e      	cbnz	r6, 800412c <_printf_i+0x118>
 8004128:	2d00      	cmp	r5, #0
 800412a:	d04d      	beq.n	80041c8 <_printf_i+0x1b4>
 800412c:	4615      	mov	r5, r2
 800412e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004132:	fb03 6711 	mls	r7, r3, r1, r6
 8004136:	5dc7      	ldrb	r7, [r0, r7]
 8004138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800413c:	4637      	mov	r7, r6
 800413e:	42bb      	cmp	r3, r7
 8004140:	460e      	mov	r6, r1
 8004142:	d9f4      	bls.n	800412e <_printf_i+0x11a>
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10b      	bne.n	8004160 <_printf_i+0x14c>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	07de      	lsls	r6, r3, #31
 800414c:	d508      	bpl.n	8004160 <_printf_i+0x14c>
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	4299      	cmp	r1, r3
 8004154:	bfde      	ittt	le
 8004156:	2330      	movle	r3, #48	; 0x30
 8004158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800415c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004160:	1b52      	subs	r2, r2, r5
 8004162:	6122      	str	r2, [r4, #16]
 8004164:	f8cd a000 	str.w	sl, [sp]
 8004168:	464b      	mov	r3, r9
 800416a:	aa03      	add	r2, sp, #12
 800416c:	4621      	mov	r1, r4
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fee2 	bl	8003f38 <_printf_common>
 8004174:	3001      	adds	r0, #1
 8004176:	d14c      	bne.n	8004212 <_printf_i+0x1fe>
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	b004      	add	sp, #16
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	4835      	ldr	r0, [pc, #212]	; (8004258 <_printf_i+0x244>)
 8004184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004188:	6829      	ldr	r1, [r5, #0]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004190:	6029      	str	r1, [r5, #0]
 8004192:	061d      	lsls	r5, r3, #24
 8004194:	d514      	bpl.n	80041c0 <_printf_i+0x1ac>
 8004196:	07df      	lsls	r7, r3, #31
 8004198:	bf44      	itt	mi
 800419a:	f043 0320 	orrmi.w	r3, r3, #32
 800419e:	6023      	strmi	r3, [r4, #0]
 80041a0:	b91e      	cbnz	r6, 80041aa <_printf_i+0x196>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	f023 0320 	bic.w	r3, r3, #32
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	2310      	movs	r3, #16
 80041ac:	e7b0      	b.n	8004110 <_printf_i+0xfc>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f043 0320 	orr.w	r3, r3, #32
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	2378      	movs	r3, #120	; 0x78
 80041b8:	4828      	ldr	r0, [pc, #160]	; (800425c <_printf_i+0x248>)
 80041ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041be:	e7e3      	b.n	8004188 <_printf_i+0x174>
 80041c0:	0659      	lsls	r1, r3, #25
 80041c2:	bf48      	it	mi
 80041c4:	b2b6      	uxthmi	r6, r6
 80041c6:	e7e6      	b.n	8004196 <_printf_i+0x182>
 80041c8:	4615      	mov	r5, r2
 80041ca:	e7bb      	b.n	8004144 <_printf_i+0x130>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	6826      	ldr	r6, [r4, #0]
 80041d0:	6961      	ldr	r1, [r4, #20]
 80041d2:	1d18      	adds	r0, r3, #4
 80041d4:	6028      	str	r0, [r5, #0]
 80041d6:	0635      	lsls	r5, r6, #24
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	d501      	bpl.n	80041e0 <_printf_i+0x1cc>
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	e002      	b.n	80041e6 <_printf_i+0x1d2>
 80041e0:	0670      	lsls	r0, r6, #25
 80041e2:	d5fb      	bpl.n	80041dc <_printf_i+0x1c8>
 80041e4:	8019      	strh	r1, [r3, #0]
 80041e6:	2300      	movs	r3, #0
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	4615      	mov	r5, r2
 80041ec:	e7ba      	b.n	8004164 <_printf_i+0x150>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	1d1a      	adds	r2, r3, #4
 80041f2:	602a      	str	r2, [r5, #0]
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	6862      	ldr	r2, [r4, #4]
 80041f8:	2100      	movs	r1, #0
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7fb fff8 	bl	80001f0 <memchr>
 8004200:	b108      	cbz	r0, 8004206 <_printf_i+0x1f2>
 8004202:	1b40      	subs	r0, r0, r5
 8004204:	6060      	str	r0, [r4, #4]
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	2300      	movs	r3, #0
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004210:	e7a8      	b.n	8004164 <_printf_i+0x150>
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	462a      	mov	r2, r5
 8004216:	4649      	mov	r1, r9
 8004218:	4640      	mov	r0, r8
 800421a:	47d0      	blx	sl
 800421c:	3001      	adds	r0, #1
 800421e:	d0ab      	beq.n	8004178 <_printf_i+0x164>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	079b      	lsls	r3, r3, #30
 8004224:	d413      	bmi.n	800424e <_printf_i+0x23a>
 8004226:	68e0      	ldr	r0, [r4, #12]
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	4298      	cmp	r0, r3
 800422c:	bfb8      	it	lt
 800422e:	4618      	movlt	r0, r3
 8004230:	e7a4      	b.n	800417c <_printf_i+0x168>
 8004232:	2301      	movs	r3, #1
 8004234:	4632      	mov	r2, r6
 8004236:	4649      	mov	r1, r9
 8004238:	4640      	mov	r0, r8
 800423a:	47d0      	blx	sl
 800423c:	3001      	adds	r0, #1
 800423e:	d09b      	beq.n	8004178 <_printf_i+0x164>
 8004240:	3501      	adds	r5, #1
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	9903      	ldr	r1, [sp, #12]
 8004246:	1a5b      	subs	r3, r3, r1
 8004248:	42ab      	cmp	r3, r5
 800424a:	dcf2      	bgt.n	8004232 <_printf_i+0x21e>
 800424c:	e7eb      	b.n	8004226 <_printf_i+0x212>
 800424e:	2500      	movs	r5, #0
 8004250:	f104 0619 	add.w	r6, r4, #25
 8004254:	e7f5      	b.n	8004242 <_printf_i+0x22e>
 8004256:	bf00      	nop
 8004258:	08004909 	.word	0x08004909
 800425c:	0800491a 	.word	0x0800491a

08004260 <_sbrk_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4d06      	ldr	r5, [pc, #24]	; (800427c <_sbrk_r+0x1c>)
 8004264:	2300      	movs	r3, #0
 8004266:	4604      	mov	r4, r0
 8004268:	4608      	mov	r0, r1
 800426a:	602b      	str	r3, [r5, #0]
 800426c:	f7fc fce2 	bl	8000c34 <_sbrk>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_sbrk_r+0x1a>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	b103      	cbz	r3, 800427a <_sbrk_r+0x1a>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	20000148 	.word	0x20000148

08004280 <__sread>:
 8004280:	b510      	push	{r4, lr}
 8004282:	460c      	mov	r4, r1
 8004284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004288:	f000 fab2 	bl	80047f0 <_read_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	bfab      	itete	ge
 8004290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004292:	89a3      	ldrhlt	r3, [r4, #12]
 8004294:	181b      	addge	r3, r3, r0
 8004296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800429a:	bfac      	ite	ge
 800429c:	6563      	strge	r3, [r4, #84]	; 0x54
 800429e:	81a3      	strhlt	r3, [r4, #12]
 80042a0:	bd10      	pop	{r4, pc}

080042a2 <__swrite>:
 80042a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a6:	461f      	mov	r7, r3
 80042a8:	898b      	ldrh	r3, [r1, #12]
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	4605      	mov	r5, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4616      	mov	r6, r2
 80042b2:	d505      	bpl.n	80042c0 <__swrite+0x1e>
 80042b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b8:	2302      	movs	r3, #2
 80042ba:	2200      	movs	r2, #0
 80042bc:	f000 f9c8 	bl	8004650 <_lseek_r>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	4632      	mov	r2, r6
 80042ce:	463b      	mov	r3, r7
 80042d0:	4628      	mov	r0, r5
 80042d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042d6:	f000 b869 	b.w	80043ac <_write_r>

080042da <__sseek>:
 80042da:	b510      	push	{r4, lr}
 80042dc:	460c      	mov	r4, r1
 80042de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e2:	f000 f9b5 	bl	8004650 <_lseek_r>
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	bf15      	itete	ne
 80042ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80042ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042f6:	81a3      	strheq	r3, [r4, #12]
 80042f8:	bf18      	it	ne
 80042fa:	81a3      	strhne	r3, [r4, #12]
 80042fc:	bd10      	pop	{r4, pc}

080042fe <__sclose>:
 80042fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004302:	f000 b8d3 	b.w	80044ac <_close_r>
	...

08004308 <__swbuf_r>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	460e      	mov	r6, r1
 800430c:	4614      	mov	r4, r2
 800430e:	4605      	mov	r5, r0
 8004310:	b118      	cbz	r0, 800431a <__swbuf_r+0x12>
 8004312:	6983      	ldr	r3, [r0, #24]
 8004314:	b90b      	cbnz	r3, 800431a <__swbuf_r+0x12>
 8004316:	f7ff fb81 	bl	8003a1c <__sinit>
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <__swbuf_r+0x98>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d12b      	bne.n	8004378 <__swbuf_r+0x70>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	69a3      	ldr	r3, [r4, #24]
 8004324:	60a3      	str	r3, [r4, #8]
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	071a      	lsls	r2, r3, #28
 800432a:	d52f      	bpl.n	800438c <__swbuf_r+0x84>
 800432c:	6923      	ldr	r3, [r4, #16]
 800432e:	b36b      	cbz	r3, 800438c <__swbuf_r+0x84>
 8004330:	6923      	ldr	r3, [r4, #16]
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1ac0      	subs	r0, r0, r3
 8004336:	6963      	ldr	r3, [r4, #20]
 8004338:	b2f6      	uxtb	r6, r6
 800433a:	4283      	cmp	r3, r0
 800433c:	4637      	mov	r7, r6
 800433e:	dc04      	bgt.n	800434a <__swbuf_r+0x42>
 8004340:	4621      	mov	r1, r4
 8004342:	4628      	mov	r0, r5
 8004344:	f000 f948 	bl	80045d8 <_fflush_r>
 8004348:	bb30      	cbnz	r0, 8004398 <__swbuf_r+0x90>
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	3b01      	subs	r3, #1
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	6022      	str	r2, [r4, #0]
 8004356:	701e      	strb	r6, [r3, #0]
 8004358:	6963      	ldr	r3, [r4, #20]
 800435a:	3001      	adds	r0, #1
 800435c:	4283      	cmp	r3, r0
 800435e:	d004      	beq.n	800436a <__swbuf_r+0x62>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	07db      	lsls	r3, r3, #31
 8004364:	d506      	bpl.n	8004374 <__swbuf_r+0x6c>
 8004366:	2e0a      	cmp	r6, #10
 8004368:	d104      	bne.n	8004374 <__swbuf_r+0x6c>
 800436a:	4621      	mov	r1, r4
 800436c:	4628      	mov	r0, r5
 800436e:	f000 f933 	bl	80045d8 <_fflush_r>
 8004372:	b988      	cbnz	r0, 8004398 <__swbuf_r+0x90>
 8004374:	4638      	mov	r0, r7
 8004376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <__swbuf_r+0x9c>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d101      	bne.n	8004382 <__swbuf_r+0x7a>
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	e7cf      	b.n	8004322 <__swbuf_r+0x1a>
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <__swbuf_r+0xa0>)
 8004384:	429c      	cmp	r4, r3
 8004386:	bf08      	it	eq
 8004388:	68ec      	ldreq	r4, [r5, #12]
 800438a:	e7ca      	b.n	8004322 <__swbuf_r+0x1a>
 800438c:	4621      	mov	r1, r4
 800438e:	4628      	mov	r0, r5
 8004390:	f000 f81e 	bl	80043d0 <__swsetup_r>
 8004394:	2800      	cmp	r0, #0
 8004396:	d0cb      	beq.n	8004330 <__swbuf_r+0x28>
 8004398:	f04f 37ff 	mov.w	r7, #4294967295
 800439c:	e7ea      	b.n	8004374 <__swbuf_r+0x6c>
 800439e:	bf00      	nop
 80043a0:	080048b8 	.word	0x080048b8
 80043a4:	080048d8 	.word	0x080048d8
 80043a8:	08004898 	.word	0x08004898

080043ac <_write_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4d07      	ldr	r5, [pc, #28]	; (80043cc <_write_r+0x20>)
 80043b0:	4604      	mov	r4, r0
 80043b2:	4608      	mov	r0, r1
 80043b4:	4611      	mov	r1, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	602a      	str	r2, [r5, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f7fc f8ea 	bl	8000594 <_write>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_write_r+0x1e>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_write_r+0x1e>
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	20000148 	.word	0x20000148

080043d0 <__swsetup_r>:
 80043d0:	4b32      	ldr	r3, [pc, #200]	; (800449c <__swsetup_r+0xcc>)
 80043d2:	b570      	push	{r4, r5, r6, lr}
 80043d4:	681d      	ldr	r5, [r3, #0]
 80043d6:	4606      	mov	r6, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	b125      	cbz	r5, 80043e6 <__swsetup_r+0x16>
 80043dc:	69ab      	ldr	r3, [r5, #24]
 80043de:	b913      	cbnz	r3, 80043e6 <__swsetup_r+0x16>
 80043e0:	4628      	mov	r0, r5
 80043e2:	f7ff fb1b 	bl	8003a1c <__sinit>
 80043e6:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <__swsetup_r+0xd0>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d10f      	bne.n	800440c <__swsetup_r+0x3c>
 80043ec:	686c      	ldr	r4, [r5, #4]
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043f4:	0719      	lsls	r1, r3, #28
 80043f6:	d42c      	bmi.n	8004452 <__swsetup_r+0x82>
 80043f8:	06dd      	lsls	r5, r3, #27
 80043fa:	d411      	bmi.n	8004420 <__swsetup_r+0x50>
 80043fc:	2309      	movs	r3, #9
 80043fe:	6033      	str	r3, [r6, #0]
 8004400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	f04f 30ff 	mov.w	r0, #4294967295
 800440a:	e03e      	b.n	800448a <__swsetup_r+0xba>
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <__swsetup_r+0xd4>)
 800440e:	429c      	cmp	r4, r3
 8004410:	d101      	bne.n	8004416 <__swsetup_r+0x46>
 8004412:	68ac      	ldr	r4, [r5, #8]
 8004414:	e7eb      	b.n	80043ee <__swsetup_r+0x1e>
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <__swsetup_r+0xd8>)
 8004418:	429c      	cmp	r4, r3
 800441a:	bf08      	it	eq
 800441c:	68ec      	ldreq	r4, [r5, #12]
 800441e:	e7e6      	b.n	80043ee <__swsetup_r+0x1e>
 8004420:	0758      	lsls	r0, r3, #29
 8004422:	d512      	bpl.n	800444a <__swsetup_r+0x7a>
 8004424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004426:	b141      	cbz	r1, 800443a <__swsetup_r+0x6a>
 8004428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800442c:	4299      	cmp	r1, r3
 800442e:	d002      	beq.n	8004436 <__swsetup_r+0x66>
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f991 	bl	8004758 <_free_r>
 8004436:	2300      	movs	r3, #0
 8004438:	6363      	str	r3, [r4, #52]	; 0x34
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	2300      	movs	r3, #0
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f043 0308 	orr.w	r3, r3, #8
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	b94b      	cbnz	r3, 800446a <__swsetup_r+0x9a>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d003      	beq.n	800446a <__swsetup_r+0x9a>
 8004462:	4621      	mov	r1, r4
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f92b 	bl	80046c0 <__smakebuf_r>
 800446a:	89a0      	ldrh	r0, [r4, #12]
 800446c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004470:	f010 0301 	ands.w	r3, r0, #1
 8004474:	d00a      	beq.n	800448c <__swsetup_r+0xbc>
 8004476:	2300      	movs	r3, #0
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	6963      	ldr	r3, [r4, #20]
 800447c:	425b      	negs	r3, r3
 800447e:	61a3      	str	r3, [r4, #24]
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	b943      	cbnz	r3, 8004496 <__swsetup_r+0xc6>
 8004484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004488:	d1ba      	bne.n	8004400 <__swsetup_r+0x30>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	0781      	lsls	r1, r0, #30
 800448e:	bf58      	it	pl
 8004490:	6963      	ldrpl	r3, [r4, #20]
 8004492:	60a3      	str	r3, [r4, #8]
 8004494:	e7f4      	b.n	8004480 <__swsetup_r+0xb0>
 8004496:	2000      	movs	r0, #0
 8004498:	e7f7      	b.n	800448a <__swsetup_r+0xba>
 800449a:	bf00      	nop
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	080048b8 	.word	0x080048b8
 80044a4:	080048d8 	.word	0x080048d8
 80044a8:	08004898 	.word	0x08004898

080044ac <_close_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d06      	ldr	r5, [pc, #24]	; (80044c8 <_close_r+0x1c>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fc fb87 	bl	8000bca <_close>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_close_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_close_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000148 	.word	0x20000148

080044cc <__sflush_r>:
 80044cc:	898a      	ldrh	r2, [r1, #12]
 80044ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d2:	4605      	mov	r5, r0
 80044d4:	0710      	lsls	r0, r2, #28
 80044d6:	460c      	mov	r4, r1
 80044d8:	d458      	bmi.n	800458c <__sflush_r+0xc0>
 80044da:	684b      	ldr	r3, [r1, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dc05      	bgt.n	80044ec <__sflush_r+0x20>
 80044e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dc02      	bgt.n	80044ec <__sflush_r+0x20>
 80044e6:	2000      	movs	r0, #0
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	d0f9      	beq.n	80044e6 <__sflush_r+0x1a>
 80044f2:	2300      	movs	r3, #0
 80044f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044f8:	682f      	ldr	r7, [r5, #0]
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	d032      	beq.n	8004564 <__sflush_r+0x98>
 80044fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	075a      	lsls	r2, r3, #29
 8004504:	d505      	bpl.n	8004512 <__sflush_r+0x46>
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	1ac0      	subs	r0, r0, r3
 800450a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800450c:	b10b      	cbz	r3, 8004512 <__sflush_r+0x46>
 800450e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004510:	1ac0      	subs	r0, r0, r3
 8004512:	2300      	movs	r3, #0
 8004514:	4602      	mov	r2, r0
 8004516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004518:	6a21      	ldr	r1, [r4, #32]
 800451a:	4628      	mov	r0, r5
 800451c:	47b0      	blx	r6
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	d106      	bne.n	8004532 <__sflush_r+0x66>
 8004524:	6829      	ldr	r1, [r5, #0]
 8004526:	291d      	cmp	r1, #29
 8004528:	d82c      	bhi.n	8004584 <__sflush_r+0xb8>
 800452a:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <__sflush_r+0x108>)
 800452c:	40ca      	lsrs	r2, r1
 800452e:	07d6      	lsls	r6, r2, #31
 8004530:	d528      	bpl.n	8004584 <__sflush_r+0xb8>
 8004532:	2200      	movs	r2, #0
 8004534:	6062      	str	r2, [r4, #4]
 8004536:	04d9      	lsls	r1, r3, #19
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	6022      	str	r2, [r4, #0]
 800453c:	d504      	bpl.n	8004548 <__sflush_r+0x7c>
 800453e:	1c42      	adds	r2, r0, #1
 8004540:	d101      	bne.n	8004546 <__sflush_r+0x7a>
 8004542:	682b      	ldr	r3, [r5, #0]
 8004544:	b903      	cbnz	r3, 8004548 <__sflush_r+0x7c>
 8004546:	6560      	str	r0, [r4, #84]	; 0x54
 8004548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800454a:	602f      	str	r7, [r5, #0]
 800454c:	2900      	cmp	r1, #0
 800454e:	d0ca      	beq.n	80044e6 <__sflush_r+0x1a>
 8004550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004554:	4299      	cmp	r1, r3
 8004556:	d002      	beq.n	800455e <__sflush_r+0x92>
 8004558:	4628      	mov	r0, r5
 800455a:	f000 f8fd 	bl	8004758 <_free_r>
 800455e:	2000      	movs	r0, #0
 8004560:	6360      	str	r0, [r4, #52]	; 0x34
 8004562:	e7c1      	b.n	80044e8 <__sflush_r+0x1c>
 8004564:	6a21      	ldr	r1, [r4, #32]
 8004566:	2301      	movs	r3, #1
 8004568:	4628      	mov	r0, r5
 800456a:	47b0      	blx	r6
 800456c:	1c41      	adds	r1, r0, #1
 800456e:	d1c7      	bne.n	8004500 <__sflush_r+0x34>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0c4      	beq.n	8004500 <__sflush_r+0x34>
 8004576:	2b1d      	cmp	r3, #29
 8004578:	d001      	beq.n	800457e <__sflush_r+0xb2>
 800457a:	2b16      	cmp	r3, #22
 800457c:	d101      	bne.n	8004582 <__sflush_r+0xb6>
 800457e:	602f      	str	r7, [r5, #0]
 8004580:	e7b1      	b.n	80044e6 <__sflush_r+0x1a>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	e7ad      	b.n	80044e8 <__sflush_r+0x1c>
 800458c:	690f      	ldr	r7, [r1, #16]
 800458e:	2f00      	cmp	r7, #0
 8004590:	d0a9      	beq.n	80044e6 <__sflush_r+0x1a>
 8004592:	0793      	lsls	r3, r2, #30
 8004594:	680e      	ldr	r6, [r1, #0]
 8004596:	bf08      	it	eq
 8004598:	694b      	ldreq	r3, [r1, #20]
 800459a:	600f      	str	r7, [r1, #0]
 800459c:	bf18      	it	ne
 800459e:	2300      	movne	r3, #0
 80045a0:	eba6 0807 	sub.w	r8, r6, r7
 80045a4:	608b      	str	r3, [r1, #8]
 80045a6:	f1b8 0f00 	cmp.w	r8, #0
 80045aa:	dd9c      	ble.n	80044e6 <__sflush_r+0x1a>
 80045ac:	6a21      	ldr	r1, [r4, #32]
 80045ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045b0:	4643      	mov	r3, r8
 80045b2:	463a      	mov	r2, r7
 80045b4:	4628      	mov	r0, r5
 80045b6:	47b0      	blx	r6
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dc06      	bgt.n	80045ca <__sflush_r+0xfe>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e78e      	b.n	80044e8 <__sflush_r+0x1c>
 80045ca:	4407      	add	r7, r0
 80045cc:	eba8 0800 	sub.w	r8, r8, r0
 80045d0:	e7e9      	b.n	80045a6 <__sflush_r+0xda>
 80045d2:	bf00      	nop
 80045d4:	20400001 	.word	0x20400001

080045d8 <_fflush_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	4605      	mov	r5, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	b913      	cbnz	r3, 80045e8 <_fflush_r+0x10>
 80045e2:	2500      	movs	r5, #0
 80045e4:	4628      	mov	r0, r5
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	b118      	cbz	r0, 80045f2 <_fflush_r+0x1a>
 80045ea:	6983      	ldr	r3, [r0, #24]
 80045ec:	b90b      	cbnz	r3, 80045f2 <_fflush_r+0x1a>
 80045ee:	f7ff fa15 	bl	8003a1c <__sinit>
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <_fflush_r+0x6c>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d11b      	bne.n	8004630 <_fflush_r+0x58>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0ef      	beq.n	80045e2 <_fflush_r+0xa>
 8004602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004604:	07d0      	lsls	r0, r2, #31
 8004606:	d404      	bmi.n	8004612 <_fflush_r+0x3a>
 8004608:	0599      	lsls	r1, r3, #22
 800460a:	d402      	bmi.n	8004612 <_fflush_r+0x3a>
 800460c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800460e:	f7ff faa3 	bl	8003b58 <__retarget_lock_acquire_recursive>
 8004612:	4628      	mov	r0, r5
 8004614:	4621      	mov	r1, r4
 8004616:	f7ff ff59 	bl	80044cc <__sflush_r>
 800461a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800461c:	07da      	lsls	r2, r3, #31
 800461e:	4605      	mov	r5, r0
 8004620:	d4e0      	bmi.n	80045e4 <_fflush_r+0xc>
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	059b      	lsls	r3, r3, #22
 8004626:	d4dd      	bmi.n	80045e4 <_fflush_r+0xc>
 8004628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800462a:	f7ff fa96 	bl	8003b5a <__retarget_lock_release_recursive>
 800462e:	e7d9      	b.n	80045e4 <_fflush_r+0xc>
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <_fflush_r+0x70>)
 8004632:	429c      	cmp	r4, r3
 8004634:	d101      	bne.n	800463a <_fflush_r+0x62>
 8004636:	68ac      	ldr	r4, [r5, #8]
 8004638:	e7df      	b.n	80045fa <_fflush_r+0x22>
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <_fflush_r+0x74>)
 800463c:	429c      	cmp	r4, r3
 800463e:	bf08      	it	eq
 8004640:	68ec      	ldreq	r4, [r5, #12]
 8004642:	e7da      	b.n	80045fa <_fflush_r+0x22>
 8004644:	080048b8 	.word	0x080048b8
 8004648:	080048d8 	.word	0x080048d8
 800464c:	08004898 	.word	0x08004898

08004650 <_lseek_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d07      	ldr	r5, [pc, #28]	; (8004670 <_lseek_r+0x20>)
 8004654:	4604      	mov	r4, r0
 8004656:	4608      	mov	r0, r1
 8004658:	4611      	mov	r1, r2
 800465a:	2200      	movs	r2, #0
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fc fada 	bl	8000c18 <_lseek>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_lseek_r+0x1e>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_lseek_r+0x1e>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20000148 	.word	0x20000148

08004674 <__swhatbuf_r>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	460e      	mov	r6, r1
 8004678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467c:	2900      	cmp	r1, #0
 800467e:	b096      	sub	sp, #88	; 0x58
 8004680:	4614      	mov	r4, r2
 8004682:	461d      	mov	r5, r3
 8004684:	da08      	bge.n	8004698 <__swhatbuf_r+0x24>
 8004686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	061a      	lsls	r2, r3, #24
 8004690:	d410      	bmi.n	80046b4 <__swhatbuf_r+0x40>
 8004692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004696:	e00e      	b.n	80046b6 <__swhatbuf_r+0x42>
 8004698:	466a      	mov	r2, sp
 800469a:	f000 f8bb 	bl	8004814 <_fstat_r>
 800469e:	2800      	cmp	r0, #0
 80046a0:	dbf1      	blt.n	8004686 <__swhatbuf_r+0x12>
 80046a2:	9a01      	ldr	r2, [sp, #4]
 80046a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046ac:	425a      	negs	r2, r3
 80046ae:	415a      	adcs	r2, r3
 80046b0:	602a      	str	r2, [r5, #0]
 80046b2:	e7ee      	b.n	8004692 <__swhatbuf_r+0x1e>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	2000      	movs	r0, #0
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	b016      	add	sp, #88	; 0x58
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080046c0 <__smakebuf_r>:
 80046c0:	898b      	ldrh	r3, [r1, #12]
 80046c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046c4:	079d      	lsls	r5, r3, #30
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	d507      	bpl.n	80046dc <__smakebuf_r+0x1c>
 80046cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	2301      	movs	r3, #1
 80046d6:	6163      	str	r3, [r4, #20]
 80046d8:	b002      	add	sp, #8
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	ab01      	add	r3, sp, #4
 80046de:	466a      	mov	r2, sp
 80046e0:	f7ff ffc8 	bl	8004674 <__swhatbuf_r>
 80046e4:	9900      	ldr	r1, [sp, #0]
 80046e6:	4605      	mov	r5, r0
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7ff fa57 	bl	8003b9c <_malloc_r>
 80046ee:	b948      	cbnz	r0, 8004704 <__smakebuf_r+0x44>
 80046f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f4:	059a      	lsls	r2, r3, #22
 80046f6:	d4ef      	bmi.n	80046d8 <__smakebuf_r+0x18>
 80046f8:	f023 0303 	bic.w	r3, r3, #3
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	e7e3      	b.n	80046cc <__smakebuf_r+0xc>
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <__smakebuf_r+0x7c>)
 8004706:	62b3      	str	r3, [r6, #40]	; 0x28
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	6020      	str	r0, [r4, #0]
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	9b00      	ldr	r3, [sp, #0]
 8004714:	6163      	str	r3, [r4, #20]
 8004716:	9b01      	ldr	r3, [sp, #4]
 8004718:	6120      	str	r0, [r4, #16]
 800471a:	b15b      	cbz	r3, 8004734 <__smakebuf_r+0x74>
 800471c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004720:	4630      	mov	r0, r6
 8004722:	f000 f889 	bl	8004838 <_isatty_r>
 8004726:	b128      	cbz	r0, 8004734 <__smakebuf_r+0x74>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	89a0      	ldrh	r0, [r4, #12]
 8004736:	4305      	orrs	r5, r0
 8004738:	81a5      	strh	r5, [r4, #12]
 800473a:	e7cd      	b.n	80046d8 <__smakebuf_r+0x18>
 800473c:	080039b5 	.word	0x080039b5

08004740 <__malloc_lock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_lock+0x8>)
 8004742:	f7ff ba09 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	2000013c 	.word	0x2000013c

0800474c <__malloc_unlock>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__malloc_unlock+0x8>)
 800474e:	f7ff ba04 	b.w	8003b5a <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	2000013c 	.word	0x2000013c

08004758 <_free_r>:
 8004758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800475a:	2900      	cmp	r1, #0
 800475c:	d044      	beq.n	80047e8 <_free_r+0x90>
 800475e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004762:	9001      	str	r0, [sp, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f1a1 0404 	sub.w	r4, r1, #4
 800476a:	bfb8      	it	lt
 800476c:	18e4      	addlt	r4, r4, r3
 800476e:	f7ff ffe7 	bl	8004740 <__malloc_lock>
 8004772:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <_free_r+0x94>)
 8004774:	9801      	ldr	r0, [sp, #4]
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	b933      	cbnz	r3, 8004788 <_free_r+0x30>
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	6014      	str	r4, [r2, #0]
 800477e:	b003      	add	sp, #12
 8004780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004784:	f7ff bfe2 	b.w	800474c <__malloc_unlock>
 8004788:	42a3      	cmp	r3, r4
 800478a:	d908      	bls.n	800479e <_free_r+0x46>
 800478c:	6825      	ldr	r5, [r4, #0]
 800478e:	1961      	adds	r1, r4, r5
 8004790:	428b      	cmp	r3, r1
 8004792:	bf01      	itttt	eq
 8004794:	6819      	ldreq	r1, [r3, #0]
 8004796:	685b      	ldreq	r3, [r3, #4]
 8004798:	1949      	addeq	r1, r1, r5
 800479a:	6021      	streq	r1, [r4, #0]
 800479c:	e7ed      	b.n	800477a <_free_r+0x22>
 800479e:	461a      	mov	r2, r3
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	b10b      	cbz	r3, 80047a8 <_free_r+0x50>
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d9fa      	bls.n	800479e <_free_r+0x46>
 80047a8:	6811      	ldr	r1, [r2, #0]
 80047aa:	1855      	adds	r5, r2, r1
 80047ac:	42a5      	cmp	r5, r4
 80047ae:	d10b      	bne.n	80047c8 <_free_r+0x70>
 80047b0:	6824      	ldr	r4, [r4, #0]
 80047b2:	4421      	add	r1, r4
 80047b4:	1854      	adds	r4, r2, r1
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	d1e0      	bne.n	800477e <_free_r+0x26>
 80047bc:	681c      	ldr	r4, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	6053      	str	r3, [r2, #4]
 80047c2:	4421      	add	r1, r4
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	e7da      	b.n	800477e <_free_r+0x26>
 80047c8:	d902      	bls.n	80047d0 <_free_r+0x78>
 80047ca:	230c      	movs	r3, #12
 80047cc:	6003      	str	r3, [r0, #0]
 80047ce:	e7d6      	b.n	800477e <_free_r+0x26>
 80047d0:	6825      	ldr	r5, [r4, #0]
 80047d2:	1961      	adds	r1, r4, r5
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf04      	itt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	6063      	str	r3, [r4, #4]
 80047de:	bf04      	itt	eq
 80047e0:	1949      	addeq	r1, r1, r5
 80047e2:	6021      	streq	r1, [r4, #0]
 80047e4:	6054      	str	r4, [r2, #4]
 80047e6:	e7ca      	b.n	800477e <_free_r+0x26>
 80047e8:	b003      	add	sp, #12
 80047ea:	bd30      	pop	{r4, r5, pc}
 80047ec:	20000140 	.word	0x20000140

080047f0 <_read_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	; (8004810 <_read_r+0x20>)
 80047f4:	4604      	mov	r4, r0
 80047f6:	4608      	mov	r0, r1
 80047f8:	4611      	mov	r1, r2
 80047fa:	2200      	movs	r2, #0
 80047fc:	602a      	str	r2, [r5, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	f7fc f9c6 	bl	8000b90 <_read>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d102      	bne.n	800480e <_read_r+0x1e>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b103      	cbz	r3, 800480e <_read_r+0x1e>
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	20000148 	.word	0x20000148

08004814 <_fstat_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d07      	ldr	r5, [pc, #28]	; (8004834 <_fstat_r+0x20>)
 8004818:	2300      	movs	r3, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	4611      	mov	r1, r2
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	f7fc f9de 	bl	8000be2 <_fstat>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	d102      	bne.n	8004830 <_fstat_r+0x1c>
 800482a:	682b      	ldr	r3, [r5, #0]
 800482c:	b103      	cbz	r3, 8004830 <_fstat_r+0x1c>
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	bd38      	pop	{r3, r4, r5, pc}
 8004832:	bf00      	nop
 8004834:	20000148 	.word	0x20000148

08004838 <_isatty_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d06      	ldr	r5, [pc, #24]	; (8004854 <_isatty_r+0x1c>)
 800483c:	2300      	movs	r3, #0
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc f9dd 	bl	8000c02 <_isatty>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_isatty_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_isatty_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	20000148 	.word	0x20000148

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
