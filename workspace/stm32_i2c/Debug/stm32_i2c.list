
stm32_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a4  080063a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063ac  080063ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08006424  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08006424  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e3  00000000  00000000  0002f94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00032230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a52  00000000  00000000  00033ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a79  00000000  00000000  000596fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df622  00000000  00000000  0006b173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  0014a7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006290 	.word	0x08006290

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006290 	.word	0x08006290

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <I2C_Scan+0xc0>)
 80005ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	6020      	str	r0, [r4, #0]
 80005bc:	3404      	adds	r4, #4
 80005be:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <I2C_Scan+0xc4>)
 80005d8:	f003 fbc0 	bl	8003d5c <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005e2:	e02f      	b.n	8000644 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b299      	uxth	r1, r3
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	481e      	ldr	r0, [pc, #120]	; (800066c <I2C_Scan+0xc8>)
 80005f2:	f002 f831 	bl	8002658 <HAL_I2C_IsDeviceReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000600:	2b00      	cmp	r3, #0
 8000602:	d113      	bne.n	800062c <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000604:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Scan+0xcc>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f004 fcd1 	bl	8004fb4 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdeb 	bl	80001f0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <I2C_Scan+0xc4>)
 8000626:	f003 fb99 	bl	8003d5c <HAL_UART_Transmit>
 800062a:	e006      	b.n	800063a <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <I2C_Scan+0xd0>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <I2C_Scan+0xc4>)
 8000636:	f003 fb91 	bl	8003d5c <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 800063a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d9cb      	bls.n	80005e4 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2202      	movs	r2, #2
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <I2C_Scan+0xd4>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <I2C_Scan+0xc4>)
 8000656:	f003 fb81 	bl	8003d5c <HAL_UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3760      	adds	r7, #96	; 0x60
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	080062b8 	.word	0x080062b8
 8000668:	20000148 	.word	0x20000148
 800066c:	200000d4 	.word	0x200000d4
 8000670:	080062a8 	.word	0x080062a8
 8000674:	080062b0 	.word	0x080062b0
 8000678:	080062b4 	.word	0x080062b4

0800067c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b299      	uxth	r1, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <LCD_SendInternal+0xa8>)
 800069a:	f001 ffdd 	bl	8002658 <HAL_I2C_IsDeviceReady>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a8:	e7f1      	b.n	800068e <LCD_SendInternal+0x12>
            break;
 80006aa:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f023 030f 	bic.w	r3, r3, #15
 80006b2:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f043 030c 	orr.w	r3, r3, #12
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006da:	7b7a      	ldrb	r2, [r7, #13]
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f043 030c 	orr.w	r3, r3, #12
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2304      	movs	r3, #4
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <LCD_SendInternal+0xa8>)
 800070c:	f001 fea6 	bl	800245c <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000714:	2005      	movs	r0, #5
 8000716:	f000 fe4d 	bl	80013b4 <HAL_Delay>
    return res;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200000d4 	.word	0x200000d4

08000728 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff9c 	bl	800067c <LCD_SendInternal>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 800075c:	79b9      	ldrb	r1, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff8a 	bl	800067c <LCD_SendInternal>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2130      	movs	r1, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffd2 	bl	8000728 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffcd 	bl	8000728 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	210c      	movs	r1, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc8 	bl	8000728 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <LCD_SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007b6:	e009      	b.n	80007cc <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc3 	bl	800074c <LCD_SendData>
        str++;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f1      	bne.n	80007b8 <LCD_SendString+0xe>
    }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <init>:

void init() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007e4:	f7ff fede 	bl	80005a4 <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007e8:	204e      	movs	r0, #78	; 0x4e
 80007ea:	f7ff ffc1 	bl	8000770 <LCD_Init>

    // set address to 0x00 첫번째줄 0번부터 글을 쓴다
    LCD_SendCommand(LCD_ADDR, 0b10000000);
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	204e      	movs	r0, #78	; 0x4e
 80007f2:	f7ff ff99 	bl	8000728 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, " Fxxxing 1602 LCD");
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <init+0x34>)
 80007f8:	204e      	movs	r0, #78	; 0x4e
 80007fa:	f7ff ffd6 	bl	80007aa <LCD_SendString>

    // set address to 0x40 두번째줄 0번째부터 글을 쓴다.
    LCD_SendCommand(LCD_ADDR, 0b11000000);
 80007fe:	21c0      	movs	r1, #192	; 0xc0
 8000800:	204e      	movs	r0, #78	; 0x4e
 8000802:	f7ff ff91 	bl	8000728 <LCD_SendCommand>
    LCD_SendString(LCD_ADDR, "  over I2C bus");
 8000806:	4904      	ldr	r1, [pc, #16]	; (8000818 <init+0x38>)
 8000808:	204e      	movs	r0, #78	; 0x4e
 800080a:	f7ff ffce 	bl	80007aa <LCD_SendString>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	080062d0 	.word	0x080062d0
 8000818:	080062e4 	.word	0x080062e4

0800081c <_read>:
//void init();


//scanf를 사용하기 위해 _read재정의
int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b29a      	uxth	r2, r3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <_read+0x28>)
 8000834:	f003 fb2b 	bl	8003e8e <HAL_UART_Receive>
	return len;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000148 	.word	0x20000148

08000848 <_write>:
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}
//printf를 사용하기 위해 _write() 함수를 재정의함.
int _write(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 500); //문자열을 보내는 것. 문자열의 주소를 받아서 문자열의 길이까지 같이 들어옴.
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <_write+0x28>)
 8000860:	f003 fa7c 	bl	8003d5c <HAL_UART_Transmit>

	return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000148 	.word	0x20000148

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fd2a 	bl	80012d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  //인터럽트를 쓰기위해 enable을 해주는 과정
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&inputString, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	490f      	ldr	r1, [pc, #60]	; (80008bc <main+0x48>)
 8000880:	480f      	ldr	r0, [pc, #60]	; (80008c0 <main+0x4c>)
 8000882:	f003 fbaa 	bl	8003fda <HAL_UART_Receive_IT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f81f 	bl	80008c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800088a:	f7ff ff71 	bl	8000770 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 f9a7 	bl	8000be0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000892:	f000 f975 	bl	8000b80 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000896:	f000 f90d 	bl	8000ab4 <MX_I2C1_Init>
  MX_RTC_Init();
 800089a:	f000 f94b 	bl	8000b34 <MX_RTC_Init>
  MX_ADC1_Init();
 800089e:	f000 f8b7 	bl	8000a10 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008a2:	f000 f899 	bl	80009d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  init();
 80008a6:	f7ff ff9b 	bl	80007e0 <init>
//			LCD_SendString((0x27 << 1), BtnStringOFF);
//		}

		//3. UART통신을 통해 입력한 문자열을 LCD에 출력하기
//	  	LCD_SendCommand((0x27 << 1), 0b00000001); //lcd 화면초기화 명령
		LCD_SendCommand((0x27 << 1), 0b10000000); //0x00
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	204e      	movs	r0, #78	; 0x4e
 80008ae:	f7ff ff3b 	bl	8000728 <LCD_SendCommand>
		LCD_SendString((0x27 << 1), lcdPrint);
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <main+0x50>)
 80008b4:	204e      	movs	r0, #78	; 0x4e
 80008b6:	f7ff ff78 	bl	80007aa <LCD_SendString>
  {
 80008ba:	e7f6      	b.n	80008aa <main+0x36>
 80008bc:	2000018c 	.word	0x2000018c
 80008c0:	20000148 	.word	0x20000148
 80008c4:	200001f4 	.word	0x200001f4

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0a0      	sub	sp, #128	; 0x80
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fb4c 	bl	8004f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2230      	movs	r2, #48	; 0x30
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fb3d 	bl	8004f74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <SystemClock_Config+0x108>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a33      	ldr	r2, [pc, #204]	; (80009d0 <SystemClock_Config+0x108>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <SystemClock_Config+0x108>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <SystemClock_Config+0x10c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <SystemClock_Config+0x10c>)
 8000920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000924:	6013      	str	r3, [r2, #0]
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <SystemClock_Config+0x10c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000932:	2306      	movs	r3, #6
 8000934:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2310      	movs	r3, #16
 8000940:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000946:	2300      	movs	r3, #0
 8000948:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800094a:	2308      	movs	r3, #8
 800094c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800094e:	23b4      	movs	r3, #180	; 0xb4
 8000950:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000956:	2307      	movs	r3, #7
 8000958:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fa7c 	bl	8002e5c <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800096a:	f000 faad 	bl	8000ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800096e:	f002 fa25 	bl	8002dbc <HAL_PWREx_EnableOverDrive>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000978:	f000 faa6 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000994:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fccc 	bl	8003338 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009a6:	f000 fa8f 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009aa:	2320      	movs	r3, #32
 80009ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fedd 	bl	8003778 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80009c4:	f000 fa80 	bl	8000ec8 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3780      	adds	r7, #128	; 0x80
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2027      	movs	r0, #39	; 0x27
 80009e2:	f001 f9c0 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009e6:	2027      	movs	r0, #39	; 0x27
 80009e8:	f001 f9d9 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2012      	movs	r0, #18
 80009f2:	f001 f9b8 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009f6:	2012      	movs	r0, #18
 80009f8:	f001 f9d1 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f001 f9b0 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f001 f9c9 	bl	8001d9e <HAL_NVIC_EnableIRQ>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <MX_ADC1_Init+0x9c>)
 8000a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <MX_ADC1_Init+0xa0>)
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a72:	f000 fcc3 	bl	80013fc <HAL_ADC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f000 fa24 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a80:	230a      	movs	r3, #10
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_ADC1_Init+0x98>)
 8000a92:	f000 fe55 	bl	8001740 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f000 fa14 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	40012000 	.word	0x40012000
 8000ab0:	0f000001 	.word	0x0f000001

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <MX_I2C1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <MX_I2C1_Init+0x7c>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000af2:	f001 fb6f 	bl	80021d4 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f9e4 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000b04:	f002 f8df 	bl	8002cc6 <HAL_I2CEx_ConfigAnalogFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b0e:	f000 f9db 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x74>)
 8000b16:	f002 f912 	bl	8002d3e <HAL_I2CEx_ConfigDigitalFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b20:	f000 f9d2 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000d4 	.word	0x200000d4
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <MX_RTC_Init+0x48>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b46:	227f      	movs	r2, #127	; 0x7f
 8000b48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_RTC_Init+0x44>)
 8000b64:	f002 ffc8 	bl	8003af8 <HAL_RTC_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b6e:	f000 f9ab 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	40002800 	.word	0x40002800

08000b80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <MX_USART3_UART_Init+0x58>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX; //송수신 모드
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000bb8:	f003 f883 	bl	8003cc2 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f981 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  //수신 인터럽트 활성화
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&inputString, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <MX_USART3_UART_Init+0x5c>)
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <MX_USART3_UART_Init+0x54>)
 8000bcc:	f003 fa05 	bl	8003fda <HAL_UART_Receive_IT>

  /* USER CODE END USART3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000148 	.word	0x20000148
 8000bd8:	40004800 	.word	0x40004800
 8000bdc:	2000018c 	.word	0x2000018c

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a7a      	ldr	r2, [pc, #488]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a73      	ldr	r2, [pc, #460]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b71      	ldr	r3, [pc, #452]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b6d      	ldr	r3, [pc, #436]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a6c      	ldr	r2, [pc, #432]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b66      	ldr	r3, [pc, #408]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a65      	ldr	r2, [pc, #404]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a5e      	ldr	r2, [pc, #376]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b58      	ldr	r3, [pc, #352]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a57      	ldr	r2, [pc, #348]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <MX_GPIO_Init+0x208>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ca4:	4851      	ldr	r0, [pc, #324]	; (8000dec <MX_GPIO_Init+0x20c>)
 8000ca6:	f001 fa63 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4850      	ldr	r0, [pc, #320]	; (8000df0 <MX_GPIO_Init+0x210>)
 8000cb0:	f001 fa5e 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <MX_GPIO_Init+0x214>)
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	484b      	ldr	r0, [pc, #300]	; (8000df8 <MX_GPIO_Init+0x218>)
 8000cca:	f001 f8a5 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cce:	2332      	movs	r3, #50	; 0x32
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cde:	230b      	movs	r3, #11
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4843      	ldr	r0, [pc, #268]	; (8000df8 <MX_GPIO_Init+0x218>)
 8000cea:	f001 f895 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cee:	2386      	movs	r3, #134	; 0x86
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfe:	230b      	movs	r3, #11
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	483c      	ldr	r0, [pc, #240]	; (8000dfc <MX_GPIO_Init+0x21c>)
 8000d0a:	f001 f885 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d0e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <MX_GPIO_Init+0x20c>)
 8000d28:	f001 f876 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <MX_GPIO_Init+0x20c>)
 8000d4a:	f001 f865 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4822      	ldr	r0, [pc, #136]	; (8000df0 <MX_GPIO_Init+0x210>)
 8000d66:	f001 f857 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481c      	ldr	r0, [pc, #112]	; (8000df0 <MX_GPIO_Init+0x210>)
 8000d7e:	f001 f84b 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d94:	230a      	movs	r3, #10
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4817      	ldr	r0, [pc, #92]	; (8000dfc <MX_GPIO_Init+0x21c>)
 8000da0:	f001 f83a 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <MX_GPIO_Init+0x21c>)
 8000dba:	f001 f82d 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_GPIO_Init+0x210>)
 8000ddc:	f001 f81c 	bl	8001e18 <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40021800 	.word	0x40021800
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//USER Btn PC13에서 interrupt가 발생하면 실행되는 콜백함수
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	//버튼을 누르면 상태값을 변경함.
	if(GPIO_Pin == GPIO_PIN_13)
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e10:	d10a      	bne.n	8000e28 <HAL_GPIO_EXTI_Callback+0x28>
	{
		if(userBtnState == 0) userBtnState = 1;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x22>
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
		else userBtnState = 0;

	}
}
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_EXTI_Callback+0x28>
		else userBtnState = 0;
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x34>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000188 	.word	0x20000188

08000e38 <HAL_UART_RxCpltCallback>:

//uart 통신으로 키보드 입력받은 값을 LCD에 출력하기
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1a      	ldr	r2, [pc, #104]	; (8000eb0 <HAL_UART_RxCpltCallback+0x78>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12d      	bne.n	8000ea6 <HAL_UART_RxCpltCallback+0x6e>
	{
//		printf("UART콜백 호출");
		//문자가 입력되면 interrupt되고 1바이트 문자를 inputString으로 저장
		HAL_UART_Receive_IT(&huart3, (uint8_t *)&inputString, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000e4e:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <HAL_UART_RxCpltCallback+0x80>)
 8000e50:	f003 f8c3 	bl	8003fda <HAL_UART_Receive_IT>
		if (inputString == '\r') //입력된 문자가 엔터이면
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b0d      	cmp	r3, #13
 8000e5a:	d111      	bne.n	8000e80 <HAL_UART_RxCpltCallback+0x48>
		{
			//그 인덱스에 NULL을 저장하여 문자열의 끝을 알려주고
			receivedData[receivedIndex] = '\0';
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_UART_RxCpltCallback+0x84>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_RxCpltCallback+0x88>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]
			strcpy(lcdPrint, receivedData);
 8000e6a:	4915      	ldr	r1, [pc, #84]	; (8000ec0 <HAL_UART_RxCpltCallback+0x88>)
 8000e6c:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <HAL_UART_RxCpltCallback+0x8c>)
 8000e6e:	f004 f8d5 	bl	800501c <strcpy>

			//인덱스를 초기화
			receivedIndex = 0;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_UART_RxCpltCallback+0x84>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]


//			LCD_SendCommand((0x27 << 1), 0b00000001); //lcd 화면초기화 명령
			//콘솔에 출력
			printf(receivedData);
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <HAL_UART_RxCpltCallback+0x88>)
 8000e7a:	f004 f883 	bl	8004f84 <iprintf>
 8000e7e:	e00b      	b.n	8000e98 <HAL_UART_RxCpltCallback+0x60>
		}
		else
		{
			//해당 인덱스에 입력받은 문자를 저장하고 인덱스 증가
			receivedData[receivedIndex++] = inputString;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_RxCpltCallback+0x84>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	b2d1      	uxtb	r1, r2
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <HAL_UART_RxCpltCallback+0x84>)
 8000e8c:	7011      	strb	r1, [r2, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000e92:	7819      	ldrb	r1, [r3, #0]
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_UART_RxCpltCallback+0x88>)
 8000e96:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Transmit(&huart3, (uint8_t *)&inputString, 1, 500);
 8000e98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4905      	ldr	r1, [pc, #20]	; (8000eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_RxCpltCallback+0x80>)
 8000ea2:	f002 ff5b 	bl	8003d5c <HAL_UART_Transmit>
	}

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	2000018c 	.word	0x2000018c
 8000eb8:	20000148 	.word	0x20000148
 8000ebc:	20000258 	.word	0x20000258
 8000ec0:	20000190 	.word	0x20000190
 8000ec4:	200001f4 	.word	0x200001f4

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_MspInit+0x4c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_ADC_MspInit+0x7c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d127      	bne.n	8000f9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_ADC_MspInit+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_ADC_MspInit+0x84>)
 8000f96:	f000 ff3f 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012000 	.word	0x40012000
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800

08000fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_I2C_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12c      	bne.n	800102c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001000:	2304      	movs	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <HAL_I2C_MspInit+0x8c>)
 800100c:	f000 ff04 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_I2C_MspInit+0x88>)
 800101a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_I2C_MspInit+0x88>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40005400 	.word	0x40005400
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400

08001040 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <HAL_RTC_MspInit+0x24>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d102      	bne.n	8001058 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_RTC_MspInit+0x28>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40002800 	.word	0x40002800
 8001068:	42470e3c 	.word	0x42470e3c

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_UART_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_UART_MspInit+0x88>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_UART_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d8:	2307      	movs	r3, #7
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_UART_MspInit+0x8c>)
 80010e4:	f000 fe98 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 f910 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <ADC_IRQHandler+0x10>)
 800115e:	f000 f990 	bl	8001482 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000008c 	.word	0x2000008c

0800116c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <USART3_IRQHandler+0x10>)
 8001172:	f002 ff87 	bl	8004084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000148 	.word	0x20000148

08001180 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001184:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001188:	f001 f80c 	bl	80021a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b8:	605a      	str	r2, [r3, #4]
	return 0;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_isatty>:

int _isatty(int file)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x50>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x16>
		heap_end = &end;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <_sbrk+0x50>)
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <_sbrk+0x54>)
 800120c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <_sbrk+0x50>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <_sbrk+0x50>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	466a      	mov	r2, sp
 800121e:	4293      	cmp	r3, r2
 8001220:	d907      	bls.n	8001232 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001222:	f003 fe7d 	bl	8004f20 <__errno>
 8001226:	4603      	mov	r3, r0
 8001228:	220c      	movs	r2, #12
 800122a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e006      	b.n	8001240 <_sbrk+0x48>
	}

	heap_end += incr;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <_sbrk+0x50>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <_sbrk+0x50>)
 800123c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000025c 	.word	0x2000025c
 800124c:	20000278 	.word	0x20000278

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SystemInit+0x28>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <SystemInit+0x28>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SystemInit+0x28>)
 8001266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126a:	609a      	str	r2, [r3, #8]
#endif
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001282:	e003      	b.n	800128c <LoopCopyDataInit>

08001284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800128a:	3104      	adds	r1, #4

0800128c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001294:	d3f6      	bcc.n	8001284 <CopyDataInit>
  ldr  r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001298:	e002      	b.n	80012a0 <LoopFillZerobss>

0800129a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800129a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800129c:	f842 3b04 	str.w	r3, [r2], #4

080012a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a4:	d3f9      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a6:	f7ff ffd3 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f003 fe3f 	bl	8004f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fae1 	bl	8000874 <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80012b8:	080063b4 	.word	0x080063b4
  ldr  r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012c0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012c4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012c8:	20000274 	.word	0x20000274

080012cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <CAN1_RX0_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 fd29 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fde8 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd41 	bl	8001dba <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 fd09 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	20000260 	.word	0x20000260

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000260 	.word	0x20000260

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008

080013fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e033      	b.n	800147a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fd84 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001442:	f023 0302 	bic.w	r3, r3, #2
 8001446:	f043 0202 	orr.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 faa8 	bl	80019a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f023 0303 	bic.w	r3, r3, #3
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
 800146a:	e001      	b.n	8001470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b02      	cmp	r3, #2
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	bf0c      	ite	eq
 80014b6:	2301      	moveq	r3, #1
 80014b8:	2300      	movne	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d049      	beq.n	8001558 <HAL_ADC_IRQHandler+0xd6>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d046      	beq.n	8001558 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12b      	bne.n	8001548 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d127      	bne.n	8001548 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001510:	2b00      	cmp	r3, #0
 8001512:	d119      	bne.n	8001548 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0220 	bic.w	r2, r2, #32
 8001522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8db 	bl	8001704 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0212 	mvn.w	r2, #18
 8001556:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b80      	cmp	r3, #128	; 0x80
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d057      	beq.n	800163a <HAL_ADC_IRQHandler+0x1b8>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d054      	beq.n	800163a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d139      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d12b      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d124      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11d      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fab6 	bl	8001b9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 020c 	mvn.w	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b40      	cmp	r3, #64	; 0x40
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d017      	beq.n	800169c <HAL_ADC_IRQHandler+0x21a>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d014      	beq.n	800169c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10d      	bne.n	800169c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f843 	bl	8001718 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0201 	mvn.w	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d015      	beq.n	80016fc <HAL_ADC_IRQHandler+0x27a>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d012      	beq.n	80016fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f06f 0220 	mvn.w	r2, #32
 80016ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f81d 	bl	800172c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f06f 0220 	mvn.w	r2, #32
 80016fa:	601a      	str	r2, [r3, #0]
  }
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1c>
 8001758:	2302      	movs	r3, #2
 800175a:	e113      	b.n	8001984 <HAL_ADC_ConfigChannel+0x244>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d925      	bls.n	80017b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3b1e      	subs	r3, #30
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43da      	mvns	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	400a      	ands	r2, r1
 8001790:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68d9      	ldr	r1, [r3, #12]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4403      	add	r3, r0
 80017aa:	3b1e      	subs	r3, #30
 80017ac:	409a      	lsls	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	e022      	b.n	80017fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6919      	ldr	r1, [r3, #16]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	2207      	movs	r2, #7
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6919      	ldr	r1, [r3, #16]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4403      	add	r3, r0
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b06      	cmp	r3, #6
 8001804:	d824      	bhi.n	8001850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b05      	subs	r3, #5
 8001818:	221f      	movs	r2, #31
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	400a      	ands	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	3b05      	subs	r3, #5
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
 800184e:	e04c      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d824      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b23      	subs	r3, #35	; 0x23
 800186a:	221f      	movs	r2, #31
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43da      	mvns	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	400a      	ands	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b23      	subs	r3, #35	; 0x23
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
 80018a0:	e023      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b41      	subs	r3, #65	; 0x41
 80018b4:	221f      	movs	r2, #31
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	400a      	ands	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3b41      	subs	r3, #65	; 0x41
 80018de:	fa00 f203 	lsl.w	r2, r0, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_ADC_ConfigChannel+0x250>)
 80018ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_ADC_ConfigChannel+0x254>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d10f      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d8>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d10b      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_ADC_ConfigChannel+0x254>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12b      	bne.n	800197a <HAL_ADC_ConfigChannel+0x23a>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_ADC_ConfigChannel+0x258>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_ADC_ConfigChannel+0x1f4>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b11      	cmp	r3, #17
 8001932:	d122      	bne.n	800197a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_ADC_ConfigChannel+0x258>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d111      	bne.n	800197a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_ADC_ConfigChannel+0x25c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_ADC_ConfigChannel+0x260>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40012300 	.word	0x40012300
 8001994:	40012000 	.word	0x40012000
 8001998:	10000012 	.word	0x10000012
 800199c:	20000000 	.word	0x20000000
 80019a0:	431bde83 	.word	0x431bde83

080019a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ac:	4b79      	ldr	r3, [pc, #484]	; (8001b94 <ADC_Init+0x1f0>)
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	021a      	lsls	r2, r3, #8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <ADC_Init+0x1f4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d022      	beq.n	8001a82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e00f      	b.n	8001aa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0202 	bic.w	r2, r2, #2
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e1b      	ldrb	r3, [r3, #24]
 8001abc:	005a      	lsls	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ade:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	3b01      	subs	r3, #1
 8001afc:	035a      	lsls	r2, r3, #13
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e007      	b.n	8001b18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	051a      	lsls	r2, r3, #20
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6899      	ldr	r1, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b5a:	025a      	lsls	r2, r3, #9
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	029a      	lsls	r2, r3, #10
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	609a      	str	r2, [r3, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40012300 	.word	0x40012300
 8001b98:	0f000001 	.word	0x0f000001

08001b9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d004      	beq.n	8001df0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e00c      	b.n	8001e0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2205      	movs	r2, #5
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e177      	b.n	8002124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8166 	bne.w	800211e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00b      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e66:	2b11      	cmp	r3, #17
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0xfc>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b12      	cmp	r3, #18
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80c0 	beq.w	800211e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_GPIO_Init+0x324>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a65      	ldr	r2, [pc, #404]	; (800213c <HAL_GPIO_Init+0x324>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_GPIO_Init+0x324>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a61      	ldr	r2, [pc, #388]	; (8002140 <HAL_GPIO_Init+0x328>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_GPIO_Init+0x32c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d037      	beq.n	8002056 <HAL_GPIO_Init+0x23e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a57      	ldr	r2, [pc, #348]	; (8002148 <HAL_GPIO_Init+0x330>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_GPIO_Init+0x23a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a56      	ldr	r2, [pc, #344]	; (800214c <HAL_GPIO_Init+0x334>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x236>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a55      	ldr	r2, [pc, #340]	; (8002150 <HAL_GPIO_Init+0x338>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x232>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a54      	ldr	r2, [pc, #336]	; (8002154 <HAL_GPIO_Init+0x33c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x22e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a53      	ldr	r2, [pc, #332]	; (8002158 <HAL_GPIO_Init+0x340>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x22a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_GPIO_Init+0x344>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_GPIO_Init+0x348>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x222>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_GPIO_Init+0x34c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4f      	ldr	r2, [pc, #316]	; (8002168 <HAL_GPIO_Init+0x350>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x21a>
 800202e:	2309      	movs	r3, #9
 8002030:	e012      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002032:	230a      	movs	r3, #10
 8002034:	e010      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002036:	2308      	movs	r3, #8
 8002038:	e00e      	b.n	8002058 <HAL_GPIO_Init+0x240>
 800203a:	2307      	movs	r3, #7
 800203c:	e00c      	b.n	8002058 <HAL_GPIO_Init+0x240>
 800203e:	2306      	movs	r3, #6
 8002040:	e00a      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002042:	2305      	movs	r3, #5
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002046:	2304      	movs	r3, #4
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x240>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x240>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x240>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_GPIO_Init+0x328>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_GPIO_Init+0x354>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209a:	4a34      	ldr	r2, [pc, #208]	; (800216c <HAL_GPIO_Init+0x354>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_GPIO_Init+0x354>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <HAL_GPIO_Init+0x354>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_GPIO_Init+0x354>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_GPIO_Init+0x354>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_GPIO_Init+0x354>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_GPIO_Init+0x354>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f ae84 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40013800 	.word	0x40013800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40021400 	.word	0x40021400
 800215c:	40021800 	.word	0x40021800
 8002160:	40021c00 	.word	0x40021c00
 8002164:	40022000 	.word	0x40022000
 8002168:	40022400 	.word	0x40022400
 800216c:	40013c00 	.word	0x40013c00

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fe1c 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e12b      	b.n	800243e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fe fed8 	bl	8000fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002238:	f001 fa76 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a81      	ldr	r2, [pc, #516]	; (8002448 <HAL_I2C_Init+0x274>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d807      	bhi.n	8002258 <HAL_I2C_Init+0x84>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a80      	ldr	r2, [pc, #512]	; (800244c <HAL_I2C_Init+0x278>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e006      	b.n	8002266 <HAL_I2C_Init+0x92>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a7d      	ldr	r2, [pc, #500]	; (8002450 <HAL_I2C_Init+0x27c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	bf94      	ite	ls
 8002260:	2301      	movls	r3, #1
 8002262:	2300      	movhi	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0e7      	b.n	800243e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a78      	ldr	r2, [pc, #480]	; (8002454 <HAL_I2C_Init+0x280>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0c9b      	lsrs	r3, r3, #18
 8002278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a6a      	ldr	r2, [pc, #424]	; (8002448 <HAL_I2C_Init+0x274>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d802      	bhi.n	80022a8 <HAL_I2C_Init+0xd4>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3301      	adds	r3, #1
 80022a6:	e009      	b.n	80022bc <HAL_I2C_Init+0xe8>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_I2C_Init+0x284>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	3301      	adds	r3, #1
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	495c      	ldr	r1, [pc, #368]	; (8002448 <HAL_I2C_Init+0x274>)
 80022d8:	428b      	cmp	r3, r1
 80022da:	d819      	bhi.n	8002310 <HAL_I2C_Init+0x13c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e59      	subs	r1, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022f0:	400b      	ands	r3, r1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_I2C_Init+0x138>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e59      	subs	r1, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fbb1 f3f3 	udiv	r3, r1, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230a:	e051      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 800230c:	2304      	movs	r3, #4
 800230e:	e04f      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d111      	bne.n	800233c <HAL_I2C_Init+0x168>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e012      	b.n	8002362 <HAL_I2C_Init+0x18e>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Init+0x196>
 8002366:	2301      	movs	r3, #1
 8002368:	e022      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10e      	bne.n	8002390 <HAL_I2C_Init+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e58      	subs	r0, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	440b      	add	r3, r1
 8002380:	fbb0 f3f3 	udiv	r3, r0, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Init+0x1dc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1e58      	subs	r0, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	0099      	lsls	r1, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	6809      	ldr	r1, [r1, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6911      	ldr	r1, [r2, #16]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	000186a0 	.word	0x000186a0
 800244c:	001e847f 	.word	0x001e847f
 8002450:	003d08ff 	.word	0x003d08ff
 8002454:	431bde83 	.word	0x431bde83
 8002458:	10624dd3 	.word	0x10624dd3

0800245c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	461a      	mov	r2, r3
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
 800246c:	4613      	mov	r3, r2
 800246e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7fe ff94 	bl	800139c <HAL_GetTick>
 8002474:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	f040 80e0 	bne.w	8002644 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2319      	movs	r3, #25
 800248a:	2201      	movs	r2, #1
 800248c:	4970      	ldr	r1, [pc, #448]	; (8002650 <HAL_I2C_Master_Transmit+0x1f4>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fa92 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e0d3      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2C_Master_Transmit+0x50>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0cc      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d007      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2221      	movs	r2, #33	; 0x21
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2210      	movs	r2, #16
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_I2C_Master_Transmit+0x1f8>)
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f9ca 	bl	80028b4 <I2C_MasterRequestWrite>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08d      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002540:	e066      	b.n	8002610 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fb0c 	bl	8002b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_I2C_Master_Transmit+0x188>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	6a39      	ldr	r1, [r7, #32]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fafc 	bl	8002be6 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d107      	bne.n	800260c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01a      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d194      	bne.n	8002542 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	00100002 	.word	0x00100002
 8002654:	ffff0000 	.word	0xffff0000

08002658 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7fe fe98 	bl	800139c <HAL_GetTick>
 800266c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b20      	cmp	r3, #32
 800267c:	f040 8110 	bne.w	80028a0 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2319      	movs	r3, #25
 8002686:	2201      	movs	r2, #1
 8002688:	4988      	ldr	r1, [pc, #544]	; (80028ac <HAL_I2C_IsDeviceReady+0x254>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f994 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	e103      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_I2C_IsDeviceReady+0x50>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e0fc      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d007      	beq.n	80026ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2224      	movs	r2, #36	; 0x24
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a70      	ldr	r2, [pc, #448]	; (80028b0 <HAL_I2C_IsDeviceReady+0x258>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002700:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f952 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0b6      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002742:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002744:	f7fe fe2a 	bl	800139c <HAL_GetTick>
 8002748:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002778:	e025      	b.n	80027c6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe fe0f 	bl	800139c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <HAL_I2C_IsDeviceReady+0x138>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22a0      	movs	r2, #160	; 0xa0
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2ba0      	cmp	r3, #160	; 0xa0
 80027d0:	d005      	beq.n	80027de <HAL_I2C_IsDeviceReady+0x186>
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_I2C_IsDeviceReady+0x186>
 80027d8:	7dbb      	ldrb	r3, [r7, #22]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0cd      	beq.n	800277a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d129      	bne.n	8002848 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2319      	movs	r3, #25
 8002820:	2201      	movs	r2, #1
 8002822:	4922      	ldr	r1, [pc, #136]	; (80028ac <HAL_I2C_IsDeviceReady+0x254>)
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8c7 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e036      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e02c      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002860:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	4910      	ldr	r1, [pc, #64]	; (80028ac <HAL_I2C_IsDeviceReady+0x254>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f8a3 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e012      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	3301      	adds	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	f4ff af33 	bcc.w	80026f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000

080028b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	460b      	mov	r3, r1
 80028c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d006      	beq.n	80028de <I2C_MasterRequestWrite+0x2a>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <I2C_MasterRequestWrite+0x2a>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00b      	b.n	8002908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	2b12      	cmp	r3, #18
 80028f6:	d107      	bne.n	8002908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f84f 	bl	80029b8 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e035      	b.n	80029a6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002942:	d108      	bne.n	8002956 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002952:	611a      	str	r2, [r3, #16]
 8002954:	e01b      	b.n	800298e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	11db      	asrs	r3, r3, #7
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 0306 	and.w	r3, r3, #6
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f063 030f 	orn	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	490f      	ldr	r1, [pc, #60]	; (80029b0 <I2C_MasterRequestWrite+0xfc>)
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f876 	bl	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e010      	b.n	80029a6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002984:	897b      	ldrh	r3, [r7, #10]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <I2C_MasterRequestWrite+0x100>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f866 	bl	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	00010008 	.word	0x00010008
 80029b4:	00010002 	.word	0x00010002

080029b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c8:	e025      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d021      	beq.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fe fce3 	bl	800139c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d116      	bne.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e023      	b.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	e00c      	b.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d0b6      	beq.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a74:	e051      	b.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a84:	d123      	bne.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e046      	b.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d021      	beq.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe fc61 	bl	800139c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d116      	bne.n	8002b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e020      	b.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10c      	bne.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	e00b      	b.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	43da      	mvns	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d18d      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b70:	e02d      	b.n	8002bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f878 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e02d      	b.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d021      	beq.n	8002bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7fe fc07 	bl	800139c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e007      	b.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d1ca      	bne.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf2:	e02d      	b.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f837 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e02d      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0a:	d021      	beq.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7fe fbc6 	bl	800139c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d1ca      	bne.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d11b      	bne.n	8002cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d129      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	; 0x24
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d12a      	bne.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x94>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de8:	f7fe fad8 	bl	800139c <HAL_GetTick>
 8002dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dee:	e009      	b.n	8002e04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df0:	f7fe fad4 	bl	800139c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfe:	d901      	bls.n	8002e04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e01f      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d1ee      	bne.n	8002df0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e18:	f7fe fac0 	bl	800139c <HAL_GetTick>
 8002e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e1e:	e009      	b.n	8002e34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e20:	f7fe fabc 	bl	800139c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2e:	d901      	bls.n	8002e34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e007      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e40:	d1ee      	bne.n	8002e20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	420e0040 	.word	0x420e0040
 8002e54:	40007000 	.word	0x40007000
 8002e58:	420e0044 	.word	0x420e0044

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e25e      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d075      	beq.n	8002f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d00c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b85      	ldr	r3, [pc, #532]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d112      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05b      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d157      	bne.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e239      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x74>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x98>
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6c      	ldr	r2, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ef4:	4b69      	ldr	r3, [pc, #420]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a68      	ldr	r2, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fa42 	bl	800139c <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fa3e 	bl	800139c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1fe      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fa2e 	bl	800139c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fa2a 	bl	800139c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1ea      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1be      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4937      	ldr	r1, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe f9e3 	bl	800139c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe f9df 	bl	800139c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e19f      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4925      	ldr	r1, [pc, #148]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe f9c2 	bl	800139c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe f9be 	bl	800139c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e17e      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe f9a2 	bl	800139c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe f99e 	bl	800139c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e15e      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x200>
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe f98b 	bl	800139c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00e      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe f987 	bl	800139c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d907      	bls.n	80030a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e147      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8097 	beq.w	80031f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b81      	ldr	r3, [pc, #516]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a73      	ldr	r2, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe f947 	bl	800139c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe f943 	bl	800139c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e103      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x2ea>
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x30c>
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5e      	ldr	r2, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003168:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	4b55      	ldr	r3, [pc, #340]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a54      	ldr	r2, [pc, #336]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f908 	bl	800139c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe f904 	bl	800139c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0c2      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x334>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe f8f2 	bl	800139c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe f8ee 	bl	800139c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0ac      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	4a38      	ldr	r2, [pc, #224]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8098 	beq.w	800332a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d05c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d141      	bne.n	8003292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe f8c2 	bl	800139c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe f8be 	bl	800139c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e07e      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe f897 	bl	800139c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe f893 	bl	800139c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e053      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x416>
 8003290:	e04b      	b.n	800332a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe f880 	bl	800139c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe f87c 	bl	800139c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e03c      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x444>
 80032be:	e034      	b.n	800332a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e02f      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d11c      	bne.n	8003326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003306:	4293      	cmp	r3, r2
 8003308:	d10d      	bne.n	8003326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0cc      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90c      	bls.n	8003374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b8      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d044      	beq.n	8003458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d119      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e067      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4934      	ldr	r1, [pc, #208]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003428:	f7fd ffb8 	bl	800139c <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fd ffb4 	bl	800139c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d20c      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e032      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4916      	ldr	r1, [pc, #88]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034be:	f000 f821 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	490a      	ldr	r1, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd ff18 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023c00 	.word	0x40023c00
 80034f4:	40023800 	.word	0x40023800
 80034f8:	080062f4 	.word	0x080062f4
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003508:	b094      	sub	sp, #80	; 0x50
 800350a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	2300      	movs	r3, #0
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003514:	2300      	movs	r3, #0
 8003516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351c:	4b79      	ldr	r3, [pc, #484]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d00d      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x40>
 8003528:	2b08      	cmp	r3, #8
 800352a:	f200 80e1 	bhi.w	80036f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x34>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x3a>
 8003536:	e0db      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_RCC_GetSysClockFreq+0x204>)
 800353a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800353c:	e0db      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353e:	4b73      	ldr	r3, [pc, #460]	; (800370c <HAL_RCC_GetSysClockFreq+0x208>)
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003542:	e0d8      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003544:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354e:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	2200      	movs	r2, #0
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
 8003564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 800356e:	2300      	movs	r3, #0
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
 8003572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003576:	4622      	mov	r2, r4
 8003578:	462b      	mov	r3, r5
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	0159      	lsls	r1, r3, #5
 8003584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003588:	0150      	lsls	r0, r2, #5
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4621      	mov	r1, r4
 8003590:	1a51      	subs	r1, r2, r1
 8003592:	6139      	str	r1, [r7, #16]
 8003594:	4629      	mov	r1, r5
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a8:	4659      	mov	r1, fp
 80035aa:	018b      	lsls	r3, r1, #6
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b2:	4651      	mov	r1, sl
 80035b4:	018a      	lsls	r2, r1, #6
 80035b6:	4651      	mov	r1, sl
 80035b8:	ebb2 0801 	subs.w	r8, r2, r1
 80035bc:	4659      	mov	r1, fp
 80035be:	eb63 0901 	sbc.w	r9, r3, r1
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d6:	4690      	mov	r8, r2
 80035d8:	4699      	mov	r9, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	eb18 0303 	adds.w	r3, r8, r3
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	462b      	mov	r3, r5
 80035e4:	eb49 0303 	adc.w	r3, r9, r3
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035f6:	4629      	mov	r1, r5
 80035f8:	024b      	lsls	r3, r1, #9
 80035fa:	4621      	mov	r1, r4
 80035fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003600:	4621      	mov	r1, r4
 8003602:	024a      	lsls	r2, r1, #9
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003614:	f7fc fe44 	bl	80002a0 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	e058      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	2200      	movs	r2, #0
 800362a:	4618      	mov	r0, r3
 800362c:	4611      	mov	r1, r2
 800362e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	0159      	lsls	r1, r3, #5
 800364a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364e:	0150      	lsls	r0, r2, #5
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4641      	mov	r1, r8
 8003656:	ebb2 0a01 	subs.w	sl, r2, r1
 800365a:	4649      	mov	r1, r9
 800365c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800366c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003674:	ebb2 040a 	subs.w	r4, r2, sl
 8003678:	eb63 050b 	sbc.w	r5, r3, fp
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	464b      	mov	r3, r9
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036aa:	4629      	mov	r1, r5
 80036ac:	028b      	lsls	r3, r1, #10
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b4:	4621      	mov	r1, r4
 80036b6:	028a      	lsls	r2, r1, #10
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	2200      	movs	r2, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	61fa      	str	r2, [r7, #28]
 80036c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c8:	f7fc fdea 	bl	80002a0 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4613      	mov	r3, r2
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	3301      	adds	r3, #1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetSysClockFreq+0x204>)
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3750      	adds	r7, #80	; 0x50
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	00f42400 	.word	0x00f42400
 800370c:	007a1200 	.word	0x007a1200

08003710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <HAL_RCC_GetHCLKFreq+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000000 	.word	0x20000000

08003728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800372c:	f7ff fff0 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0a9b      	lsrs	r3, r3, #10
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4903      	ldr	r1, [pc, #12]	; (800374c <HAL_RCC_GetPCLK1Freq+0x24>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	08006304 	.word	0x08006304

08003750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003754:	f7ff ffdc 	bl	8003710 <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0b5b      	lsrs	r3, r3, #13
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023800 	.word	0x40023800
 8003774:	08006304 	.word	0x08006304

08003778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d075      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037b2:	f7fd fdf3 	bl	800139c <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037ba:	f7fd fdef 	bl	800139c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e189      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037cc:	4b8a      	ldr	r3, [pc, #552]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	019a      	lsls	r2, r3, #6
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	071b      	lsls	r3, r3, #28
 80037f0:	4981      	ldr	r1, [pc, #516]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01f      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003804:	4b7c      	ldr	r3, [pc, #496]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800380a:	0f1b      	lsrs	r3, r3, #28
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	019a      	lsls	r2, r3, #6
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	431a      	orrs	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	071b      	lsls	r3, r3, #28
 8003824:	4974      	ldr	r1, [pc, #464]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800382c:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003832:	f023 021f 	bic.w	r2, r3, #31
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	3b01      	subs	r3, #1
 800383c:	496e      	ldr	r1, [pc, #440]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	019a      	lsls	r2, r3, #6
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	061b      	lsls	r3, r3, #24
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	071b      	lsls	r3, r3, #28
 8003864:	4964      	ldr	r1, [pc, #400]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003872:	f7fd fd93 	bl	800139c <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800387a:	f7fd fd8f 	bl	800139c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e129      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800388c:	4b5a      	ldr	r3, [pc, #360]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d079      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038b0:	4b52      	ldr	r3, [pc, #328]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038b6:	f7fd fd71 	bl	800139c <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038be:	f7fd fd6d 	bl	800139c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e107      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d0:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038dc:	d0ef      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0f1b      	lsrs	r3, r3, #28
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	019a      	lsls	r2, r3, #6
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	431a      	orrs	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	493b      	ldr	r1, [pc, #236]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003918:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	3b01      	subs	r3, #1
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	4934      	ldr	r1, [pc, #208]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	0e1b      	lsrs	r3, r3, #24
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	019a      	lsls	r2, r3, #6
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	071b      	lsls	r3, r3, #28
 8003958:	4927      	ldr	r1, [pc, #156]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	4922      	ldr	r1, [pc, #136]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003976:	4b21      	ldr	r3, [pc, #132]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800397c:	f7fd fd0e 	bl	800139c <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003984:	f7fd fd0a 	bl	800139c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0a4      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d1ef      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 808b 	beq.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039da:	f7fd fcdf 	bl	800139c <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039e0:	e010      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fcdb 	bl	800139c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d909      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e075      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80039f4:	42470068 	.word	0x42470068
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470070 	.word	0x42470070
 8003a00:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0e8      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02f      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d028      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a44:	4a29      	ldr	r2, [pc, #164]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d114      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fca1 	bl	800139c <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fc9d 	bl	800139c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e035      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8c:	d10d      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa2:	4912      	ldr	r1, [pc, #72]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ab0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	490a      	ldr	r1, [pc, #40]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003adc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470e40 	.word	0x42470e40
 8003af4:	424711e0 	.word	0x424711e0

08003af8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e083      	b.n	8003c12 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7f5b      	ldrb	r3, [r3, #29]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fa90 	bl	8001040 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	22ca      	movs	r2, #202	; 0xca
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2253      	movs	r2, #83	; 0x53
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f897 	bl	8003c6a <RTC_EnterInitMode>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e05e      	b.n	8003c12 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b66:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68d2      	ldr	r2, [r2, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6919      	ldr	r1, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	041a      	lsls	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10e      	bne.n	8003be0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f829 	bl	8003c1a <HAL_RTC_WaitForSynchro>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e018      	b.n	8003c12 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	22ff      	movs	r2, #255	; 0xff
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c36:	f7fd fbb1 	bl	800139c <HAL_GetTick>
 8003c3a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c3c:	e009      	b.n	8003c52 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c3e:	f7fd fbad 	bl	800139c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c4c:	d901      	bls.n	8003c52 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e007      	b.n	8003c62 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d119      	bne.n	8003cb8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd fb85 	bl	800139c <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c94:	e009      	b.n	8003caa <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c96:	f7fd fb81 	bl	800139c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca4:	d901      	bls.n	8003caa <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e007      	b.n	8003cba <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ee      	beq.n	8003c96 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e03f      	b.n	8003d54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd f9bf 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2224      	movs	r2, #36	; 0x24
 8003cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fc3c 	bl	8004584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	f040 8083 	bne.w	8003e84 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit+0x2e>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07b      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Transmit+0x40>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e074      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2221      	movs	r2, #33	; 0x21
 8003dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003db2:	f7fd faf3 	bl	800139c <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	88fa      	ldrh	r2, [r7, #6]
 8003dc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003dcc:	e042      	b.n	8003e54 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d122      	bne.n	8003e2c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fa5b 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e042      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e12:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3302      	adds	r3, #2
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	e017      	b.n	8003e54 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	e013      	b.n	8003e54 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa38 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e01f      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	60ba      	str	r2, [r7, #8]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1b7      	bne.n	8003dce <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2140      	movs	r1, #64	; 0x40
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa1f 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e006      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af02      	add	r7, sp, #8
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	f040 8090 	bne.w	8003fd0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Receive+0x2e>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e088      	b.n	8003fd2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Receive+0x40>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e081      	b.n	8003fd2 <HAL_UART_Receive+0x144>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2222      	movs	r2, #34	; 0x22
 8003ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fa5a 	bl	800139c <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003efe:	e05c      	b.n	8003fba <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d12b      	bne.n	8003f70 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2120      	movs	r1, #32
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f9c2 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e04f      	b.n	8003fd2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10c      	bne.n	8003f58 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3302      	adds	r3, #2
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	e030      	b.n	8003fba <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	e024      	b.n	8003fba <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2120      	movs	r1, #32
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f996 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e023      	b.n	8003fd2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	b2ca      	uxtb	r2, r1
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e00a      	b.n	8003fba <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d19d      	bne.n	8003f00 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b085      	sub	sp, #20
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d140      	bne.n	8004076 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Receive_IT+0x26>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e039      	b.n	8004078 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_UART_Receive_IT+0x38>
 800400e:	2302      	movs	r3, #2
 8004010:	e032      	b.n	8004078 <HAL_UART_Receive_IT+0x9e>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	88fa      	ldrh	r2, [r7, #6]
 800402a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2222      	movs	r2, #34	; 0x22
 8004036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004050:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0220 	orr.w	r2, r2, #32
 8004070:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_UART_IRQHandler+0x52>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f9d6 	bl	8004480 <UART_Receive_IT>
      return;
 80040d4:	e0d0      	b.n	8004278 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80b0 	beq.w	800423e <HAL_UART_IRQHandler+0x1ba>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_UART_IRQHandler+0x70>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a5 	beq.w	800423e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_UART_IRQHandler+0x90>
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_UART_IRQHandler+0xb0>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	f043 0202 	orr.w	r2, r3, #2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_UART_IRQHandler+0xd0>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	f043 0204 	orr.w	r2, r3, #4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <HAL_UART_IRQHandler+0xfa>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_UART_IRQHandler+0xee>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	f043 0208 	orr.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d077      	beq.n	8004276 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_UART_IRQHandler+0x11c>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f970 	bl	8004480 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HAL_UART_IRQHandler+0x144>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d031      	beq.n	800422c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8b9 	bl	8004340 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d123      	bne.n	8004224 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_UART_IRQHandler+0x1fc>)
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fde6 	bl	8001dd2 <HAL_DMA_Abort_IT>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d016      	beq.n	800423a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004216:	4610      	mov	r0, r2
 8004218:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421a:	e00e      	b.n	800423a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f83b 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004222:	e00a      	b.n	800423a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f837 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422a:	e006      	b.n	800423a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f833 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004238:	e01d      	b.n	8004276 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423a:	bf00      	nop
    return;
 800423c:	e01b      	b.n	8004276 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_UART_IRQHandler+0x1d6>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8a6 	bl	80043a4 <UART_Transmit_IT>
    return;
 8004258:	e00e      	b.n	8004278 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_UART_IRQHandler+0x1f4>
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8ee 	bl	8004450 <UART_EndTransmit_IT>
    return;
 8004274:	e000      	b.n	8004278 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004276:	bf00      	nop
  }
}
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	0800437d 	.word	0x0800437d

08004284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042bc:	e02c      	b.n	8004318 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d028      	beq.n	8004318 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x30>
 80042cc:	f7fd f866 	bl	800139c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d21d      	bcs.n	8004318 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e00f      	b.n	8004338 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	429a      	cmp	r2, r3
 8004334:	d0c3      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004356:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff7e 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b21      	cmp	r3, #33	; 0x21
 80043b6:	d144      	bne.n	8004442 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d11a      	bne.n	80043f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]
 80043ea:	e00e      	b.n	800440a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	e008      	b.n	800440a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6211      	str	r1, [r2, #32]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4619      	mov	r1, r3
 8004418:	84d1      	strh	r1, [r2, #38]	; 0x26
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800442c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff07 	bl	8004284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b22      	cmp	r3, #34	; 0x22
 8004492:	d171      	bne.n	8004578 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d123      	bne.n	80044e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10e      	bne.n	80044ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
 80044c8:	e029      	b.n	800451e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
 80044e4:	e01b      	b.n	800451e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6858      	ldr	r0, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	1c59      	adds	r1, r3, #1
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6291      	str	r1, [r2, #40]	; 0x28
 80044fe:	b2c2      	uxtb	r2, r0
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e00c      	b.n	800451e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	1c58      	adds	r0, r3, #1
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	6288      	str	r0, [r1, #40]	; 0x28
 8004516:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4619      	mov	r1, r3
 800452c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800452e:	2b00      	cmp	r3, #0
 8004530:	d120      	bne.n	8004574 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0220 	bic.w	r2, r2, #32
 8004540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fc64 	bl	8000e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e002      	b.n	800457a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800458c:	af00      	add	r7, sp, #0
 800458e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004592:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800459e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a2:	68d9      	ldr	r1, [r3, #12]
 80045a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	ea40 0301 	orr.w	r3, r0, r1
 80045ae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	431a      	orrs	r2, r3
 80045be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80045d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045de:	f021 010c 	bic.w	r1, r1, #12
 80045e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80045ec:	430b      	orrs	r3, r1
 80045ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004600:	6999      	ldr	r1, [r3, #24]
 8004602:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	ea40 0301 	orr.w	r3, r0, r1
 800460c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004618:	f040 824a 	bne.w	8004ab0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b96      	ldr	r3, [pc, #600]	; (800487c <UART_SetConfig+0x2f8>)
 8004624:	429a      	cmp	r2, r3
 8004626:	d006      	beq.n	8004636 <UART_SetConfig+0xb2>
 8004628:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b94      	ldr	r3, [pc, #592]	; (8004880 <UART_SetConfig+0x2fc>)
 8004630:	429a      	cmp	r2, r3
 8004632:	f040 8129 	bne.w	8004888 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004636:	f7ff f88b 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 800463a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800463e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004642:	2200      	movs	r2, #0
 8004644:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004648:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800464c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	1891      	adds	r1, r2, r2
 8004656:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800465a:	415b      	adcs	r3, r3
 800465c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004660:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004664:	4621      	mov	r1, r4
 8004666:	1851      	adds	r1, r2, r1
 8004668:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800466c:	4629      	mov	r1, r5
 800466e:	414b      	adcs	r3, r1
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004680:	4649      	mov	r1, r9
 8004682:	00cb      	lsls	r3, r1, #3
 8004684:	4641      	mov	r1, r8
 8004686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468a:	4641      	mov	r1, r8
 800468c:	00ca      	lsls	r2, r1, #3
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	4603      	mov	r3, r0
 8004694:	4622      	mov	r2, r4
 8004696:	189b      	adds	r3, r3, r2
 8004698:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800469c:	462b      	mov	r3, r5
 800469e:	460a      	mov	r2, r1
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80046a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046b4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80046b8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80046bc:	460b      	mov	r3, r1
 80046be:	18db      	adds	r3, r3, r3
 80046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c4:	4613      	mov	r3, r2
 80046c6:	eb42 0303 	adc.w	r3, r2, r3
 80046ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046ce:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80046d2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80046d6:	f7fb fde3 	bl	80002a0 <__aeabi_uldivmod>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4b69      	ldr	r3, [pc, #420]	; (8004884 <UART_SetConfig+0x300>)
 80046e0:	fba3 2302 	umull	r2, r3, r3, r2
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	011c      	lsls	r4, r3, #4
 80046e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80046f2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80046f6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80046fa:	4642      	mov	r2, r8
 80046fc:	464b      	mov	r3, r9
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004704:	415b      	adcs	r3, r3
 8004706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800470a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800470e:	4641      	mov	r1, r8
 8004710:	1851      	adds	r1, r2, r1
 8004712:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800472a:	4659      	mov	r1, fp
 800472c:	00cb      	lsls	r3, r1, #3
 800472e:	4651      	mov	r1, sl
 8004730:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004734:	4651      	mov	r1, sl
 8004736:	00ca      	lsls	r2, r1, #3
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	4603      	mov	r3, r0
 800473e:	4642      	mov	r2, r8
 8004740:	189b      	adds	r3, r3, r2
 8004742:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004746:	464b      	mov	r3, r9
 8004748:	460a      	mov	r2, r1
 800474a:	eb42 0303 	adc.w	r3, r2, r3
 800474e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8004752:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800475e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8004762:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8004766:	460b      	mov	r3, r1
 8004768:	18db      	adds	r3, r3, r3
 800476a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800476e:	4613      	mov	r3, r2
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004778:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800477c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004780:	f7fb fd8e 	bl	80002a0 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4611      	mov	r1, r2
 800478a:	4b3e      	ldr	r3, [pc, #248]	; (8004884 <UART_SetConfig+0x300>)
 800478c:	fba3 2301 	umull	r2, r3, r3, r1
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2264      	movs	r2, #100	; 0x64
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	1acb      	subs	r3, r1, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047a0:	4b38      	ldr	r3, [pc, #224]	; (8004884 <UART_SetConfig+0x300>)
 80047a2:	fba3 2302 	umull	r2, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047ae:	441c      	add	r4, r3
 80047b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80047ba:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80047be:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80047cc:	415b      	adcs	r3, r3
 80047ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047d2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80047d6:	4641      	mov	r1, r8
 80047d8:	1851      	adds	r1, r2, r1
 80047da:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80047de:	4649      	mov	r1, r9
 80047e0:	414b      	adcs	r3, r1
 80047e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80047f2:	4659      	mov	r1, fp
 80047f4:	00cb      	lsls	r3, r1, #3
 80047f6:	4651      	mov	r1, sl
 80047f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047fc:	4651      	mov	r1, sl
 80047fe:	00ca      	lsls	r2, r1, #3
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	4603      	mov	r3, r0
 8004806:	4642      	mov	r2, r8
 8004808:	189b      	adds	r3, r3, r2
 800480a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800480e:	464b      	mov	r3, r9
 8004810:	460a      	mov	r2, r1
 8004812:	eb42 0303 	adc.w	r3, r2, r3
 8004816:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800481a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8004826:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800482a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800482e:	460b      	mov	r3, r1
 8004830:	18db      	adds	r3, r3, r3
 8004832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004836:	4613      	mov	r3, r2
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004840:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004844:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004848:	f7fb fd2a 	bl	80002a0 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <UART_SetConfig+0x300>)
 8004852:	fba3 1302 	umull	r1, r3, r3, r2
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	2164      	movs	r1, #100	; 0x64
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	3332      	adds	r3, #50	; 0x32
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <UART_SetConfig+0x300>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	f003 0207 	and.w	r2, r3, #7
 8004870:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4422      	add	r2, r4
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	e349      	b.n	8004f10 <UART_SetConfig+0x98c>
 800487c:	40011000 	.word	0x40011000
 8004880:	40011400 	.word	0x40011400
 8004884:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe ff4e 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 800488c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004890:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800489a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800489e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80048ac:	415b      	adcs	r3, r3
 80048ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80048b6:	4621      	mov	r1, r4
 80048b8:	eb12 0a01 	adds.w	sl, r2, r1
 80048bc:	4629      	mov	r1, r5
 80048be:	eb43 0b01 	adc.w	fp, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048d6:	4692      	mov	sl, r2
 80048d8:	469b      	mov	fp, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb1a 0303 	adds.w	r3, sl, r3
 80048e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb4b 0303 	adc.w	r3, fp, r3
 80048ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80048fa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80048fe:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8004902:	460b      	mov	r3, r1
 8004904:	18db      	adds	r3, r3, r3
 8004906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800490a:	4613      	mov	r3, r2
 800490c:	eb42 0303 	adc.w	r3, r2, r3
 8004910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004914:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004918:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800491c:	f7fb fcc0 	bl	80002a0 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4b61      	ldr	r3, [pc, #388]	; (8004aac <UART_SetConfig+0x528>)
 8004926:	fba3 2302 	umull	r2, r3, r3, r2
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	011c      	lsls	r4, r3, #4
 800492e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004938:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800493c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	67b9      	str	r1, [r7, #120]	; 0x78
 8004948:	415b      	adcs	r3, r3
 800494a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800494c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	6739      	str	r1, [r7, #112]	; 0x70
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	677b      	str	r3, [r7, #116]	; 0x74
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004990:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800499c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80049a0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80049a4:	460b      	mov	r3, r1
 80049a6:	18db      	adds	r3, r3, r3
 80049a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049aa:	4613      	mov	r3, r2
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049b6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80049ba:	f7fb fc71 	bl	80002a0 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <UART_SetConfig+0x528>)
 80049c6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2264      	movs	r2, #100	; 0x64
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	1acb      	subs	r3, r1, r3
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049da:	4b34      	ldr	r3, [pc, #208]	; (8004aac <UART_SetConfig+0x528>)
 80049dc:	fba3 2302 	umull	r2, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049e8:	441c      	add	r4, r3
 80049ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80049f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80049f8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	6639      	str	r1, [r7, #96]	; 0x60
 8004a04:	415b      	adcs	r3, r3
 8004a06:	667b      	str	r3, [r7, #100]	; 0x64
 8004a08:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	1851      	adds	r1, r2, r1
 8004a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a12:	4649      	mov	r1, r9
 8004a14:	414b      	adcs	r3, r1
 8004a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8004a24:	4659      	mov	r1, fp
 8004a26:	00cb      	lsls	r3, r1, #3
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2e:	4651      	mov	r1, sl
 8004a30:	00ca      	lsls	r2, r1, #3
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004a40:	464b      	mov	r3, r9
 8004a42:	460a      	mov	r2, r1
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004a4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004a58:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004a5c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8004a60:	460b      	mov	r3, r1
 8004a62:	18db      	adds	r3, r3, r3
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
 8004a66:	4613      	mov	r3, r2
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a72:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8004a76:	f7fb fc13 	bl	80002a0 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <UART_SetConfig+0x528>)
 8004a80:	fba3 1302 	umull	r1, r3, r3, r2
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	2164      	movs	r1, #100	; 0x64
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	3332      	adds	r3, #50	; 0x32
 8004a92:	4a06      	ldr	r2, [pc, #24]	; (8004aac <UART_SetConfig+0x528>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	f003 0207 	and.w	r2, r3, #7
 8004a9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4422      	add	r2, r4
 8004aa6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004aa8:	e232      	b.n	8004f10 <UART_SetConfig+0x98c>
 8004aaa:	bf00      	nop
 8004aac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ab0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <UART_SetConfig+0x768>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d006      	beq.n	8004aca <UART_SetConfig+0x546>
 8004abc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <UART_SetConfig+0x76c>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 8117 	bne.w	8004cf8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aca:	f7fe fe41 	bl	8003750 <HAL_RCC_GetPCLK2Freq>
 8004ace:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004adc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004ae0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aec:	415b      	adcs	r3, r3
 8004aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004af4:	4621      	mov	r1, r4
 8004af6:	eb12 0801 	adds.w	r8, r2, r1
 8004afa:	4629      	mov	r1, r5
 8004afc:	eb43 0901 	adc.w	r9, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b14:	4690      	mov	r8, r2
 8004b16:	4699      	mov	r9, r3
 8004b18:	4623      	mov	r3, r4
 8004b1a:	eb18 0303 	adds.w	r3, r8, r3
 8004b1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004b22:	462b      	mov	r3, r5
 8004b24:	eb49 0303 	adc.w	r3, r9, r3
 8004b28:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004b2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b38:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004b48:	4629      	mov	r1, r5
 8004b4a:	008b      	lsls	r3, r1, #2
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b52:	4621      	mov	r1, r4
 8004b54:	008a      	lsls	r2, r1, #2
 8004b56:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8004b5a:	f7fb fba1 	bl	80002a0 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4b64      	ldr	r3, [pc, #400]	; (8004cf4 <UART_SetConfig+0x770>)
 8004b64:	fba3 2302 	umull	r2, r3, r3, r2
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	011c      	lsls	r4, r3, #4
 8004b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004b76:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004b7a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	6439      	str	r1, [r7, #64]	; 0x40
 8004b86:	415b      	adcs	r3, r3
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b8e:	4641      	mov	r1, r8
 8004b90:	1851      	adds	r1, r2, r1
 8004b92:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b94:	4649      	mov	r1, r9
 8004b96:	414b      	adcs	r3, r1
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	00cb      	lsls	r3, r1, #3
 8004baa:	4651      	mov	r1, sl
 8004bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	00ca      	lsls	r2, r1, #3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4642      	mov	r2, r8
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	eb42 0303 	adc.w	r3, r2, r3
 8004bca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004bce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004bda:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004bea:	4649      	mov	r1, r9
 8004bec:	008b      	lsls	r3, r1, #2
 8004bee:	4641      	mov	r1, r8
 8004bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	008a      	lsls	r2, r1, #2
 8004bf8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004bfc:	f7fb fb50 	bl	80002a0 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <UART_SetConfig+0x770>)
 8004c06:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2164      	movs	r1, #100	; 0x64
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	3332      	adds	r3, #50	; 0x32
 8004c18:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <UART_SetConfig+0x770>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c24:	441c      	add	r4, r3
 8004c26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004c30:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004c34:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	6339      	str	r1, [r7, #48]	; 0x30
 8004c40:	415b      	adcs	r3, r3
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
 8004c44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c48:	4641      	mov	r1, r8
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c4e:	4649      	mov	r1, r9
 8004c50:	414b      	adcs	r3, r1
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8004c60:	4659      	mov	r1, fp
 8004c62:	00cb      	lsls	r3, r1, #3
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	00ca      	lsls	r2, r1, #3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	4642      	mov	r2, r8
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c94:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004cb6:	f7fb faf3 	bl	80002a0 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <UART_SetConfig+0x770>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <UART_SetConfig+0x770>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 020f 	and.w	r2, r3, #15
 8004cde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4422      	add	r2, r4
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	e112      	b.n	8004f10 <UART_SetConfig+0x98c>
 8004cea:	bf00      	nop
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40011400 	.word	0x40011400
 8004cf4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7fe fd16 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d0a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d0e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004d12:	4642      	mov	r2, r8
 8004d14:	464b      	mov	r3, r9
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	6239      	str	r1, [r7, #32]
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d22:	4641      	mov	r1, r8
 8004d24:	1854      	adds	r4, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb43 0501 	adc.w	r5, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	00eb      	lsls	r3, r5, #3
 8004d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d3a:	00e2      	lsls	r2, r4, #3
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	461d      	mov	r5, r3
 8004d40:	4643      	mov	r3, r8
 8004d42:	18e3      	adds	r3, r4, r3
 8004d44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004d48:	464b      	mov	r3, r9
 8004d4a:	eb45 0303 	adc.w	r3, r5, r3
 8004d4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d52:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d5e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004d6e:	4629      	mov	r1, r5
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d78:	4621      	mov	r1, r4
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004d80:	f7fb fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b64      	ldr	r3, [pc, #400]	; (8004f1c <UART_SetConfig+0x998>)
 8004d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	011c      	lsls	r4, r3, #4
 8004d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d9c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004da0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	61b9      	str	r1, [r7, #24]
 8004dac:	415b      	adcs	r3, r3
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db4:	4641      	mov	r1, r8
 8004db6:	1851      	adds	r1, r2, r1
 8004db8:	6139      	str	r1, [r7, #16]
 8004dba:	4649      	mov	r1, r9
 8004dbc:	414b      	adcs	r3, r1
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dcc:	4659      	mov	r1, fp
 8004dce:	00cb      	lsls	r3, r1, #3
 8004dd0:	4651      	mov	r1, sl
 8004dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	00ca      	lsls	r2, r1, #3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	4642      	mov	r2, r8
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004de8:	464b      	mov	r3, r9
 8004dea:	460a      	mov	r2, r1
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004df4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e00:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004e10:	4649      	mov	r1, r9
 8004e12:	008b      	lsls	r3, r1, #2
 8004e14:	4641      	mov	r1, r8
 8004e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	008a      	lsls	r2, r1, #2
 8004e1e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004e22:	f7fb fa3d 	bl	80002a0 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <UART_SetConfig+0x998>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a37      	ldr	r2, [pc, #220]	; (8004f1c <UART_SetConfig+0x998>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4a:	441c      	add	r4, r3
 8004e4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e5a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004e5e:	4642      	mov	r2, r8
 8004e60:	464b      	mov	r3, r9
 8004e62:	1891      	adds	r1, r2, r2
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	415b      	adcs	r3, r3
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6e:	4641      	mov	r1, r8
 8004e70:	1851      	adds	r1, r2, r1
 8004e72:	6039      	str	r1, [r7, #0]
 8004e74:	4649      	mov	r1, r9
 8004e76:	414b      	adcs	r3, r1
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e86:	4659      	mov	r1, fp
 8004e88:	00cb      	lsls	r3, r1, #3
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e90:	4651      	mov	r1, sl
 8004e92:	00ca      	lsls	r2, r1, #3
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	eb42 0303 	adc.w	r3, r2, r3
 8004eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004eca:	4649      	mov	r1, r9
 8004ecc:	008b      	lsls	r3, r1, #2
 8004ece:	4641      	mov	r1, r8
 8004ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	008a      	lsls	r2, r1, #2
 8004ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004edc:	f7fb f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <UART_SetConfig+0x998>)
 8004ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2164      	movs	r1, #100	; 0x64
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <UART_SetConfig+0x998>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4422      	add	r2, r4
 8004f0c:	609a      	str	r2, [r3, #8]
}
 8004f0e:	e7ff      	b.n	8004f10 <UART_SetConfig+0x98c>
 8004f10:	bf00      	nop
 8004f12:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <__errno>:
 8004f20:	4b01      	ldr	r3, [pc, #4]	; (8004f28 <__errno+0x8>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	2000000c 	.word	0x2000000c

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4d0d      	ldr	r5, [pc, #52]	; (8004f64 <__libc_init_array+0x38>)
 8004f30:	4c0d      	ldr	r4, [pc, #52]	; (8004f68 <__libc_init_array+0x3c>)
 8004f32:	1b64      	subs	r4, r4, r5
 8004f34:	10a4      	asrs	r4, r4, #2
 8004f36:	2600      	movs	r6, #0
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	4d0b      	ldr	r5, [pc, #44]	; (8004f6c <__libc_init_array+0x40>)
 8004f3e:	4c0c      	ldr	r4, [pc, #48]	; (8004f70 <__libc_init_array+0x44>)
 8004f40:	f001 f9a6 	bl	8006290 <_init>
 8004f44:	1b64      	subs	r4, r4, r5
 8004f46:	10a4      	asrs	r4, r4, #2
 8004f48:	2600      	movs	r6, #0
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	080063ac 	.word	0x080063ac
 8004f68:	080063ac 	.word	0x080063ac
 8004f6c:	080063ac 	.word	0x080063ac
 8004f70:	080063b0 	.word	0x080063b0

08004f74 <memset>:
 8004f74:	4402      	add	r2, r0
 8004f76:	4603      	mov	r3, r0
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d100      	bne.n	8004f7e <memset+0xa>
 8004f7c:	4770      	bx	lr
 8004f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f82:	e7f9      	b.n	8004f78 <memset+0x4>

08004f84 <iprintf>:
 8004f84:	b40f      	push	{r0, r1, r2, r3}
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <iprintf+0x2c>)
 8004f88:	b513      	push	{r0, r1, r4, lr}
 8004f8a:	681c      	ldr	r4, [r3, #0]
 8004f8c:	b124      	cbz	r4, 8004f98 <iprintf+0x14>
 8004f8e:	69a3      	ldr	r3, [r4, #24]
 8004f90:	b913      	cbnz	r3, 8004f98 <iprintf+0x14>
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f8a2 	bl	80050dc <__sinit>
 8004f98:	ab05      	add	r3, sp, #20
 8004f9a:	9a04      	ldr	r2, [sp, #16]
 8004f9c:	68a1      	ldr	r1, [r4, #8]
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fb55 	bl	8005650 <_vfiprintf_r>
 8004fa6:	b002      	add	sp, #8
 8004fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fac:	b004      	add	sp, #16
 8004fae:	4770      	bx	lr
 8004fb0:	2000000c 	.word	0x2000000c

08004fb4 <sniprintf>:
 8004fb4:	b40c      	push	{r2, r3}
 8004fb6:	b530      	push	{r4, r5, lr}
 8004fb8:	4b17      	ldr	r3, [pc, #92]	; (8005018 <sniprintf+0x64>)
 8004fba:	1e0c      	subs	r4, r1, #0
 8004fbc:	681d      	ldr	r5, [r3, #0]
 8004fbe:	b09d      	sub	sp, #116	; 0x74
 8004fc0:	da08      	bge.n	8004fd4 <sniprintf+0x20>
 8004fc2:	238b      	movs	r3, #139	; 0x8b
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	b01d      	add	sp, #116	; 0x74
 8004fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd0:	b002      	add	sp, #8
 8004fd2:	4770      	bx	lr
 8004fd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004fd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004fdc:	bf14      	ite	ne
 8004fde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004fe2:	4623      	moveq	r3, r4
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fec:	9002      	str	r0, [sp, #8]
 8004fee:	9006      	str	r0, [sp, #24]
 8004ff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ff4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004ff6:	ab21      	add	r3, sp, #132	; 0x84
 8004ff8:	a902      	add	r1, sp, #8
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	f000 f9fd 	bl	80053fc <_svfiprintf_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	bfbc      	itt	lt
 8005006:	238b      	movlt	r3, #139	; 0x8b
 8005008:	602b      	strlt	r3, [r5, #0]
 800500a:	2c00      	cmp	r4, #0
 800500c:	d0dd      	beq.n	8004fca <sniprintf+0x16>
 800500e:	9b02      	ldr	r3, [sp, #8]
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e7d9      	b.n	8004fca <sniprintf+0x16>
 8005016:	bf00      	nop
 8005018:	2000000c 	.word	0x2000000c

0800501c <strcpy>:
 800501c:	4603      	mov	r3, r0
 800501e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005022:	f803 2b01 	strb.w	r2, [r3], #1
 8005026:	2a00      	cmp	r2, #0
 8005028:	d1f9      	bne.n	800501e <strcpy+0x2>
 800502a:	4770      	bx	lr

0800502c <std>:
 800502c:	2300      	movs	r3, #0
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	e9c0 3300 	strd	r3, r3, [r0]
 8005036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800503a:	6083      	str	r3, [r0, #8]
 800503c:	8181      	strh	r1, [r0, #12]
 800503e:	6643      	str	r3, [r0, #100]	; 0x64
 8005040:	81c2      	strh	r2, [r0, #14]
 8005042:	6183      	str	r3, [r0, #24]
 8005044:	4619      	mov	r1, r3
 8005046:	2208      	movs	r2, #8
 8005048:	305c      	adds	r0, #92	; 0x5c
 800504a:	f7ff ff93 	bl	8004f74 <memset>
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <std+0x38>)
 8005050:	6263      	str	r3, [r4, #36]	; 0x24
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <std+0x3c>)
 8005054:	62a3      	str	r3, [r4, #40]	; 0x28
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <std+0x40>)
 8005058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x44>)
 800505c:	6224      	str	r4, [r4, #32]
 800505e:	6323      	str	r3, [r4, #48]	; 0x30
 8005060:	bd10      	pop	{r4, pc}
 8005062:	bf00      	nop
 8005064:	08005bf9 	.word	0x08005bf9
 8005068:	08005c1b 	.word	0x08005c1b
 800506c:	08005c53 	.word	0x08005c53
 8005070:	08005c77 	.word	0x08005c77

08005074 <_cleanup_r>:
 8005074:	4901      	ldr	r1, [pc, #4]	; (800507c <_cleanup_r+0x8>)
 8005076:	f000 b8af 	b.w	80051d8 <_fwalk_reent>
 800507a:	bf00      	nop
 800507c:	08005f51 	.word	0x08005f51

08005080 <__sfmoreglue>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	2268      	movs	r2, #104	; 0x68
 8005084:	1e4d      	subs	r5, r1, #1
 8005086:	4355      	muls	r5, r2
 8005088:	460e      	mov	r6, r1
 800508a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800508e:	f000 f8e5 	bl	800525c <_malloc_r>
 8005092:	4604      	mov	r4, r0
 8005094:	b140      	cbz	r0, 80050a8 <__sfmoreglue+0x28>
 8005096:	2100      	movs	r1, #0
 8005098:	e9c0 1600 	strd	r1, r6, [r0]
 800509c:	300c      	adds	r0, #12
 800509e:	60a0      	str	r0, [r4, #8]
 80050a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050a4:	f7ff ff66 	bl	8004f74 <memset>
 80050a8:	4620      	mov	r0, r4
 80050aa:	bd70      	pop	{r4, r5, r6, pc}

080050ac <__sfp_lock_acquire>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__sfp_lock_acquire+0x8>)
 80050ae:	f000 b8b3 	b.w	8005218 <__retarget_lock_acquire_recursive>
 80050b2:	bf00      	nop
 80050b4:	20000265 	.word	0x20000265

080050b8 <__sfp_lock_release>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__sfp_lock_release+0x8>)
 80050ba:	f000 b8ae 	b.w	800521a <__retarget_lock_release_recursive>
 80050be:	bf00      	nop
 80050c0:	20000265 	.word	0x20000265

080050c4 <__sinit_lock_acquire>:
 80050c4:	4801      	ldr	r0, [pc, #4]	; (80050cc <__sinit_lock_acquire+0x8>)
 80050c6:	f000 b8a7 	b.w	8005218 <__retarget_lock_acquire_recursive>
 80050ca:	bf00      	nop
 80050cc:	20000266 	.word	0x20000266

080050d0 <__sinit_lock_release>:
 80050d0:	4801      	ldr	r0, [pc, #4]	; (80050d8 <__sinit_lock_release+0x8>)
 80050d2:	f000 b8a2 	b.w	800521a <__retarget_lock_release_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000266 	.word	0x20000266

080050dc <__sinit>:
 80050dc:	b510      	push	{r4, lr}
 80050de:	4604      	mov	r4, r0
 80050e0:	f7ff fff0 	bl	80050c4 <__sinit_lock_acquire>
 80050e4:	69a3      	ldr	r3, [r4, #24]
 80050e6:	b11b      	cbz	r3, 80050f0 <__sinit+0x14>
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	f7ff bff0 	b.w	80050d0 <__sinit_lock_release>
 80050f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050f4:	6523      	str	r3, [r4, #80]	; 0x50
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <__sinit+0x68>)
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <__sinit+0x6c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80050fe:	42a3      	cmp	r3, r4
 8005100:	bf04      	itt	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	61a3      	streq	r3, [r4, #24]
 8005106:	4620      	mov	r0, r4
 8005108:	f000 f820 	bl	800514c <__sfp>
 800510c:	6060      	str	r0, [r4, #4]
 800510e:	4620      	mov	r0, r4
 8005110:	f000 f81c 	bl	800514c <__sfp>
 8005114:	60a0      	str	r0, [r4, #8]
 8005116:	4620      	mov	r0, r4
 8005118:	f000 f818 	bl	800514c <__sfp>
 800511c:	2200      	movs	r2, #0
 800511e:	60e0      	str	r0, [r4, #12]
 8005120:	2104      	movs	r1, #4
 8005122:	6860      	ldr	r0, [r4, #4]
 8005124:	f7ff ff82 	bl	800502c <std>
 8005128:	68a0      	ldr	r0, [r4, #8]
 800512a:	2201      	movs	r2, #1
 800512c:	2109      	movs	r1, #9
 800512e:	f7ff ff7d 	bl	800502c <std>
 8005132:	68e0      	ldr	r0, [r4, #12]
 8005134:	2202      	movs	r2, #2
 8005136:	2112      	movs	r1, #18
 8005138:	f7ff ff78 	bl	800502c <std>
 800513c:	2301      	movs	r3, #1
 800513e:	61a3      	str	r3, [r4, #24]
 8005140:	e7d2      	b.n	80050e8 <__sinit+0xc>
 8005142:	bf00      	nop
 8005144:	0800630c 	.word	0x0800630c
 8005148:	08005075 	.word	0x08005075

0800514c <__sfp>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	4607      	mov	r7, r0
 8005150:	f7ff ffac 	bl	80050ac <__sfp_lock_acquire>
 8005154:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <__sfp+0x84>)
 8005156:	681e      	ldr	r6, [r3, #0]
 8005158:	69b3      	ldr	r3, [r6, #24]
 800515a:	b913      	cbnz	r3, 8005162 <__sfp+0x16>
 800515c:	4630      	mov	r0, r6
 800515e:	f7ff ffbd 	bl	80050dc <__sinit>
 8005162:	3648      	adds	r6, #72	; 0x48
 8005164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005168:	3b01      	subs	r3, #1
 800516a:	d503      	bpl.n	8005174 <__sfp+0x28>
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	b30b      	cbz	r3, 80051b4 <__sfp+0x68>
 8005170:	6836      	ldr	r6, [r6, #0]
 8005172:	e7f7      	b.n	8005164 <__sfp+0x18>
 8005174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005178:	b9d5      	cbnz	r5, 80051b0 <__sfp+0x64>
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <__sfp+0x88>)
 800517c:	60e3      	str	r3, [r4, #12]
 800517e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005182:	6665      	str	r5, [r4, #100]	; 0x64
 8005184:	f000 f847 	bl	8005216 <__retarget_lock_init_recursive>
 8005188:	f7ff ff96 	bl	80050b8 <__sfp_lock_release>
 800518c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005194:	6025      	str	r5, [r4, #0]
 8005196:	61a5      	str	r5, [r4, #24]
 8005198:	2208      	movs	r2, #8
 800519a:	4629      	mov	r1, r5
 800519c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051a0:	f7ff fee8 	bl	8004f74 <memset>
 80051a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051ac:	4620      	mov	r0, r4
 80051ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b0:	3468      	adds	r4, #104	; 0x68
 80051b2:	e7d9      	b.n	8005168 <__sfp+0x1c>
 80051b4:	2104      	movs	r1, #4
 80051b6:	4638      	mov	r0, r7
 80051b8:	f7ff ff62 	bl	8005080 <__sfmoreglue>
 80051bc:	4604      	mov	r4, r0
 80051be:	6030      	str	r0, [r6, #0]
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d1d5      	bne.n	8005170 <__sfp+0x24>
 80051c4:	f7ff ff78 	bl	80050b8 <__sfp_lock_release>
 80051c8:	230c      	movs	r3, #12
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	e7ee      	b.n	80051ac <__sfp+0x60>
 80051ce:	bf00      	nop
 80051d0:	0800630c 	.word	0x0800630c
 80051d4:	ffff0001 	.word	0xffff0001

080051d8 <_fwalk_reent>:
 80051d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051dc:	4606      	mov	r6, r0
 80051de:	4688      	mov	r8, r1
 80051e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051e4:	2700      	movs	r7, #0
 80051e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051ea:	f1b9 0901 	subs.w	r9, r9, #1
 80051ee:	d505      	bpl.n	80051fc <_fwalk_reent+0x24>
 80051f0:	6824      	ldr	r4, [r4, #0]
 80051f2:	2c00      	cmp	r4, #0
 80051f4:	d1f7      	bne.n	80051e6 <_fwalk_reent+0xe>
 80051f6:	4638      	mov	r0, r7
 80051f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051fc:	89ab      	ldrh	r3, [r5, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d907      	bls.n	8005212 <_fwalk_reent+0x3a>
 8005202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005206:	3301      	adds	r3, #1
 8005208:	d003      	beq.n	8005212 <_fwalk_reent+0x3a>
 800520a:	4629      	mov	r1, r5
 800520c:	4630      	mov	r0, r6
 800520e:	47c0      	blx	r8
 8005210:	4307      	orrs	r7, r0
 8005212:	3568      	adds	r5, #104	; 0x68
 8005214:	e7e9      	b.n	80051ea <_fwalk_reent+0x12>

08005216 <__retarget_lock_init_recursive>:
 8005216:	4770      	bx	lr

08005218 <__retarget_lock_acquire_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_release_recursive>:
 800521a:	4770      	bx	lr

0800521c <sbrk_aligned>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4e0e      	ldr	r6, [pc, #56]	; (8005258 <sbrk_aligned+0x3c>)
 8005220:	460c      	mov	r4, r1
 8005222:	6831      	ldr	r1, [r6, #0]
 8005224:	4605      	mov	r5, r0
 8005226:	b911      	cbnz	r1, 800522e <sbrk_aligned+0x12>
 8005228:	f000 fcd6 	bl	8005bd8 <_sbrk_r>
 800522c:	6030      	str	r0, [r6, #0]
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fcd1 	bl	8005bd8 <_sbrk_r>
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	d00a      	beq.n	8005250 <sbrk_aligned+0x34>
 800523a:	1cc4      	adds	r4, r0, #3
 800523c:	f024 0403 	bic.w	r4, r4, #3
 8005240:	42a0      	cmp	r0, r4
 8005242:	d007      	beq.n	8005254 <sbrk_aligned+0x38>
 8005244:	1a21      	subs	r1, r4, r0
 8005246:	4628      	mov	r0, r5
 8005248:	f000 fcc6 	bl	8005bd8 <_sbrk_r>
 800524c:	3001      	adds	r0, #1
 800524e:	d101      	bne.n	8005254 <sbrk_aligned+0x38>
 8005250:	f04f 34ff 	mov.w	r4, #4294967295
 8005254:	4620      	mov	r0, r4
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	2000026c 	.word	0x2000026c

0800525c <_malloc_r>:
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4607      	mov	r7, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d905      	bls.n	8005284 <_malloc_r+0x28>
 8005278:	230c      	movs	r3, #12
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	2600      	movs	r6, #0
 800527e:	4630      	mov	r0, r6
 8005280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005284:	4e2e      	ldr	r6, [pc, #184]	; (8005340 <_malloc_r+0xe4>)
 8005286:	f000 ff3f 	bl	8006108 <__malloc_lock>
 800528a:	6833      	ldr	r3, [r6, #0]
 800528c:	461c      	mov	r4, r3
 800528e:	bb34      	cbnz	r4, 80052de <_malloc_r+0x82>
 8005290:	4629      	mov	r1, r5
 8005292:	4638      	mov	r0, r7
 8005294:	f7ff ffc2 	bl	800521c <sbrk_aligned>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	4604      	mov	r4, r0
 800529c:	d14d      	bne.n	800533a <_malloc_r+0xde>
 800529e:	6834      	ldr	r4, [r6, #0]
 80052a0:	4626      	mov	r6, r4
 80052a2:	2e00      	cmp	r6, #0
 80052a4:	d140      	bne.n	8005328 <_malloc_r+0xcc>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	4631      	mov	r1, r6
 80052aa:	4638      	mov	r0, r7
 80052ac:	eb04 0803 	add.w	r8, r4, r3
 80052b0:	f000 fc92 	bl	8005bd8 <_sbrk_r>
 80052b4:	4580      	cmp	r8, r0
 80052b6:	d13a      	bne.n	800532e <_malloc_r+0xd2>
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	3503      	adds	r5, #3
 80052bc:	1a6d      	subs	r5, r5, r1
 80052be:	f025 0503 	bic.w	r5, r5, #3
 80052c2:	3508      	adds	r5, #8
 80052c4:	2d0c      	cmp	r5, #12
 80052c6:	bf38      	it	cc
 80052c8:	250c      	movcc	r5, #12
 80052ca:	4629      	mov	r1, r5
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff ffa5 	bl	800521c <sbrk_aligned>
 80052d2:	3001      	adds	r0, #1
 80052d4:	d02b      	beq.n	800532e <_malloc_r+0xd2>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	442b      	add	r3, r5
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	e00e      	b.n	80052fc <_malloc_r+0xa0>
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	1b52      	subs	r2, r2, r5
 80052e2:	d41e      	bmi.n	8005322 <_malloc_r+0xc6>
 80052e4:	2a0b      	cmp	r2, #11
 80052e6:	d916      	bls.n	8005316 <_malloc_r+0xba>
 80052e8:	1961      	adds	r1, r4, r5
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	6025      	str	r5, [r4, #0]
 80052ee:	bf18      	it	ne
 80052f0:	6059      	strne	r1, [r3, #4]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	bf08      	it	eq
 80052f6:	6031      	streq	r1, [r6, #0]
 80052f8:	5162      	str	r2, [r4, r5]
 80052fa:	604b      	str	r3, [r1, #4]
 80052fc:	4638      	mov	r0, r7
 80052fe:	f104 060b 	add.w	r6, r4, #11
 8005302:	f000 ff07 	bl	8006114 <__malloc_unlock>
 8005306:	f026 0607 	bic.w	r6, r6, #7
 800530a:	1d23      	adds	r3, r4, #4
 800530c:	1af2      	subs	r2, r6, r3
 800530e:	d0b6      	beq.n	800527e <_malloc_r+0x22>
 8005310:	1b9b      	subs	r3, r3, r6
 8005312:	50a3      	str	r3, [r4, r2]
 8005314:	e7b3      	b.n	800527e <_malloc_r+0x22>
 8005316:	6862      	ldr	r2, [r4, #4]
 8005318:	42a3      	cmp	r3, r4
 800531a:	bf0c      	ite	eq
 800531c:	6032      	streq	r2, [r6, #0]
 800531e:	605a      	strne	r2, [r3, #4]
 8005320:	e7ec      	b.n	80052fc <_malloc_r+0xa0>
 8005322:	4623      	mov	r3, r4
 8005324:	6864      	ldr	r4, [r4, #4]
 8005326:	e7b2      	b.n	800528e <_malloc_r+0x32>
 8005328:	4634      	mov	r4, r6
 800532a:	6876      	ldr	r6, [r6, #4]
 800532c:	e7b9      	b.n	80052a2 <_malloc_r+0x46>
 800532e:	230c      	movs	r3, #12
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4638      	mov	r0, r7
 8005334:	f000 feee 	bl	8006114 <__malloc_unlock>
 8005338:	e7a1      	b.n	800527e <_malloc_r+0x22>
 800533a:	6025      	str	r5, [r4, #0]
 800533c:	e7de      	b.n	80052fc <_malloc_r+0xa0>
 800533e:	bf00      	nop
 8005340:	20000268 	.word	0x20000268

08005344 <__ssputs_r>:
 8005344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	688e      	ldr	r6, [r1, #8]
 800534a:	429e      	cmp	r6, r3
 800534c:	4682      	mov	sl, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4690      	mov	r8, r2
 8005352:	461f      	mov	r7, r3
 8005354:	d838      	bhi.n	80053c8 <__ssputs_r+0x84>
 8005356:	898a      	ldrh	r2, [r1, #12]
 8005358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800535c:	d032      	beq.n	80053c4 <__ssputs_r+0x80>
 800535e:	6825      	ldr	r5, [r4, #0]
 8005360:	6909      	ldr	r1, [r1, #16]
 8005362:	eba5 0901 	sub.w	r9, r5, r1
 8005366:	6965      	ldr	r5, [r4, #20]
 8005368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800536c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005370:	3301      	adds	r3, #1
 8005372:	444b      	add	r3, r9
 8005374:	106d      	asrs	r5, r5, #1
 8005376:	429d      	cmp	r5, r3
 8005378:	bf38      	it	cc
 800537a:	461d      	movcc	r5, r3
 800537c:	0553      	lsls	r3, r2, #21
 800537e:	d531      	bpl.n	80053e4 <__ssputs_r+0xa0>
 8005380:	4629      	mov	r1, r5
 8005382:	f7ff ff6b 	bl	800525c <_malloc_r>
 8005386:	4606      	mov	r6, r0
 8005388:	b950      	cbnz	r0, 80053a0 <__ssputs_r+0x5c>
 800538a:	230c      	movs	r3, #12
 800538c:	f8ca 3000 	str.w	r3, [sl]
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	6921      	ldr	r1, [r4, #16]
 80053a2:	464a      	mov	r2, r9
 80053a4:	f000 fe88 	bl	80060b8 <memcpy>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	6126      	str	r6, [r4, #16]
 80053b6:	6165      	str	r5, [r4, #20]
 80053b8:	444e      	add	r6, r9
 80053ba:	eba5 0509 	sub.w	r5, r5, r9
 80053be:	6026      	str	r6, [r4, #0]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	463e      	mov	r6, r7
 80053c4:	42be      	cmp	r6, r7
 80053c6:	d900      	bls.n	80053ca <__ssputs_r+0x86>
 80053c8:	463e      	mov	r6, r7
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	4632      	mov	r2, r6
 80053ce:	4641      	mov	r1, r8
 80053d0:	f000 fe80 	bl	80060d4 <memmove>
 80053d4:	68a3      	ldr	r3, [r4, #8]
 80053d6:	1b9b      	subs	r3, r3, r6
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4433      	add	r3, r6
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	2000      	movs	r0, #0
 80053e2:	e7db      	b.n	800539c <__ssputs_r+0x58>
 80053e4:	462a      	mov	r2, r5
 80053e6:	f000 fee7 	bl	80061b8 <_realloc_r>
 80053ea:	4606      	mov	r6, r0
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1e1      	bne.n	80053b4 <__ssputs_r+0x70>
 80053f0:	6921      	ldr	r1, [r4, #16]
 80053f2:	4650      	mov	r0, sl
 80053f4:	f000 fe94 	bl	8006120 <_free_r>
 80053f8:	e7c7      	b.n	800538a <__ssputs_r+0x46>
	...

080053fc <_svfiprintf_r>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	4698      	mov	r8, r3
 8005402:	898b      	ldrh	r3, [r1, #12]
 8005404:	061b      	lsls	r3, r3, #24
 8005406:	b09d      	sub	sp, #116	; 0x74
 8005408:	4607      	mov	r7, r0
 800540a:	460d      	mov	r5, r1
 800540c:	4614      	mov	r4, r2
 800540e:	d50e      	bpl.n	800542e <_svfiprintf_r+0x32>
 8005410:	690b      	ldr	r3, [r1, #16]
 8005412:	b963      	cbnz	r3, 800542e <_svfiprintf_r+0x32>
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	f7ff ff21 	bl	800525c <_malloc_r>
 800541a:	6028      	str	r0, [r5, #0]
 800541c:	6128      	str	r0, [r5, #16]
 800541e:	b920      	cbnz	r0, 800542a <_svfiprintf_r+0x2e>
 8005420:	230c      	movs	r3, #12
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e0d1      	b.n	80055ce <_svfiprintf_r+0x1d2>
 800542a:	2340      	movs	r3, #64	; 0x40
 800542c:	616b      	str	r3, [r5, #20]
 800542e:	2300      	movs	r3, #0
 8005430:	9309      	str	r3, [sp, #36]	; 0x24
 8005432:	2320      	movs	r3, #32
 8005434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005438:	f8cd 800c 	str.w	r8, [sp, #12]
 800543c:	2330      	movs	r3, #48	; 0x30
 800543e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055e8 <_svfiprintf_r+0x1ec>
 8005442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005446:	f04f 0901 	mov.w	r9, #1
 800544a:	4623      	mov	r3, r4
 800544c:	469a      	mov	sl, r3
 800544e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005452:	b10a      	cbz	r2, 8005458 <_svfiprintf_r+0x5c>
 8005454:	2a25      	cmp	r2, #37	; 0x25
 8005456:	d1f9      	bne.n	800544c <_svfiprintf_r+0x50>
 8005458:	ebba 0b04 	subs.w	fp, sl, r4
 800545c:	d00b      	beq.n	8005476 <_svfiprintf_r+0x7a>
 800545e:	465b      	mov	r3, fp
 8005460:	4622      	mov	r2, r4
 8005462:	4629      	mov	r1, r5
 8005464:	4638      	mov	r0, r7
 8005466:	f7ff ff6d 	bl	8005344 <__ssputs_r>
 800546a:	3001      	adds	r0, #1
 800546c:	f000 80aa 	beq.w	80055c4 <_svfiprintf_r+0x1c8>
 8005470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005472:	445a      	add	r2, fp
 8005474:	9209      	str	r2, [sp, #36]	; 0x24
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80a2 	beq.w	80055c4 <_svfiprintf_r+0x1c8>
 8005480:	2300      	movs	r3, #0
 8005482:	f04f 32ff 	mov.w	r2, #4294967295
 8005486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800548a:	f10a 0a01 	add.w	sl, sl, #1
 800548e:	9304      	str	r3, [sp, #16]
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005496:	931a      	str	r3, [sp, #104]	; 0x68
 8005498:	4654      	mov	r4, sl
 800549a:	2205      	movs	r2, #5
 800549c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a0:	4851      	ldr	r0, [pc, #324]	; (80055e8 <_svfiprintf_r+0x1ec>)
 80054a2:	f7fa fead 	bl	8000200 <memchr>
 80054a6:	9a04      	ldr	r2, [sp, #16]
 80054a8:	b9d8      	cbnz	r0, 80054e2 <_svfiprintf_r+0xe6>
 80054aa:	06d0      	lsls	r0, r2, #27
 80054ac:	bf44      	itt	mi
 80054ae:	2320      	movmi	r3, #32
 80054b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054b4:	0711      	lsls	r1, r2, #28
 80054b6:	bf44      	itt	mi
 80054b8:	232b      	movmi	r3, #43	; 0x2b
 80054ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054be:	f89a 3000 	ldrb.w	r3, [sl]
 80054c2:	2b2a      	cmp	r3, #42	; 0x2a
 80054c4:	d015      	beq.n	80054f2 <_svfiprintf_r+0xf6>
 80054c6:	9a07      	ldr	r2, [sp, #28]
 80054c8:	4654      	mov	r4, sl
 80054ca:	2000      	movs	r0, #0
 80054cc:	f04f 0c0a 	mov.w	ip, #10
 80054d0:	4621      	mov	r1, r4
 80054d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054d6:	3b30      	subs	r3, #48	; 0x30
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d94e      	bls.n	800557a <_svfiprintf_r+0x17e>
 80054dc:	b1b0      	cbz	r0, 800550c <_svfiprintf_r+0x110>
 80054de:	9207      	str	r2, [sp, #28]
 80054e0:	e014      	b.n	800550c <_svfiprintf_r+0x110>
 80054e2:	eba0 0308 	sub.w	r3, r0, r8
 80054e6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	46a2      	mov	sl, r4
 80054f0:	e7d2      	b.n	8005498 <_svfiprintf_r+0x9c>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	9103      	str	r1, [sp, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bfbb      	ittet	lt
 80054fe:	425b      	neglt	r3, r3
 8005500:	f042 0202 	orrlt.w	r2, r2, #2
 8005504:	9307      	strge	r3, [sp, #28]
 8005506:	9307      	strlt	r3, [sp, #28]
 8005508:	bfb8      	it	lt
 800550a:	9204      	strlt	r2, [sp, #16]
 800550c:	7823      	ldrb	r3, [r4, #0]
 800550e:	2b2e      	cmp	r3, #46	; 0x2e
 8005510:	d10c      	bne.n	800552c <_svfiprintf_r+0x130>
 8005512:	7863      	ldrb	r3, [r4, #1]
 8005514:	2b2a      	cmp	r3, #42	; 0x2a
 8005516:	d135      	bne.n	8005584 <_svfiprintf_r+0x188>
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	9203      	str	r2, [sp, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	bfb8      	it	lt
 8005524:	f04f 33ff 	movlt.w	r3, #4294967295
 8005528:	3402      	adds	r4, #2
 800552a:	9305      	str	r3, [sp, #20]
 800552c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055f8 <_svfiprintf_r+0x1fc>
 8005530:	7821      	ldrb	r1, [r4, #0]
 8005532:	2203      	movs	r2, #3
 8005534:	4650      	mov	r0, sl
 8005536:	f7fa fe63 	bl	8000200 <memchr>
 800553a:	b140      	cbz	r0, 800554e <_svfiprintf_r+0x152>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	eba0 000a 	sub.w	r0, r0, sl
 8005542:	fa03 f000 	lsl.w	r0, r3, r0
 8005546:	9b04      	ldr	r3, [sp, #16]
 8005548:	4303      	orrs	r3, r0
 800554a:	3401      	adds	r4, #1
 800554c:	9304      	str	r3, [sp, #16]
 800554e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005552:	4826      	ldr	r0, [pc, #152]	; (80055ec <_svfiprintf_r+0x1f0>)
 8005554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005558:	2206      	movs	r2, #6
 800555a:	f7fa fe51 	bl	8000200 <memchr>
 800555e:	2800      	cmp	r0, #0
 8005560:	d038      	beq.n	80055d4 <_svfiprintf_r+0x1d8>
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <_svfiprintf_r+0x1f4>)
 8005564:	bb1b      	cbnz	r3, 80055ae <_svfiprintf_r+0x1b2>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	3307      	adds	r3, #7
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	3308      	adds	r3, #8
 8005570:	9303      	str	r3, [sp, #12]
 8005572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005574:	4433      	add	r3, r6
 8005576:	9309      	str	r3, [sp, #36]	; 0x24
 8005578:	e767      	b.n	800544a <_svfiprintf_r+0x4e>
 800557a:	fb0c 3202 	mla	r2, ip, r2, r3
 800557e:	460c      	mov	r4, r1
 8005580:	2001      	movs	r0, #1
 8005582:	e7a5      	b.n	80054d0 <_svfiprintf_r+0xd4>
 8005584:	2300      	movs	r3, #0
 8005586:	3401      	adds	r4, #1
 8005588:	9305      	str	r3, [sp, #20]
 800558a:	4619      	mov	r1, r3
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	4620      	mov	r0, r4
 8005592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005596:	3a30      	subs	r2, #48	; 0x30
 8005598:	2a09      	cmp	r2, #9
 800559a:	d903      	bls.n	80055a4 <_svfiprintf_r+0x1a8>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0c5      	beq.n	800552c <_svfiprintf_r+0x130>
 80055a0:	9105      	str	r1, [sp, #20]
 80055a2:	e7c3      	b.n	800552c <_svfiprintf_r+0x130>
 80055a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055a8:	4604      	mov	r4, r0
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7f0      	b.n	8005590 <_svfiprintf_r+0x194>
 80055ae:	ab03      	add	r3, sp, #12
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	462a      	mov	r2, r5
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <_svfiprintf_r+0x1f8>)
 80055b6:	a904      	add	r1, sp, #16
 80055b8:	4638      	mov	r0, r7
 80055ba:	f3af 8000 	nop.w
 80055be:	1c42      	adds	r2, r0, #1
 80055c0:	4606      	mov	r6, r0
 80055c2:	d1d6      	bne.n	8005572 <_svfiprintf_r+0x176>
 80055c4:	89ab      	ldrh	r3, [r5, #12]
 80055c6:	065b      	lsls	r3, r3, #25
 80055c8:	f53f af2c 	bmi.w	8005424 <_svfiprintf_r+0x28>
 80055cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ce:	b01d      	add	sp, #116	; 0x74
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d4:	ab03      	add	r3, sp, #12
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	462a      	mov	r2, r5
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <_svfiprintf_r+0x1f8>)
 80055dc:	a904      	add	r1, sp, #16
 80055de:	4638      	mov	r0, r7
 80055e0:	f000 f9d4 	bl	800598c <_printf_i>
 80055e4:	e7eb      	b.n	80055be <_svfiprintf_r+0x1c2>
 80055e6:	bf00      	nop
 80055e8:	08006370 	.word	0x08006370
 80055ec:	0800637a 	.word	0x0800637a
 80055f0:	00000000 	.word	0x00000000
 80055f4:	08005345 	.word	0x08005345
 80055f8:	08006376 	.word	0x08006376

080055fc <__sfputc_r>:
 80055fc:	6893      	ldr	r3, [r2, #8]
 80055fe:	3b01      	subs	r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	b410      	push	{r4}
 8005604:	6093      	str	r3, [r2, #8]
 8005606:	da08      	bge.n	800561a <__sfputc_r+0x1e>
 8005608:	6994      	ldr	r4, [r2, #24]
 800560a:	42a3      	cmp	r3, r4
 800560c:	db01      	blt.n	8005612 <__sfputc_r+0x16>
 800560e:	290a      	cmp	r1, #10
 8005610:	d103      	bne.n	800561a <__sfputc_r+0x1e>
 8005612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005616:	f000 bb33 	b.w	8005c80 <__swbuf_r>
 800561a:	6813      	ldr	r3, [r2, #0]
 800561c:	1c58      	adds	r0, r3, #1
 800561e:	6010      	str	r0, [r2, #0]
 8005620:	7019      	strb	r1, [r3, #0]
 8005622:	4608      	mov	r0, r1
 8005624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005628:	4770      	bx	lr

0800562a <__sfputs_r>:
 800562a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	4614      	mov	r4, r2
 8005632:	18d5      	adds	r5, r2, r3
 8005634:	42ac      	cmp	r4, r5
 8005636:	d101      	bne.n	800563c <__sfputs_r+0x12>
 8005638:	2000      	movs	r0, #0
 800563a:	e007      	b.n	800564c <__sfputs_r+0x22>
 800563c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005640:	463a      	mov	r2, r7
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ffda 	bl	80055fc <__sfputc_r>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d1f3      	bne.n	8005634 <__sfputs_r+0xa>
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005650 <_vfiprintf_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	460d      	mov	r5, r1
 8005656:	b09d      	sub	sp, #116	; 0x74
 8005658:	4614      	mov	r4, r2
 800565a:	4698      	mov	r8, r3
 800565c:	4606      	mov	r6, r0
 800565e:	b118      	cbz	r0, 8005668 <_vfiprintf_r+0x18>
 8005660:	6983      	ldr	r3, [r0, #24]
 8005662:	b90b      	cbnz	r3, 8005668 <_vfiprintf_r+0x18>
 8005664:	f7ff fd3a 	bl	80050dc <__sinit>
 8005668:	4b89      	ldr	r3, [pc, #548]	; (8005890 <_vfiprintf_r+0x240>)
 800566a:	429d      	cmp	r5, r3
 800566c:	d11b      	bne.n	80056a6 <_vfiprintf_r+0x56>
 800566e:	6875      	ldr	r5, [r6, #4]
 8005670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005672:	07d9      	lsls	r1, r3, #31
 8005674:	d405      	bmi.n	8005682 <_vfiprintf_r+0x32>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	059a      	lsls	r2, r3, #22
 800567a:	d402      	bmi.n	8005682 <_vfiprintf_r+0x32>
 800567c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800567e:	f7ff fdcb 	bl	8005218 <__retarget_lock_acquire_recursive>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	071b      	lsls	r3, r3, #28
 8005686:	d501      	bpl.n	800568c <_vfiprintf_r+0x3c>
 8005688:	692b      	ldr	r3, [r5, #16]
 800568a:	b9eb      	cbnz	r3, 80056c8 <_vfiprintf_r+0x78>
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f000 fb5a 	bl	8005d48 <__swsetup_r>
 8005694:	b1c0      	cbz	r0, 80056c8 <_vfiprintf_r+0x78>
 8005696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005698:	07dc      	lsls	r4, r3, #31
 800569a:	d50e      	bpl.n	80056ba <_vfiprintf_r+0x6a>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b01d      	add	sp, #116	; 0x74
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <_vfiprintf_r+0x244>)
 80056a8:	429d      	cmp	r5, r3
 80056aa:	d101      	bne.n	80056b0 <_vfiprintf_r+0x60>
 80056ac:	68b5      	ldr	r5, [r6, #8]
 80056ae:	e7df      	b.n	8005670 <_vfiprintf_r+0x20>
 80056b0:	4b79      	ldr	r3, [pc, #484]	; (8005898 <_vfiprintf_r+0x248>)
 80056b2:	429d      	cmp	r5, r3
 80056b4:	bf08      	it	eq
 80056b6:	68f5      	ldreq	r5, [r6, #12]
 80056b8:	e7da      	b.n	8005670 <_vfiprintf_r+0x20>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	0598      	lsls	r0, r3, #22
 80056be:	d4ed      	bmi.n	800569c <_vfiprintf_r+0x4c>
 80056c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c2:	f7ff fdaa 	bl	800521a <__retarget_lock_release_recursive>
 80056c6:	e7e9      	b.n	800569c <_vfiprintf_r+0x4c>
 80056c8:	2300      	movs	r3, #0
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	2320      	movs	r3, #32
 80056ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d6:	2330      	movs	r3, #48	; 0x30
 80056d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800589c <_vfiprintf_r+0x24c>
 80056dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056e0:	f04f 0901 	mov.w	r9, #1
 80056e4:	4623      	mov	r3, r4
 80056e6:	469a      	mov	sl, r3
 80056e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ec:	b10a      	cbz	r2, 80056f2 <_vfiprintf_r+0xa2>
 80056ee:	2a25      	cmp	r2, #37	; 0x25
 80056f0:	d1f9      	bne.n	80056e6 <_vfiprintf_r+0x96>
 80056f2:	ebba 0b04 	subs.w	fp, sl, r4
 80056f6:	d00b      	beq.n	8005710 <_vfiprintf_r+0xc0>
 80056f8:	465b      	mov	r3, fp
 80056fa:	4622      	mov	r2, r4
 80056fc:	4629      	mov	r1, r5
 80056fe:	4630      	mov	r0, r6
 8005700:	f7ff ff93 	bl	800562a <__sfputs_r>
 8005704:	3001      	adds	r0, #1
 8005706:	f000 80aa 	beq.w	800585e <_vfiprintf_r+0x20e>
 800570a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800570c:	445a      	add	r2, fp
 800570e:	9209      	str	r2, [sp, #36]	; 0x24
 8005710:	f89a 3000 	ldrb.w	r3, [sl]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a2 	beq.w	800585e <_vfiprintf_r+0x20e>
 800571a:	2300      	movs	r3, #0
 800571c:	f04f 32ff 	mov.w	r2, #4294967295
 8005720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005724:	f10a 0a01 	add.w	sl, sl, #1
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	9307      	str	r3, [sp, #28]
 800572c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005730:	931a      	str	r3, [sp, #104]	; 0x68
 8005732:	4654      	mov	r4, sl
 8005734:	2205      	movs	r2, #5
 8005736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573a:	4858      	ldr	r0, [pc, #352]	; (800589c <_vfiprintf_r+0x24c>)
 800573c:	f7fa fd60 	bl	8000200 <memchr>
 8005740:	9a04      	ldr	r2, [sp, #16]
 8005742:	b9d8      	cbnz	r0, 800577c <_vfiprintf_r+0x12c>
 8005744:	06d1      	lsls	r1, r2, #27
 8005746:	bf44      	itt	mi
 8005748:	2320      	movmi	r3, #32
 800574a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574e:	0713      	lsls	r3, r2, #28
 8005750:	bf44      	itt	mi
 8005752:	232b      	movmi	r3, #43	; 0x2b
 8005754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005758:	f89a 3000 	ldrb.w	r3, [sl]
 800575c:	2b2a      	cmp	r3, #42	; 0x2a
 800575e:	d015      	beq.n	800578c <_vfiprintf_r+0x13c>
 8005760:	9a07      	ldr	r2, [sp, #28]
 8005762:	4654      	mov	r4, sl
 8005764:	2000      	movs	r0, #0
 8005766:	f04f 0c0a 	mov.w	ip, #10
 800576a:	4621      	mov	r1, r4
 800576c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005770:	3b30      	subs	r3, #48	; 0x30
 8005772:	2b09      	cmp	r3, #9
 8005774:	d94e      	bls.n	8005814 <_vfiprintf_r+0x1c4>
 8005776:	b1b0      	cbz	r0, 80057a6 <_vfiprintf_r+0x156>
 8005778:	9207      	str	r2, [sp, #28]
 800577a:	e014      	b.n	80057a6 <_vfiprintf_r+0x156>
 800577c:	eba0 0308 	sub.w	r3, r0, r8
 8005780:	fa09 f303 	lsl.w	r3, r9, r3
 8005784:	4313      	orrs	r3, r2
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	46a2      	mov	sl, r4
 800578a:	e7d2      	b.n	8005732 <_vfiprintf_r+0xe2>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	1d19      	adds	r1, r3, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	9103      	str	r1, [sp, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	bfbb      	ittet	lt
 8005798:	425b      	neglt	r3, r3
 800579a:	f042 0202 	orrlt.w	r2, r2, #2
 800579e:	9307      	strge	r3, [sp, #28]
 80057a0:	9307      	strlt	r3, [sp, #28]
 80057a2:	bfb8      	it	lt
 80057a4:	9204      	strlt	r2, [sp, #16]
 80057a6:	7823      	ldrb	r3, [r4, #0]
 80057a8:	2b2e      	cmp	r3, #46	; 0x2e
 80057aa:	d10c      	bne.n	80057c6 <_vfiprintf_r+0x176>
 80057ac:	7863      	ldrb	r3, [r4, #1]
 80057ae:	2b2a      	cmp	r3, #42	; 0x2a
 80057b0:	d135      	bne.n	800581e <_vfiprintf_r+0x1ce>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	1d1a      	adds	r2, r3, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	9203      	str	r2, [sp, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bfb8      	it	lt
 80057be:	f04f 33ff 	movlt.w	r3, #4294967295
 80057c2:	3402      	adds	r4, #2
 80057c4:	9305      	str	r3, [sp, #20]
 80057c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058ac <_vfiprintf_r+0x25c>
 80057ca:	7821      	ldrb	r1, [r4, #0]
 80057cc:	2203      	movs	r2, #3
 80057ce:	4650      	mov	r0, sl
 80057d0:	f7fa fd16 	bl	8000200 <memchr>
 80057d4:	b140      	cbz	r0, 80057e8 <_vfiprintf_r+0x198>
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	eba0 000a 	sub.w	r0, r0, sl
 80057dc:	fa03 f000 	lsl.w	r0, r3, r0
 80057e0:	9b04      	ldr	r3, [sp, #16]
 80057e2:	4303      	orrs	r3, r0
 80057e4:	3401      	adds	r4, #1
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ec:	482c      	ldr	r0, [pc, #176]	; (80058a0 <_vfiprintf_r+0x250>)
 80057ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057f2:	2206      	movs	r2, #6
 80057f4:	f7fa fd04 	bl	8000200 <memchr>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d03f      	beq.n	800587c <_vfiprintf_r+0x22c>
 80057fc:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <_vfiprintf_r+0x254>)
 80057fe:	bb1b      	cbnz	r3, 8005848 <_vfiprintf_r+0x1f8>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	3307      	adds	r3, #7
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	3308      	adds	r3, #8
 800580a:	9303      	str	r3, [sp, #12]
 800580c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580e:	443b      	add	r3, r7
 8005810:	9309      	str	r3, [sp, #36]	; 0x24
 8005812:	e767      	b.n	80056e4 <_vfiprintf_r+0x94>
 8005814:	fb0c 3202 	mla	r2, ip, r2, r3
 8005818:	460c      	mov	r4, r1
 800581a:	2001      	movs	r0, #1
 800581c:	e7a5      	b.n	800576a <_vfiprintf_r+0x11a>
 800581e:	2300      	movs	r3, #0
 8005820:	3401      	adds	r4, #1
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	4619      	mov	r1, r3
 8005826:	f04f 0c0a 	mov.w	ip, #10
 800582a:	4620      	mov	r0, r4
 800582c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005830:	3a30      	subs	r2, #48	; 0x30
 8005832:	2a09      	cmp	r2, #9
 8005834:	d903      	bls.n	800583e <_vfiprintf_r+0x1ee>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0c5      	beq.n	80057c6 <_vfiprintf_r+0x176>
 800583a:	9105      	str	r1, [sp, #20]
 800583c:	e7c3      	b.n	80057c6 <_vfiprintf_r+0x176>
 800583e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005842:	4604      	mov	r4, r0
 8005844:	2301      	movs	r3, #1
 8005846:	e7f0      	b.n	800582a <_vfiprintf_r+0x1da>
 8005848:	ab03      	add	r3, sp, #12
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	462a      	mov	r2, r5
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <_vfiprintf_r+0x258>)
 8005850:	a904      	add	r1, sp, #16
 8005852:	4630      	mov	r0, r6
 8005854:	f3af 8000 	nop.w
 8005858:	4607      	mov	r7, r0
 800585a:	1c78      	adds	r0, r7, #1
 800585c:	d1d6      	bne.n	800580c <_vfiprintf_r+0x1bc>
 800585e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005860:	07d9      	lsls	r1, r3, #31
 8005862:	d405      	bmi.n	8005870 <_vfiprintf_r+0x220>
 8005864:	89ab      	ldrh	r3, [r5, #12]
 8005866:	059a      	lsls	r2, r3, #22
 8005868:	d402      	bmi.n	8005870 <_vfiprintf_r+0x220>
 800586a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800586c:	f7ff fcd5 	bl	800521a <__retarget_lock_release_recursive>
 8005870:	89ab      	ldrh	r3, [r5, #12]
 8005872:	065b      	lsls	r3, r3, #25
 8005874:	f53f af12 	bmi.w	800569c <_vfiprintf_r+0x4c>
 8005878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800587a:	e711      	b.n	80056a0 <_vfiprintf_r+0x50>
 800587c:	ab03      	add	r3, sp, #12
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	462a      	mov	r2, r5
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <_vfiprintf_r+0x258>)
 8005884:	a904      	add	r1, sp, #16
 8005886:	4630      	mov	r0, r6
 8005888:	f000 f880 	bl	800598c <_printf_i>
 800588c:	e7e4      	b.n	8005858 <_vfiprintf_r+0x208>
 800588e:	bf00      	nop
 8005890:	08006330 	.word	0x08006330
 8005894:	08006350 	.word	0x08006350
 8005898:	08006310 	.word	0x08006310
 800589c:	08006370 	.word	0x08006370
 80058a0:	0800637a 	.word	0x0800637a
 80058a4:	00000000 	.word	0x00000000
 80058a8:	0800562b 	.word	0x0800562b
 80058ac:	08006376 	.word	0x08006376

080058b0 <_printf_common>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	4616      	mov	r6, r2
 80058b6:	4699      	mov	r9, r3
 80058b8:	688a      	ldr	r2, [r1, #8]
 80058ba:	690b      	ldr	r3, [r1, #16]
 80058bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bfb8      	it	lt
 80058c4:	4613      	movlt	r3, r2
 80058c6:	6033      	str	r3, [r6, #0]
 80058c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058cc:	4607      	mov	r7, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	b10a      	cbz	r2, 80058d6 <_printf_common+0x26>
 80058d2:	3301      	adds	r3, #1
 80058d4:	6033      	str	r3, [r6, #0]
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	0699      	lsls	r1, r3, #26
 80058da:	bf42      	ittt	mi
 80058dc:	6833      	ldrmi	r3, [r6, #0]
 80058de:	3302      	addmi	r3, #2
 80058e0:	6033      	strmi	r3, [r6, #0]
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	f015 0506 	ands.w	r5, r5, #6
 80058e8:	d106      	bne.n	80058f8 <_printf_common+0x48>
 80058ea:	f104 0a19 	add.w	sl, r4, #25
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	6832      	ldr	r2, [r6, #0]
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dc26      	bgt.n	8005946 <_printf_common+0x96>
 80058f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058fc:	1e13      	subs	r3, r2, #0
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	bf18      	it	ne
 8005902:	2301      	movne	r3, #1
 8005904:	0692      	lsls	r2, r2, #26
 8005906:	d42b      	bmi.n	8005960 <_printf_common+0xb0>
 8005908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590c:	4649      	mov	r1, r9
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	3001      	adds	r0, #1
 8005914:	d01e      	beq.n	8005954 <_printf_common+0xa4>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	68e5      	ldr	r5, [r4, #12]
 800591a:	6832      	ldr	r2, [r6, #0]
 800591c:	f003 0306 	and.w	r3, r3, #6
 8005920:	2b04      	cmp	r3, #4
 8005922:	bf08      	it	eq
 8005924:	1aad      	subeq	r5, r5, r2
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	bf0c      	ite	eq
 800592c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005930:	2500      	movne	r5, #0
 8005932:	4293      	cmp	r3, r2
 8005934:	bfc4      	itt	gt
 8005936:	1a9b      	subgt	r3, r3, r2
 8005938:	18ed      	addgt	r5, r5, r3
 800593a:	2600      	movs	r6, #0
 800593c:	341a      	adds	r4, #26
 800593e:	42b5      	cmp	r5, r6
 8005940:	d11a      	bne.n	8005978 <_printf_common+0xc8>
 8005942:	2000      	movs	r0, #0
 8005944:	e008      	b.n	8005958 <_printf_common+0xa8>
 8005946:	2301      	movs	r3, #1
 8005948:	4652      	mov	r2, sl
 800594a:	4649      	mov	r1, r9
 800594c:	4638      	mov	r0, r7
 800594e:	47c0      	blx	r8
 8005950:	3001      	adds	r0, #1
 8005952:	d103      	bne.n	800595c <_printf_common+0xac>
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	3501      	adds	r5, #1
 800595e:	e7c6      	b.n	80058ee <_printf_common+0x3e>
 8005960:	18e1      	adds	r1, r4, r3
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	2030      	movs	r0, #48	; 0x30
 8005966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596a:	4422      	add	r2, r4
 800596c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005974:	3302      	adds	r3, #2
 8005976:	e7c7      	b.n	8005908 <_printf_common+0x58>
 8005978:	2301      	movs	r3, #1
 800597a:	4622      	mov	r2, r4
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d0e6      	beq.n	8005954 <_printf_common+0xa4>
 8005986:	3601      	adds	r6, #1
 8005988:	e7d9      	b.n	800593e <_printf_common+0x8e>
	...

0800598c <_printf_i>:
 800598c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	7e0f      	ldrb	r7, [r1, #24]
 8005992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005994:	2f78      	cmp	r7, #120	; 0x78
 8005996:	4691      	mov	r9, r2
 8005998:	4680      	mov	r8, r0
 800599a:	460c      	mov	r4, r1
 800599c:	469a      	mov	sl, r3
 800599e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059a2:	d807      	bhi.n	80059b4 <_printf_i+0x28>
 80059a4:	2f62      	cmp	r7, #98	; 0x62
 80059a6:	d80a      	bhi.n	80059be <_printf_i+0x32>
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	f000 80d8 	beq.w	8005b5e <_printf_i+0x1d2>
 80059ae:	2f58      	cmp	r7, #88	; 0x58
 80059b0:	f000 80a3 	beq.w	8005afa <_printf_i+0x16e>
 80059b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059bc:	e03a      	b.n	8005a34 <_printf_i+0xa8>
 80059be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c2:	2b15      	cmp	r3, #21
 80059c4:	d8f6      	bhi.n	80059b4 <_printf_i+0x28>
 80059c6:	a101      	add	r1, pc, #4	; (adr r1, 80059cc <_printf_i+0x40>)
 80059c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	080059b5 	.word	0x080059b5
 80059d8:	080059b5 	.word	0x080059b5
 80059dc:	080059b5 	.word	0x080059b5
 80059e0:	080059b5 	.word	0x080059b5
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	080059b5 	.word	0x080059b5
 80059ec:	080059b5 	.word	0x080059b5
 80059f0:	080059b5 	.word	0x080059b5
 80059f4:	080059b5 	.word	0x080059b5
 80059f8:	08005b45 	.word	0x08005b45
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005b27 	.word	0x08005b27
 8005a04:	080059b5 	.word	0x080059b5
 8005a08:	080059b5 	.word	0x080059b5
 8005a0c:	08005b67 	.word	0x08005b67
 8005a10:	080059b5 	.word	0x080059b5
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	080059b5 	.word	0x080059b5
 8005a1c:	080059b5 	.word	0x080059b5
 8005a20:	08005b2f 	.word	0x08005b2f
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	1d1a      	adds	r2, r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0a3      	b.n	8005b80 <_printf_i+0x1f4>
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	6829      	ldr	r1, [r5, #0]
 8005a3c:	0606      	lsls	r6, r0, #24
 8005a3e:	f101 0304 	add.w	r3, r1, #4
 8005a42:	d50a      	bpl.n	8005a5a <_printf_i+0xce>
 8005a44:	680e      	ldr	r6, [r1, #0]
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	da03      	bge.n	8005a54 <_printf_i+0xc8>
 8005a4c:	232d      	movs	r3, #45	; 0x2d
 8005a4e:	4276      	negs	r6, r6
 8005a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a54:	485e      	ldr	r0, [pc, #376]	; (8005bd0 <_printf_i+0x244>)
 8005a56:	230a      	movs	r3, #10
 8005a58:	e019      	b.n	8005a8e <_printf_i+0x102>
 8005a5a:	680e      	ldr	r6, [r1, #0]
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a62:	bf18      	it	ne
 8005a64:	b236      	sxthne	r6, r6
 8005a66:	e7ef      	b.n	8005a48 <_printf_i+0xbc>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	0601      	lsls	r1, r0, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0xec>
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0xf2>
 8005a78:	0646      	lsls	r6, r0, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0xe8>
 8005a7c:	881e      	ldrh	r6, [r3, #0]
 8005a7e:	4854      	ldr	r0, [pc, #336]	; (8005bd0 <_printf_i+0x244>)
 8005a80:	2f6f      	cmp	r7, #111	; 0x6f
 8005a82:	bf0c      	ite	eq
 8005a84:	2308      	moveq	r3, #8
 8005a86:	230a      	movne	r3, #10
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a8e:	6865      	ldr	r5, [r4, #4]
 8005a90:	60a5      	str	r5, [r4, #8]
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	bfa2      	ittt	ge
 8005a96:	6821      	ldrge	r1, [r4, #0]
 8005a98:	f021 0104 	bicge.w	r1, r1, #4
 8005a9c:	6021      	strge	r1, [r4, #0]
 8005a9e:	b90e      	cbnz	r6, 8005aa4 <_printf_i+0x118>
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	d04d      	beq.n	8005b40 <_printf_i+0x1b4>
 8005aa4:	4615      	mov	r5, r2
 8005aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8005aae:	5dc7      	ldrb	r7, [r0, r7]
 8005ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	460e      	mov	r6, r1
 8005aba:	d9f4      	bls.n	8005aa6 <_printf_i+0x11a>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10b      	bne.n	8005ad8 <_printf_i+0x14c>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07de      	lsls	r6, r3, #31
 8005ac4:	d508      	bpl.n	8005ad8 <_printf_i+0x14c>
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	4299      	cmp	r1, r3
 8005acc:	bfde      	ittt	le
 8005ace:	2330      	movle	r3, #48	; 0x30
 8005ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ad4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ad8:	1b52      	subs	r2, r2, r5
 8005ada:	6122      	str	r2, [r4, #16]
 8005adc:	f8cd a000 	str.w	sl, [sp]
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	aa03      	add	r2, sp, #12
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f7ff fee2 	bl	80058b0 <_printf_common>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d14c      	bne.n	8005b8a <_printf_i+0x1fe>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	b004      	add	sp, #16
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	4835      	ldr	r0, [pc, #212]	; (8005bd0 <_printf_i+0x244>)
 8005afc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b00:	6829      	ldr	r1, [r5, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b08:	6029      	str	r1, [r5, #0]
 8005b0a:	061d      	lsls	r5, r3, #24
 8005b0c:	d514      	bpl.n	8005b38 <_printf_i+0x1ac>
 8005b0e:	07df      	lsls	r7, r3, #31
 8005b10:	bf44      	itt	mi
 8005b12:	f043 0320 	orrmi.w	r3, r3, #32
 8005b16:	6023      	strmi	r3, [r4, #0]
 8005b18:	b91e      	cbnz	r6, 8005b22 <_printf_i+0x196>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	f023 0320 	bic.w	r3, r3, #32
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	2310      	movs	r3, #16
 8005b24:	e7b0      	b.n	8005a88 <_printf_i+0xfc>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	f043 0320 	orr.w	r3, r3, #32
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	2378      	movs	r3, #120	; 0x78
 8005b30:	4828      	ldr	r0, [pc, #160]	; (8005bd4 <_printf_i+0x248>)
 8005b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b36:	e7e3      	b.n	8005b00 <_printf_i+0x174>
 8005b38:	0659      	lsls	r1, r3, #25
 8005b3a:	bf48      	it	mi
 8005b3c:	b2b6      	uxthmi	r6, r6
 8005b3e:	e7e6      	b.n	8005b0e <_printf_i+0x182>
 8005b40:	4615      	mov	r5, r2
 8005b42:	e7bb      	b.n	8005abc <_printf_i+0x130>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	6826      	ldr	r6, [r4, #0]
 8005b48:	6961      	ldr	r1, [r4, #20]
 8005b4a:	1d18      	adds	r0, r3, #4
 8005b4c:	6028      	str	r0, [r5, #0]
 8005b4e:	0635      	lsls	r5, r6, #24
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	d501      	bpl.n	8005b58 <_printf_i+0x1cc>
 8005b54:	6019      	str	r1, [r3, #0]
 8005b56:	e002      	b.n	8005b5e <_printf_i+0x1d2>
 8005b58:	0670      	lsls	r0, r6, #25
 8005b5a:	d5fb      	bpl.n	8005b54 <_printf_i+0x1c8>
 8005b5c:	8019      	strh	r1, [r3, #0]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	4615      	mov	r5, r2
 8005b64:	e7ba      	b.n	8005adc <_printf_i+0x150>
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	681d      	ldr	r5, [r3, #0]
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	2100      	movs	r1, #0
 8005b72:	4628      	mov	r0, r5
 8005b74:	f7fa fb44 	bl	8000200 <memchr>
 8005b78:	b108      	cbz	r0, 8005b7e <_printf_i+0x1f2>
 8005b7a:	1b40      	subs	r0, r0, r5
 8005b7c:	6060      	str	r0, [r4, #4]
 8005b7e:	6863      	ldr	r3, [r4, #4]
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	2300      	movs	r3, #0
 8005b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b88:	e7a8      	b.n	8005adc <_printf_i+0x150>
 8005b8a:	6923      	ldr	r3, [r4, #16]
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	47d0      	blx	sl
 8005b94:	3001      	adds	r0, #1
 8005b96:	d0ab      	beq.n	8005af0 <_printf_i+0x164>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	079b      	lsls	r3, r3, #30
 8005b9c:	d413      	bmi.n	8005bc6 <_printf_i+0x23a>
 8005b9e:	68e0      	ldr	r0, [r4, #12]
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	4298      	cmp	r0, r3
 8005ba4:	bfb8      	it	lt
 8005ba6:	4618      	movlt	r0, r3
 8005ba8:	e7a4      	b.n	8005af4 <_printf_i+0x168>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4632      	mov	r2, r6
 8005bae:	4649      	mov	r1, r9
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	47d0      	blx	sl
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d09b      	beq.n	8005af0 <_printf_i+0x164>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	9903      	ldr	r1, [sp, #12]
 8005bbe:	1a5b      	subs	r3, r3, r1
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dcf2      	bgt.n	8005baa <_printf_i+0x21e>
 8005bc4:	e7eb      	b.n	8005b9e <_printf_i+0x212>
 8005bc6:	2500      	movs	r5, #0
 8005bc8:	f104 0619 	add.w	r6, r4, #25
 8005bcc:	e7f5      	b.n	8005bba <_printf_i+0x22e>
 8005bce:	bf00      	nop
 8005bd0:	08006381 	.word	0x08006381
 8005bd4:	08006392 	.word	0x08006392

08005bd8 <_sbrk_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	; (8005bf4 <_sbrk_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb fb08 	bl	80011f8 <_sbrk>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_sbrk_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_sbrk_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000270 	.word	0x20000270

08005bf8 <__sread>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	f000 fb0a 	bl	8006218 <_read_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	bfab      	itete	ge
 8005c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c0c:	181b      	addge	r3, r3, r0
 8005c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c12:	bfac      	ite	ge
 8005c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c16:	81a3      	strhlt	r3, [r4, #12]
 8005c18:	bd10      	pop	{r4, pc}

08005c1a <__swrite>:
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	d505      	bpl.n	8005c38 <__swrite+0x1e>
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f9c8 	bl	8005fc8 <_lseek_r>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	f000 b869 	b.w	8005d24 <_write_r>

08005c52 <__sseek>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	460c      	mov	r4, r1
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 f9b5 	bl	8005fc8 <_lseek_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	bf15      	itete	ne
 8005c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c6e:	81a3      	strheq	r3, [r4, #12]
 8005c70:	bf18      	it	ne
 8005c72:	81a3      	strhne	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__sclose>:
 8005c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7a:	f000 b8d3 	b.w	8005e24 <_close_r>
	...

08005c80 <__swbuf_r>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	460e      	mov	r6, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	4605      	mov	r5, r0
 8005c88:	b118      	cbz	r0, 8005c92 <__swbuf_r+0x12>
 8005c8a:	6983      	ldr	r3, [r0, #24]
 8005c8c:	b90b      	cbnz	r3, 8005c92 <__swbuf_r+0x12>
 8005c8e:	f7ff fa25 	bl	80050dc <__sinit>
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <__swbuf_r+0x98>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d12b      	bne.n	8005cf0 <__swbuf_r+0x70>
 8005c98:	686c      	ldr	r4, [r5, #4]
 8005c9a:	69a3      	ldr	r3, [r4, #24]
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	071a      	lsls	r2, r3, #28
 8005ca2:	d52f      	bpl.n	8005d04 <__swbuf_r+0x84>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	b36b      	cbz	r3, 8005d04 <__swbuf_r+0x84>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	1ac0      	subs	r0, r0, r3
 8005cae:	6963      	ldr	r3, [r4, #20]
 8005cb0:	b2f6      	uxtb	r6, r6
 8005cb2:	4283      	cmp	r3, r0
 8005cb4:	4637      	mov	r7, r6
 8005cb6:	dc04      	bgt.n	8005cc2 <__swbuf_r+0x42>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 f948 	bl	8005f50 <_fflush_r>
 8005cc0:	bb30      	cbnz	r0, 8005d10 <__swbuf_r+0x90>
 8005cc2:	68a3      	ldr	r3, [r4, #8]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	60a3      	str	r3, [r4, #8]
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	6022      	str	r2, [r4, #0]
 8005cce:	701e      	strb	r6, [r3, #0]
 8005cd0:	6963      	ldr	r3, [r4, #20]
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	4283      	cmp	r3, r0
 8005cd6:	d004      	beq.n	8005ce2 <__swbuf_r+0x62>
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	07db      	lsls	r3, r3, #31
 8005cdc:	d506      	bpl.n	8005cec <__swbuf_r+0x6c>
 8005cde:	2e0a      	cmp	r6, #10
 8005ce0:	d104      	bne.n	8005cec <__swbuf_r+0x6c>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 f933 	bl	8005f50 <_fflush_r>
 8005cea:	b988      	cbnz	r0, 8005d10 <__swbuf_r+0x90>
 8005cec:	4638      	mov	r0, r7
 8005cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <__swbuf_r+0x9c>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	d101      	bne.n	8005cfa <__swbuf_r+0x7a>
 8005cf6:	68ac      	ldr	r4, [r5, #8]
 8005cf8:	e7cf      	b.n	8005c9a <__swbuf_r+0x1a>
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <__swbuf_r+0xa0>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	bf08      	it	eq
 8005d00:	68ec      	ldreq	r4, [r5, #12]
 8005d02:	e7ca      	b.n	8005c9a <__swbuf_r+0x1a>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f81e 	bl	8005d48 <__swsetup_r>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d0cb      	beq.n	8005ca8 <__swbuf_r+0x28>
 8005d10:	f04f 37ff 	mov.w	r7, #4294967295
 8005d14:	e7ea      	b.n	8005cec <__swbuf_r+0x6c>
 8005d16:	bf00      	nop
 8005d18:	08006330 	.word	0x08006330
 8005d1c:	08006350 	.word	0x08006350
 8005d20:	08006310 	.word	0x08006310

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	; (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fa fd88 	bl	8000848 <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000270 	.word	0x20000270

08005d48 <__swsetup_r>:
 8005d48:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <__swsetup_r+0xcc>)
 8005d4a:	b570      	push	{r4, r5, r6, lr}
 8005d4c:	681d      	ldr	r5, [r3, #0]
 8005d4e:	4606      	mov	r6, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	b125      	cbz	r5, 8005d5e <__swsetup_r+0x16>
 8005d54:	69ab      	ldr	r3, [r5, #24]
 8005d56:	b913      	cbnz	r3, 8005d5e <__swsetup_r+0x16>
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7ff f9bf 	bl	80050dc <__sinit>
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <__swsetup_r+0xd0>)
 8005d60:	429c      	cmp	r4, r3
 8005d62:	d10f      	bne.n	8005d84 <__swsetup_r+0x3c>
 8005d64:	686c      	ldr	r4, [r5, #4]
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d42c      	bmi.n	8005dca <__swsetup_r+0x82>
 8005d70:	06dd      	lsls	r5, r3, #27
 8005d72:	d411      	bmi.n	8005d98 <__swsetup_r+0x50>
 8005d74:	2309      	movs	r3, #9
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d82:	e03e      	b.n	8005e02 <__swsetup_r+0xba>
 8005d84:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <__swsetup_r+0xd4>)
 8005d86:	429c      	cmp	r4, r3
 8005d88:	d101      	bne.n	8005d8e <__swsetup_r+0x46>
 8005d8a:	68ac      	ldr	r4, [r5, #8]
 8005d8c:	e7eb      	b.n	8005d66 <__swsetup_r+0x1e>
 8005d8e:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <__swsetup_r+0xd8>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	bf08      	it	eq
 8005d94:	68ec      	ldreq	r4, [r5, #12]
 8005d96:	e7e6      	b.n	8005d66 <__swsetup_r+0x1e>
 8005d98:	0758      	lsls	r0, r3, #29
 8005d9a:	d512      	bpl.n	8005dc2 <__swsetup_r+0x7a>
 8005d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d9e:	b141      	cbz	r1, 8005db2 <__swsetup_r+0x6a>
 8005da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005da4:	4299      	cmp	r1, r3
 8005da6:	d002      	beq.n	8005dae <__swsetup_r+0x66>
 8005da8:	4630      	mov	r0, r6
 8005daa:	f000 f9b9 	bl	8006120 <_free_r>
 8005dae:	2300      	movs	r3, #0
 8005db0:	6363      	str	r3, [r4, #52]	; 0x34
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6063      	str	r3, [r4, #4]
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f043 0308 	orr.w	r3, r3, #8
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	b94b      	cbnz	r3, 8005de2 <__swsetup_r+0x9a>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd8:	d003      	beq.n	8005de2 <__swsetup_r+0x9a>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f000 f92b 	bl	8006038 <__smakebuf_r>
 8005de2:	89a0      	ldrh	r0, [r4, #12]
 8005de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de8:	f010 0301 	ands.w	r3, r0, #1
 8005dec:	d00a      	beq.n	8005e04 <__swsetup_r+0xbc>
 8005dee:	2300      	movs	r3, #0
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	6963      	ldr	r3, [r4, #20]
 8005df4:	425b      	negs	r3, r3
 8005df6:	61a3      	str	r3, [r4, #24]
 8005df8:	6923      	ldr	r3, [r4, #16]
 8005dfa:	b943      	cbnz	r3, 8005e0e <__swsetup_r+0xc6>
 8005dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e00:	d1ba      	bne.n	8005d78 <__swsetup_r+0x30>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	0781      	lsls	r1, r0, #30
 8005e06:	bf58      	it	pl
 8005e08:	6963      	ldrpl	r3, [r4, #20]
 8005e0a:	60a3      	str	r3, [r4, #8]
 8005e0c:	e7f4      	b.n	8005df8 <__swsetup_r+0xb0>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	e7f7      	b.n	8005e02 <__swsetup_r+0xba>
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c
 8005e18:	08006330 	.word	0x08006330
 8005e1c:	08006350 	.word	0x08006350
 8005e20:	08006310 	.word	0x08006310

08005e24 <_close_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d06      	ldr	r5, [pc, #24]	; (8005e40 <_close_r+0x1c>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fb f9ae 	bl	8001190 <_close>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_close_r+0x1a>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_close_r+0x1a>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20000270 	.word	0x20000270

08005e44 <__sflush_r>:
 8005e44:	898a      	ldrh	r2, [r1, #12]
 8005e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	0710      	lsls	r0, r2, #28
 8005e4e:	460c      	mov	r4, r1
 8005e50:	d458      	bmi.n	8005f04 <__sflush_r+0xc0>
 8005e52:	684b      	ldr	r3, [r1, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dc05      	bgt.n	8005e64 <__sflush_r+0x20>
 8005e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc02      	bgt.n	8005e64 <__sflush_r+0x20>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	d0f9      	beq.n	8005e5e <__sflush_r+0x1a>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e70:	682f      	ldr	r7, [r5, #0]
 8005e72:	602b      	str	r3, [r5, #0]
 8005e74:	d032      	beq.n	8005edc <__sflush_r+0x98>
 8005e76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	075a      	lsls	r2, r3, #29
 8005e7c:	d505      	bpl.n	8005e8a <__sflush_r+0x46>
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	1ac0      	subs	r0, r0, r3
 8005e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e84:	b10b      	cbz	r3, 8005e8a <__sflush_r+0x46>
 8005e86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e88:	1ac0      	subs	r0, r0, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e90:	6a21      	ldr	r1, [r4, #32]
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b0      	blx	r6
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	d106      	bne.n	8005eaa <__sflush_r+0x66>
 8005e9c:	6829      	ldr	r1, [r5, #0]
 8005e9e:	291d      	cmp	r1, #29
 8005ea0:	d82c      	bhi.n	8005efc <__sflush_r+0xb8>
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <__sflush_r+0x108>)
 8005ea4:	40ca      	lsrs	r2, r1
 8005ea6:	07d6      	lsls	r6, r2, #31
 8005ea8:	d528      	bpl.n	8005efc <__sflush_r+0xb8>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	6062      	str	r2, [r4, #4]
 8005eae:	04d9      	lsls	r1, r3, #19
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	6022      	str	r2, [r4, #0]
 8005eb4:	d504      	bpl.n	8005ec0 <__sflush_r+0x7c>
 8005eb6:	1c42      	adds	r2, r0, #1
 8005eb8:	d101      	bne.n	8005ebe <__sflush_r+0x7a>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	b903      	cbnz	r3, 8005ec0 <__sflush_r+0x7c>
 8005ebe:	6560      	str	r0, [r4, #84]	; 0x54
 8005ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ec2:	602f      	str	r7, [r5, #0]
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d0ca      	beq.n	8005e5e <__sflush_r+0x1a>
 8005ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	d002      	beq.n	8005ed6 <__sflush_r+0x92>
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 f925 	bl	8006120 <_free_r>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	6360      	str	r0, [r4, #52]	; 0x34
 8005eda:	e7c1      	b.n	8005e60 <__sflush_r+0x1c>
 8005edc:	6a21      	ldr	r1, [r4, #32]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b0      	blx	r6
 8005ee4:	1c41      	adds	r1, r0, #1
 8005ee6:	d1c7      	bne.n	8005e78 <__sflush_r+0x34>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0c4      	beq.n	8005e78 <__sflush_r+0x34>
 8005eee:	2b1d      	cmp	r3, #29
 8005ef0:	d001      	beq.n	8005ef6 <__sflush_r+0xb2>
 8005ef2:	2b16      	cmp	r3, #22
 8005ef4:	d101      	bne.n	8005efa <__sflush_r+0xb6>
 8005ef6:	602f      	str	r7, [r5, #0]
 8005ef8:	e7b1      	b.n	8005e5e <__sflush_r+0x1a>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	e7ad      	b.n	8005e60 <__sflush_r+0x1c>
 8005f04:	690f      	ldr	r7, [r1, #16]
 8005f06:	2f00      	cmp	r7, #0
 8005f08:	d0a9      	beq.n	8005e5e <__sflush_r+0x1a>
 8005f0a:	0793      	lsls	r3, r2, #30
 8005f0c:	680e      	ldr	r6, [r1, #0]
 8005f0e:	bf08      	it	eq
 8005f10:	694b      	ldreq	r3, [r1, #20]
 8005f12:	600f      	str	r7, [r1, #0]
 8005f14:	bf18      	it	ne
 8005f16:	2300      	movne	r3, #0
 8005f18:	eba6 0807 	sub.w	r8, r6, r7
 8005f1c:	608b      	str	r3, [r1, #8]
 8005f1e:	f1b8 0f00 	cmp.w	r8, #0
 8005f22:	dd9c      	ble.n	8005e5e <__sflush_r+0x1a>
 8005f24:	6a21      	ldr	r1, [r4, #32]
 8005f26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f28:	4643      	mov	r3, r8
 8005f2a:	463a      	mov	r2, r7
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b0      	blx	r6
 8005f30:	2800      	cmp	r0, #0
 8005f32:	dc06      	bgt.n	8005f42 <__sflush_r+0xfe>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3a:	81a3      	strh	r3, [r4, #12]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e78e      	b.n	8005e60 <__sflush_r+0x1c>
 8005f42:	4407      	add	r7, r0
 8005f44:	eba8 0800 	sub.w	r8, r8, r0
 8005f48:	e7e9      	b.n	8005f1e <__sflush_r+0xda>
 8005f4a:	bf00      	nop
 8005f4c:	20400001 	.word	0x20400001

08005f50 <_fflush_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	690b      	ldr	r3, [r1, #16]
 8005f54:	4605      	mov	r5, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	b913      	cbnz	r3, 8005f60 <_fflush_r+0x10>
 8005f5a:	2500      	movs	r5, #0
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	b118      	cbz	r0, 8005f6a <_fflush_r+0x1a>
 8005f62:	6983      	ldr	r3, [r0, #24]
 8005f64:	b90b      	cbnz	r3, 8005f6a <_fflush_r+0x1a>
 8005f66:	f7ff f8b9 	bl	80050dc <__sinit>
 8005f6a:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <_fflush_r+0x6c>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d11b      	bne.n	8005fa8 <_fflush_r+0x58>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ef      	beq.n	8005f5a <_fflush_r+0xa>
 8005f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f7c:	07d0      	lsls	r0, r2, #31
 8005f7e:	d404      	bmi.n	8005f8a <_fflush_r+0x3a>
 8005f80:	0599      	lsls	r1, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_fflush_r+0x3a>
 8005f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f86:	f7ff f947 	bl	8005218 <__retarget_lock_acquire_recursive>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	f7ff ff59 	bl	8005e44 <__sflush_r>
 8005f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f94:	07da      	lsls	r2, r3, #31
 8005f96:	4605      	mov	r5, r0
 8005f98:	d4e0      	bmi.n	8005f5c <_fflush_r+0xc>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	059b      	lsls	r3, r3, #22
 8005f9e:	d4dd      	bmi.n	8005f5c <_fflush_r+0xc>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa2:	f7ff f93a 	bl	800521a <__retarget_lock_release_recursive>
 8005fa6:	e7d9      	b.n	8005f5c <_fflush_r+0xc>
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <_fflush_r+0x70>)
 8005faa:	429c      	cmp	r4, r3
 8005fac:	d101      	bne.n	8005fb2 <_fflush_r+0x62>
 8005fae:	68ac      	ldr	r4, [r5, #8]
 8005fb0:	e7df      	b.n	8005f72 <_fflush_r+0x22>
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <_fflush_r+0x74>)
 8005fb4:	429c      	cmp	r4, r3
 8005fb6:	bf08      	it	eq
 8005fb8:	68ec      	ldreq	r4, [r5, #12]
 8005fba:	e7da      	b.n	8005f72 <_fflush_r+0x22>
 8005fbc:	08006330 	.word	0x08006330
 8005fc0:	08006350 	.word	0x08006350
 8005fc4:	08006310 	.word	0x08006310

08005fc8 <_lseek_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	; (8005fe8 <_lseek_r+0x20>)
 8005fcc:	4604      	mov	r4, r0
 8005fce:	4608      	mov	r0, r1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fb f901 	bl	80011de <_lseek>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_lseek_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_lseek_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000270 	.word	0x20000270

08005fec <__swhatbuf_r>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	460e      	mov	r6, r1
 8005ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	b096      	sub	sp, #88	; 0x58
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	da08      	bge.n	8006010 <__swhatbuf_r+0x24>
 8005ffe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	061a      	lsls	r2, r3, #24
 8006008:	d410      	bmi.n	800602c <__swhatbuf_r+0x40>
 800600a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600e:	e00e      	b.n	800602e <__swhatbuf_r+0x42>
 8006010:	466a      	mov	r2, sp
 8006012:	f000 f913 	bl	800623c <_fstat_r>
 8006016:	2800      	cmp	r0, #0
 8006018:	dbf1      	blt.n	8005ffe <__swhatbuf_r+0x12>
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006024:	425a      	negs	r2, r3
 8006026:	415a      	adcs	r2, r3
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	e7ee      	b.n	800600a <__swhatbuf_r+0x1e>
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	2000      	movs	r0, #0
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	b016      	add	sp, #88	; 0x58
 8006034:	bd70      	pop	{r4, r5, r6, pc}
	...

08006038 <__smakebuf_r>:
 8006038:	898b      	ldrh	r3, [r1, #12]
 800603a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800603c:	079d      	lsls	r5, r3, #30
 800603e:	4606      	mov	r6, r0
 8006040:	460c      	mov	r4, r1
 8006042:	d507      	bpl.n	8006054 <__smakebuf_r+0x1c>
 8006044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	2301      	movs	r3, #1
 800604e:	6163      	str	r3, [r4, #20]
 8006050:	b002      	add	sp, #8
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	ab01      	add	r3, sp, #4
 8006056:	466a      	mov	r2, sp
 8006058:	f7ff ffc8 	bl	8005fec <__swhatbuf_r>
 800605c:	9900      	ldr	r1, [sp, #0]
 800605e:	4605      	mov	r5, r0
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff f8fb 	bl	800525c <_malloc_r>
 8006066:	b948      	cbnz	r0, 800607c <__smakebuf_r+0x44>
 8006068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d4ef      	bmi.n	8006050 <__smakebuf_r+0x18>
 8006070:	f023 0303 	bic.w	r3, r3, #3
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	e7e3      	b.n	8006044 <__smakebuf_r+0xc>
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <__smakebuf_r+0x7c>)
 800607e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	6020      	str	r0, [r4, #0]
 8006084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	9b00      	ldr	r3, [sp, #0]
 800608c:	6163      	str	r3, [r4, #20]
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	6120      	str	r0, [r4, #16]
 8006092:	b15b      	cbz	r3, 80060ac <__smakebuf_r+0x74>
 8006094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f8e1 	bl	8006260 <_isatty_r>
 800609e:	b128      	cbz	r0, 80060ac <__smakebuf_r+0x74>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	81a3      	strh	r3, [r4, #12]
 80060ac:	89a0      	ldrh	r0, [r4, #12]
 80060ae:	4305      	orrs	r5, r0
 80060b0:	81a5      	strh	r5, [r4, #12]
 80060b2:	e7cd      	b.n	8006050 <__smakebuf_r+0x18>
 80060b4:	08005075 	.word	0x08005075

080060b8 <memcpy>:
 80060b8:	440a      	add	r2, r1
 80060ba:	4291      	cmp	r1, r2
 80060bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060c0:	d100      	bne.n	80060c4 <memcpy+0xc>
 80060c2:	4770      	bx	lr
 80060c4:	b510      	push	{r4, lr}
 80060c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ce:	4291      	cmp	r1, r2
 80060d0:	d1f9      	bne.n	80060c6 <memcpy+0xe>
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <memmove>:
 80060d4:	4288      	cmp	r0, r1
 80060d6:	b510      	push	{r4, lr}
 80060d8:	eb01 0402 	add.w	r4, r1, r2
 80060dc:	d902      	bls.n	80060e4 <memmove+0x10>
 80060de:	4284      	cmp	r4, r0
 80060e0:	4623      	mov	r3, r4
 80060e2:	d807      	bhi.n	80060f4 <memmove+0x20>
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	42a1      	cmp	r1, r4
 80060e8:	d008      	beq.n	80060fc <memmove+0x28>
 80060ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f2:	e7f8      	b.n	80060e6 <memmove+0x12>
 80060f4:	4402      	add	r2, r0
 80060f6:	4601      	mov	r1, r0
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d100      	bne.n	80060fe <memmove+0x2a>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006106:	e7f7      	b.n	80060f8 <memmove+0x24>

08006108 <__malloc_lock>:
 8006108:	4801      	ldr	r0, [pc, #4]	; (8006110 <__malloc_lock+0x8>)
 800610a:	f7ff b885 	b.w	8005218 <__retarget_lock_acquire_recursive>
 800610e:	bf00      	nop
 8006110:	20000264 	.word	0x20000264

08006114 <__malloc_unlock>:
 8006114:	4801      	ldr	r0, [pc, #4]	; (800611c <__malloc_unlock+0x8>)
 8006116:	f7ff b880 	b.w	800521a <__retarget_lock_release_recursive>
 800611a:	bf00      	nop
 800611c:	20000264 	.word	0x20000264

08006120 <_free_r>:
 8006120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006122:	2900      	cmp	r1, #0
 8006124:	d044      	beq.n	80061b0 <_free_r+0x90>
 8006126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612a:	9001      	str	r0, [sp, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f1a1 0404 	sub.w	r4, r1, #4
 8006132:	bfb8      	it	lt
 8006134:	18e4      	addlt	r4, r4, r3
 8006136:	f7ff ffe7 	bl	8006108 <__malloc_lock>
 800613a:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <_free_r+0x94>)
 800613c:	9801      	ldr	r0, [sp, #4]
 800613e:	6813      	ldr	r3, [r2, #0]
 8006140:	b933      	cbnz	r3, 8006150 <_free_r+0x30>
 8006142:	6063      	str	r3, [r4, #4]
 8006144:	6014      	str	r4, [r2, #0]
 8006146:	b003      	add	sp, #12
 8006148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800614c:	f7ff bfe2 	b.w	8006114 <__malloc_unlock>
 8006150:	42a3      	cmp	r3, r4
 8006152:	d908      	bls.n	8006166 <_free_r+0x46>
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	1961      	adds	r1, r4, r5
 8006158:	428b      	cmp	r3, r1
 800615a:	bf01      	itttt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	1949      	addeq	r1, r1, r5
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	e7ed      	b.n	8006142 <_free_r+0x22>
 8006166:	461a      	mov	r2, r3
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b10b      	cbz	r3, 8006170 <_free_r+0x50>
 800616c:	42a3      	cmp	r3, r4
 800616e:	d9fa      	bls.n	8006166 <_free_r+0x46>
 8006170:	6811      	ldr	r1, [r2, #0]
 8006172:	1855      	adds	r5, r2, r1
 8006174:	42a5      	cmp	r5, r4
 8006176:	d10b      	bne.n	8006190 <_free_r+0x70>
 8006178:	6824      	ldr	r4, [r4, #0]
 800617a:	4421      	add	r1, r4
 800617c:	1854      	adds	r4, r2, r1
 800617e:	42a3      	cmp	r3, r4
 8006180:	6011      	str	r1, [r2, #0]
 8006182:	d1e0      	bne.n	8006146 <_free_r+0x26>
 8006184:	681c      	ldr	r4, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	6053      	str	r3, [r2, #4]
 800618a:	4421      	add	r1, r4
 800618c:	6011      	str	r1, [r2, #0]
 800618e:	e7da      	b.n	8006146 <_free_r+0x26>
 8006190:	d902      	bls.n	8006198 <_free_r+0x78>
 8006192:	230c      	movs	r3, #12
 8006194:	6003      	str	r3, [r0, #0]
 8006196:	e7d6      	b.n	8006146 <_free_r+0x26>
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1961      	adds	r1, r4, r5
 800619c:	428b      	cmp	r3, r1
 800619e:	bf04      	itt	eq
 80061a0:	6819      	ldreq	r1, [r3, #0]
 80061a2:	685b      	ldreq	r3, [r3, #4]
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	bf04      	itt	eq
 80061a8:	1949      	addeq	r1, r1, r5
 80061aa:	6021      	streq	r1, [r4, #0]
 80061ac:	6054      	str	r4, [r2, #4]
 80061ae:	e7ca      	b.n	8006146 <_free_r+0x26>
 80061b0:	b003      	add	sp, #12
 80061b2:	bd30      	pop	{r4, r5, pc}
 80061b4:	20000268 	.word	0x20000268

080061b8 <_realloc_r>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	4680      	mov	r8, r0
 80061be:	4614      	mov	r4, r2
 80061c0:	460e      	mov	r6, r1
 80061c2:	b921      	cbnz	r1, 80061ce <_realloc_r+0x16>
 80061c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	4611      	mov	r1, r2
 80061ca:	f7ff b847 	b.w	800525c <_malloc_r>
 80061ce:	b92a      	cbnz	r2, 80061dc <_realloc_r+0x24>
 80061d0:	f7ff ffa6 	bl	8006120 <_free_r>
 80061d4:	4625      	mov	r5, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061dc:	f000 f850 	bl	8006280 <_malloc_usable_size_r>
 80061e0:	4284      	cmp	r4, r0
 80061e2:	4607      	mov	r7, r0
 80061e4:	d802      	bhi.n	80061ec <_realloc_r+0x34>
 80061e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061ea:	d812      	bhi.n	8006212 <_realloc_r+0x5a>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4640      	mov	r0, r8
 80061f0:	f7ff f834 	bl	800525c <_malloc_r>
 80061f4:	4605      	mov	r5, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d0ed      	beq.n	80061d6 <_realloc_r+0x1e>
 80061fa:	42bc      	cmp	r4, r7
 80061fc:	4622      	mov	r2, r4
 80061fe:	4631      	mov	r1, r6
 8006200:	bf28      	it	cs
 8006202:	463a      	movcs	r2, r7
 8006204:	f7ff ff58 	bl	80060b8 <memcpy>
 8006208:	4631      	mov	r1, r6
 800620a:	4640      	mov	r0, r8
 800620c:	f7ff ff88 	bl	8006120 <_free_r>
 8006210:	e7e1      	b.n	80061d6 <_realloc_r+0x1e>
 8006212:	4635      	mov	r5, r6
 8006214:	e7df      	b.n	80061d6 <_realloc_r+0x1e>
	...

08006218 <_read_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d07      	ldr	r5, [pc, #28]	; (8006238 <_read_r+0x20>)
 800621c:	4604      	mov	r4, r0
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	2200      	movs	r2, #0
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f7fa faf8 	bl	800081c <_read>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_read_r+0x1e>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_read_r+0x1e>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	20000270 	.word	0x20000270

0800623c <_fstat_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d07      	ldr	r5, [pc, #28]	; (800625c <_fstat_r+0x20>)
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	4611      	mov	r1, r2
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	f7fa ffad 	bl	80011a8 <_fstat>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d102      	bne.n	8006258 <_fstat_r+0x1c>
 8006252:	682b      	ldr	r3, [r5, #0]
 8006254:	b103      	cbz	r3, 8006258 <_fstat_r+0x1c>
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	bd38      	pop	{r3, r4, r5, pc}
 800625a:	bf00      	nop
 800625c:	20000270 	.word	0x20000270

08006260 <_isatty_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d06      	ldr	r5, [pc, #24]	; (800627c <_isatty_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	f7fa ffac 	bl	80011c8 <_isatty>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_isatty_r+0x1a>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_isatty_r+0x1a>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	20000270 	.word	0x20000270

08006280 <_malloc_usable_size_r>:
 8006280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006284:	1f18      	subs	r0, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfbc      	itt	lt
 800628a:	580b      	ldrlt	r3, [r1, r0]
 800628c:	18c0      	addlt	r0, r0, r3
 800628e:	4770      	bx	lr

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
